
huswirelesscontrol.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800200  00002200  00002294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002200  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800308  00800308  0000239c  2**0
                  ALLOC
  3 .debug_aranges 000001c0  00000000  00000000  0000239c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000004d8  00000000  00000000  0000255c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002c07  00000000  00000000  00002a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000014fc  00000000  00000000  0000563b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001cc7  00000000  00000000  00006b37  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000410  00000000  00000000  00008800  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000061f  00000000  00000000  00008c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000096e  00000000  00000000  0000922f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00009b9d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 bc 01 	jmp	0x378	; 0x378 <__vector_5>
      18:	0c 94 91 01 	jmp	0x322	; 0x322 <__vector_6>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__vector_25>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e0 e0       	ldi	r30, 0x00	; 0
      fc:	f2 e2       	ldi	r31, 0x22	; 34
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 30       	cpi	r26, 0x08	; 8
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	13 e0       	ldi	r17, 0x03	; 3
     110:	a8 e0       	ldi	r26, 0x08	; 8
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a3 31       	cpi	r26, 0x13	; 19
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <main>
     122:	0c 94 fe 10 	jmp	0x21fc	; 0x21fc <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <buzzer_pin_config>:

/*****************************************************/
/**			Function to configure Buzzer			**/
/*****************************************************/
void buzzer_pin_config (void)
{
     12a:	df 93       	push	r29
     12c:	cf 93       	push	r28
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
     132:	a7 e2       	ldi	r26, 0x27	; 39
     134:	b0 e0       	ldi	r27, 0x00	; 0
     136:	e7 e2       	ldi	r30, 0x27	; 39
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	80 81       	ld	r24, Z
     13c:	88 60       	ori	r24, 0x08	; 8
     13e:	8c 93       	st	X, r24
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
     140:	a8 e2       	ldi	r26, 0x28	; 40
     142:	b0 e0       	ldi	r27, 0x00	; 0
     144:	e8 e2       	ldi	r30, 0x28	; 40
     146:	f0 e0       	ldi	r31, 0x00	; 0
     148:	80 81       	ld	r24, Z
     14a:	87 7f       	andi	r24, 0xF7	; 247
     14c:	8c 93       	st	X, r24
}
     14e:	cf 91       	pop	r28
     150:	df 91       	pop	r29
     152:	08 95       	ret

00000154 <buzzer_on>:

void buzzer_on (void)
{
     154:	df 93       	push	r29
     156:	cf 93       	push	r28
     158:	0f 92       	push	r0
     15a:	cd b7       	in	r28, 0x3d	; 61
     15c:	de b7       	in	r29, 0x3e	; 62
 unsigned char port_restore = 0;
     15e:	19 82       	std	Y+1, r1	; 0x01
 port_restore = PINC;
     160:	e6 e2       	ldi	r30, 0x26	; 38
     162:	f0 e0       	ldi	r31, 0x00	; 0
     164:	80 81       	ld	r24, Z
     166:	89 83       	std	Y+1, r24	; 0x01
 port_restore = port_restore | 0x08;
     168:	89 81       	ldd	r24, Y+1	; 0x01
     16a:	88 60       	ori	r24, 0x08	; 8
     16c:	89 83       	std	Y+1, r24	; 0x01
 PORTC = port_restore;
     16e:	e8 e2       	ldi	r30, 0x28	; 40
     170:	f0 e0       	ldi	r31, 0x00	; 0
     172:	89 81       	ldd	r24, Y+1	; 0x01
     174:	80 83       	st	Z, r24
}
     176:	0f 90       	pop	r0
     178:	cf 91       	pop	r28
     17a:	df 91       	pop	r29
     17c:	08 95       	ret

0000017e <buzzer_off>:

void buzzer_off (void)
{
     17e:	df 93       	push	r29
     180:	cf 93       	push	r28
     182:	0f 92       	push	r0
     184:	cd b7       	in	r28, 0x3d	; 61
     186:	de b7       	in	r29, 0x3e	; 62
 unsigned char port_restore = 0;
     188:	19 82       	std	Y+1, r1	; 0x01
 port_restore = PINC;
     18a:	e6 e2       	ldi	r30, 0x26	; 38
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	80 81       	ld	r24, Z
     190:	89 83       	std	Y+1, r24	; 0x01
 port_restore = port_restore & 0xF7;
     192:	89 81       	ldd	r24, Y+1	; 0x01
     194:	87 7f       	andi	r24, 0xF7	; 247
     196:	89 83       	std	Y+1, r24	; 0x01
 PORTC = port_restore;
     198:	e8 e2       	ldi	r30, 0x28	; 40
     19a:	f0 e0       	ldi	r31, 0x00	; 0
     19c:	89 81       	ldd	r24, Y+1	; 0x01
     19e:	80 83       	st	Z, r24
}
     1a0:	0f 90       	pop	r0
     1a2:	cf 91       	pop	r28
     1a4:	df 91       	pop	r29
     1a6:	08 95       	ret

000001a8 <interrupt_switch_config>:

/*****************************************************/
/**		Function to configure Interrupt switch		**/
/*****************************************************/
void interrupt_switch_config (void)
{
     1a8:	df 93       	push	r29
     1aa:	cf 93       	push	r28
     1ac:	cd b7       	in	r28, 0x3d	; 61
     1ae:	de b7       	in	r29, 0x3e	; 62
 DDRE = DDRE & 0x7F;  //PORTE 7 pin set as input  
     1b0:	ad e2       	ldi	r26, 0x2D	; 45
     1b2:	b0 e0       	ldi	r27, 0x00	; 0
     1b4:	ed e2       	ldi	r30, 0x2D	; 45
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
     1b8:	80 81       	ld	r24, Z
     1ba:	8f 77       	andi	r24, 0x7F	; 127
     1bc:	8c 93       	st	X, r24
 PORTE = PORTE | 0x80; //PORTE7 internal pullup enabled
     1be:	ae e2       	ldi	r26, 0x2E	; 46
     1c0:	b0 e0       	ldi	r27, 0x00	; 0
     1c2:	ee e2       	ldi	r30, 0x2E	; 46
     1c4:	f0 e0       	ldi	r31, 0x00	; 0
     1c6:	80 81       	ld	r24, Z
     1c8:	80 68       	ori	r24, 0x80	; 128
     1ca:	8c 93       	st	X, r24
}
     1cc:	cf 91       	pop	r28
     1ce:	df 91       	pop	r29
     1d0:	08 95       	ret

000001d2 <uart0_init>:
/**		desired baud rate:9600						**/
/**		char size: 8 bit							**/
/**		parity: Disabled							**/
/*****************************************************/
void uart0_init(void)
{
     1d2:	df 93       	push	r29
     1d4:	cf 93       	push	r28
     1d6:	cd b7       	in	r28, 0x3d	; 61
     1d8:	de b7       	in	r29, 0x3e	; 62
 UCSR0B = 0x00; //disable while setting baud rate
     1da:	e1 ec       	ldi	r30, 0xC1	; 193
     1dc:	f0 e0       	ldi	r31, 0x00	; 0
     1de:	10 82       	st	Z, r1
 UCSR0A = 0x00;
     1e0:	e0 ec       	ldi	r30, 0xC0	; 192
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	10 82       	st	Z, r1
 UCSR0C = 0x06;
     1e6:	e2 ec       	ldi	r30, 0xC2	; 194
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	86 e0       	ldi	r24, 0x06	; 6
     1ec:	80 83       	st	Z, r24
 UBRR0L = 0x47; //set baud rate lo
     1ee:	e4 ec       	ldi	r30, 0xC4	; 196
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	87 e4       	ldi	r24, 0x47	; 71
     1f4:	80 83       	st	Z, r24
 UBRR0H = 0x00; //set baud rate hi
     1f6:	e5 ec       	ldi	r30, 0xC5	; 197
     1f8:	f0 e0       	ldi	r31, 0x00	; 0
     1fa:	10 82       	st	Z, r1
 UCSR0B = 0x98;
     1fc:	e1 ec       	ldi	r30, 0xC1	; 193
     1fe:	f0 e0       	ldi	r31, 0x00	; 0
     200:	88 e9       	ldi	r24, 0x98	; 152
     202:	80 83       	st	Z, r24
}
     204:	cf 91       	pop	r28
     206:	df 91       	pop	r29
     208:	08 95       	ret

0000020a <motion_pin_config>:
/*****************************************************/
/**		Function to configure ports 				**/
/**		to enable robot's motion					**/
/*****************************************************/
void motion_pin_config (void) 
{
     20a:	df 93       	push	r29
     20c:	cf 93       	push	r28
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
 DDRA = DDRA | 0x0F;
     212:	a1 e2       	ldi	r26, 0x21	; 33
     214:	b0 e0       	ldi	r27, 0x00	; 0
     216:	e1 e2       	ldi	r30, 0x21	; 33
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	80 81       	ld	r24, Z
     21c:	8f 60       	ori	r24, 0x0F	; 15
     21e:	8c 93       	st	X, r24
 PORTA = PORTA & 0xF0;
     220:	a2 e2       	ldi	r26, 0x22	; 34
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	e2 e2       	ldi	r30, 0x22	; 34
     226:	f0 e0       	ldi	r31, 0x00	; 0
     228:	80 81       	ld	r24, Z
     22a:	80 7f       	andi	r24, 0xF0	; 240
     22c:	8c 93       	st	X, r24
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     22e:	aa e0       	ldi	r26, 0x0A	; 10
     230:	b1 e0       	ldi	r27, 0x01	; 1
     232:	ea e0       	ldi	r30, 0x0A	; 10
     234:	f1 e0       	ldi	r31, 0x01	; 1
     236:	80 81       	ld	r24, Z
     238:	88 61       	ori	r24, 0x18	; 24
     23a:	8c 93       	st	X, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     23c:	ab e0       	ldi	r26, 0x0B	; 11
     23e:	b1 e0       	ldi	r27, 0x01	; 1
     240:	eb e0       	ldi	r30, 0x0B	; 11
     242:	f1 e0       	ldi	r31, 0x01	; 1
     244:	80 81       	ld	r24, Z
     246:	88 61       	ori	r24, 0x18	; 24
     248:	8c 93       	st	X, r24
}
     24a:	cf 91       	pop	r28
     24c:	df 91       	pop	r29
     24e:	08 95       	ret

00000250 <left_encoder_pin_config>:
/*****************************************************/
/**		Function to configure INT4 (PORTE 4) pin 	**/
/**		as input for the left position encoder		**/
/*****************************************************/
void left_encoder_pin_config (void)
{
     250:	df 93       	push	r29
     252:	cf 93       	push	r28
     254:	cd b7       	in	r28, 0x3d	; 61
     256:	de b7       	in	r29, 0x3e	; 62
 DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     258:	ad e2       	ldi	r26, 0x2D	; 45
     25a:	b0 e0       	ldi	r27, 0x00	; 0
     25c:	ed e2       	ldi	r30, 0x2D	; 45
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	80 81       	ld	r24, Z
     262:	8f 7e       	andi	r24, 0xEF	; 239
     264:	8c 93       	st	X, r24
 PORTE = PORTE | 0x10; //Enable internal pullup for PORTE 4 pin
     266:	ae e2       	ldi	r26, 0x2E	; 46
     268:	b0 e0       	ldi	r27, 0x00	; 0
     26a:	ee e2       	ldi	r30, 0x2E	; 46
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	80 81       	ld	r24, Z
     270:	80 61       	ori	r24, 0x10	; 16
     272:	8c 93       	st	X, r24
}
     274:	cf 91       	pop	r28
     276:	df 91       	pop	r29
     278:	08 95       	ret

0000027a <right_encoder_pin_config>:
/*****************************************************/
/**		Function to configure INT5 (PORTE 5) pin	**/
/**		as input for the right position encoder		**/
/*****************************************************/
void right_encoder_pin_config (void)
{
     27a:	df 93       	push	r29
     27c:	cf 93       	push	r28
     27e:	cd b7       	in	r28, 0x3d	; 61
     280:	de b7       	in	r29, 0x3e	; 62
 DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     282:	ad e2       	ldi	r26, 0x2D	; 45
     284:	b0 e0       	ldi	r27, 0x00	; 0
     286:	ed e2       	ldi	r30, 0x2D	; 45
     288:	f0 e0       	ldi	r31, 0x00	; 0
     28a:	80 81       	ld	r24, Z
     28c:	8f 7d       	andi	r24, 0xDF	; 223
     28e:	8c 93       	st	X, r24
 PORTE = PORTE | 0x20; //Enable internal pullup for PORTE 4 pin
     290:	ae e2       	ldi	r26, 0x2E	; 46
     292:	b0 e0       	ldi	r27, 0x00	; 0
     294:	ee e2       	ldi	r30, 0x2E	; 46
     296:	f0 e0       	ldi	r31, 0x00	; 0
     298:	80 81       	ld	r24, Z
     29a:	80 62       	ori	r24, 0x20	; 32
     29c:	8c 93       	st	X, r24
}
     29e:	cf 91       	pop	r28
     2a0:	df 91       	pop	r29
     2a2:	08 95       	ret

000002a4 <port_init>:

/*****************************************************/
/**		Function to initialize all ports			**/
/*****************************************************/
void port_init()
{
     2a4:	df 93       	push	r29
     2a6:	cf 93       	push	r28
     2a8:	cd b7       	in	r28, 0x3d	; 61
     2aa:	de b7       	in	r29, 0x3e	; 62
 motion_pin_config(); //robot motion pins config
     2ac:	0e 94 05 01 	call	0x20a	; 0x20a <motion_pin_config>
 buzzer_pin_config(); //robot buzzer pins config
     2b0:	0e 94 95 00 	call	0x12a	; 0x12a <buzzer_pin_config>
 interrupt_switch_config();
     2b4:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <interrupt_switch_config>
 left_encoder_pin_config(); //left encoder pin config
     2b8:	0e 94 28 01 	call	0x250	; 0x250 <left_encoder_pin_config>
 right_encoder_pin_config(); //right encoder pin config	
     2bc:	0e 94 3d 01 	call	0x27a	; 0x27a <right_encoder_pin_config>
}
     2c0:	cf 91       	pop	r28
     2c2:	df 91       	pop	r29
     2c4:	08 95       	ret

000002c6 <left_position_encoder_interrupt_init>:

/*****************************************************/
/**		Function to enable Interrupt 4				**/
/*****************************************************/
void left_position_encoder_interrupt_init (void)
{
     2c6:	df 93       	push	r29
     2c8:	cf 93       	push	r28
     2ca:	cd b7       	in	r28, 0x3d	; 61
     2cc:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupt
     2ce:	f8 94       	cli
 EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     2d0:	aa e6       	ldi	r26, 0x6A	; 106
     2d2:	b0 e0       	ldi	r27, 0x00	; 0
     2d4:	ea e6       	ldi	r30, 0x6A	; 106
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	80 81       	ld	r24, Z
     2da:	82 60       	ori	r24, 0x02	; 2
     2dc:	8c 93       	st	X, r24
 EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     2de:	ad e3       	ldi	r26, 0x3D	; 61
     2e0:	b0 e0       	ldi	r27, 0x00	; 0
     2e2:	ed e3       	ldi	r30, 0x3D	; 61
     2e4:	f0 e0       	ldi	r31, 0x00	; 0
     2e6:	80 81       	ld	r24, Z
     2e8:	80 61       	ori	r24, 0x10	; 16
     2ea:	8c 93       	st	X, r24
 sei();   // Enables the global interrupt 
     2ec:	78 94       	sei
}
     2ee:	cf 91       	pop	r28
     2f0:	df 91       	pop	r29
     2f2:	08 95       	ret

000002f4 <right_position_encoder_interrupt_init>:

/*****************************************************/
/**		Function to enable Interrupt 5				**/
/*****************************************************/
void right_position_encoder_interrupt_init (void)
{
     2f4:	df 93       	push	r29
     2f6:	cf 93       	push	r28
     2f8:	cd b7       	in	r28, 0x3d	; 61
     2fa:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupt
     2fc:	f8 94       	cli
 EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     2fe:	aa e6       	ldi	r26, 0x6A	; 106
     300:	b0 e0       	ldi	r27, 0x00	; 0
     302:	ea e6       	ldi	r30, 0x6A	; 106
     304:	f0 e0       	ldi	r31, 0x00	; 0
     306:	80 81       	ld	r24, Z
     308:	88 60       	ori	r24, 0x08	; 8
     30a:	8c 93       	st	X, r24
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     30c:	ad e3       	ldi	r26, 0x3D	; 61
     30e:	b0 e0       	ldi	r27, 0x00	; 0
     310:	ed e3       	ldi	r30, 0x3D	; 61
     312:	f0 e0       	ldi	r31, 0x00	; 0
     314:	80 81       	ld	r24, Z
     316:	80 62       	ori	r24, 0x20	; 32
     318:	8c 93       	st	X, r24
 sei();   // Enables the global interrupt 
     31a:	78 94       	sei
}
     31c:	cf 91       	pop	r28
     31e:	df 91       	pop	r29
     320:	08 95       	ret

00000322 <__vector_6>:

/*****************************************************/
/**		ISR for right position encoder				**/
/*****************************************************/
ISR(INT5_vect)  
{
     322:	1f 92       	push	r1
     324:	0f 92       	push	r0
     326:	0f b6       	in	r0, 0x3f	; 63
     328:	0f 92       	push	r0
     32a:	11 24       	eor	r1, r1
     32c:	8f 93       	push	r24
     32e:	9f 93       	push	r25
     330:	af 93       	push	r26
     332:	bf 93       	push	r27
     334:	df 93       	push	r29
     336:	cf 93       	push	r28
     338:	cd b7       	in	r28, 0x3d	; 61
     33a:	de b7       	in	r29, 0x3e	; 62
 ShaftCountRight++;  //increment right shaft position count
     33c:	80 91 0c 03 	lds	r24, 0x030C
     340:	90 91 0d 03 	lds	r25, 0x030D
     344:	a0 91 0e 03 	lds	r26, 0x030E
     348:	b0 91 0f 03 	lds	r27, 0x030F
     34c:	01 96       	adiw	r24, 0x01	; 1
     34e:	a1 1d       	adc	r26, r1
     350:	b1 1d       	adc	r27, r1
     352:	80 93 0c 03 	sts	0x030C, r24
     356:	90 93 0d 03 	sts	0x030D, r25
     35a:	a0 93 0e 03 	sts	0x030E, r26
     35e:	b0 93 0f 03 	sts	0x030F, r27
}
     362:	cf 91       	pop	r28
     364:	df 91       	pop	r29
     366:	bf 91       	pop	r27
     368:	af 91       	pop	r26
     36a:	9f 91       	pop	r25
     36c:	8f 91       	pop	r24
     36e:	0f 90       	pop	r0
     370:	0f be       	out	0x3f, r0	; 63
     372:	0f 90       	pop	r0
     374:	1f 90       	pop	r1
     376:	18 95       	reti

00000378 <__vector_5>:

/*****************************************************/
/**		ISR for left position encoder				**/
/*****************************************************/
ISR(INT4_vect)
{
     378:	1f 92       	push	r1
     37a:	0f 92       	push	r0
     37c:	0f b6       	in	r0, 0x3f	; 63
     37e:	0f 92       	push	r0
     380:	11 24       	eor	r1, r1
     382:	8f 93       	push	r24
     384:	9f 93       	push	r25
     386:	af 93       	push	r26
     388:	bf 93       	push	r27
     38a:	df 93       	push	r29
     38c:	cf 93       	push	r28
     38e:	cd b7       	in	r28, 0x3d	; 61
     390:	de b7       	in	r29, 0x3e	; 62
 ShaftCountLeft++;  //increment left shaft position count
     392:	80 91 08 03 	lds	r24, 0x0308
     396:	90 91 09 03 	lds	r25, 0x0309
     39a:	a0 91 0a 03 	lds	r26, 0x030A
     39e:	b0 91 0b 03 	lds	r27, 0x030B
     3a2:	01 96       	adiw	r24, 0x01	; 1
     3a4:	a1 1d       	adc	r26, r1
     3a6:	b1 1d       	adc	r27, r1
     3a8:	80 93 08 03 	sts	0x0308, r24
     3ac:	90 93 09 03 	sts	0x0309, r25
     3b0:	a0 93 0a 03 	sts	0x030A, r26
     3b4:	b0 93 0b 03 	sts	0x030B, r27
}
     3b8:	cf 91       	pop	r28
     3ba:	df 91       	pop	r29
     3bc:	bf 91       	pop	r27
     3be:	af 91       	pop	r26
     3c0:	9f 91       	pop	r25
     3c2:	8f 91       	pop	r24
     3c4:	0f 90       	pop	r0
     3c6:	0f be       	out	0x3f, r0	; 63
     3c8:	0f 90       	pop	r0
     3ca:	1f 90       	pop	r1
     3cc:	18 95       	reti

000003ce <motion_set>:

/*****************************************************/
/**		Function used for setting motor's direction	**/
/*****************************************************/
void motion_set (unsigned char Direction)
{
     3ce:	df 93       	push	r29
     3d0:	cf 93       	push	r28
     3d2:	0f 92       	push	r0
     3d4:	0f 92       	push	r0
     3d6:	cd b7       	in	r28, 0x3d	; 61
     3d8:	de b7       	in	r29, 0x3e	; 62
     3da:	8a 83       	std	Y+2, r24	; 0x02
 unsigned char PortARestore = 0;
     3dc:	19 82       	std	Y+1, r1	; 0x01

 Direction &= 0x0F; 		// removing upper nibbel for the protection
     3de:	8a 81       	ldd	r24, Y+2	; 0x02
     3e0:	8f 70       	andi	r24, 0x0F	; 15
     3e2:	8a 83       	std	Y+2, r24	; 0x02
 PortARestore = PORTA; 		// reading the PORTA original status
     3e4:	e2 e2       	ldi	r30, 0x22	; 34
     3e6:	f0 e0       	ldi	r31, 0x00	; 0
     3e8:	80 81       	ld	r24, Z
     3ea:	89 83       	std	Y+1, r24	; 0x01
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     3ec:	89 81       	ldd	r24, Y+1	; 0x01
     3ee:	80 7f       	andi	r24, 0xF0	; 240
     3f0:	89 83       	std	Y+1, r24	; 0x01
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     3f2:	99 81       	ldd	r25, Y+1	; 0x01
     3f4:	8a 81       	ldd	r24, Y+2	; 0x02
     3f6:	89 2b       	or	r24, r25
     3f8:	89 83       	std	Y+1, r24	; 0x01
 PORTA = PortARestore; 		// executing the command
     3fa:	e2 e2       	ldi	r30, 0x22	; 34
     3fc:	f0 e0       	ldi	r31, 0x00	; 0
     3fe:	89 81       	ldd	r24, Y+1	; 0x01
     400:	80 83       	st	Z, r24
}
     402:	0f 90       	pop	r0
     404:	0f 90       	pop	r0
     406:	cf 91       	pop	r28
     408:	df 91       	pop	r29
     40a:	08 95       	ret

0000040c <forward>:

void forward (void) //both wheels forward
{
     40c:	df 93       	push	r29
     40e:	cf 93       	push	r28
     410:	cd b7       	in	r28, 0x3d	; 61
     412:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x06);
     414:	86 e0       	ldi	r24, 0x06	; 6
     416:	0e 94 e7 01 	call	0x3ce	; 0x3ce <motion_set>
}
     41a:	cf 91       	pop	r28
     41c:	df 91       	pop	r29
     41e:	08 95       	ret

00000420 <back>:

void back (void) //both wheels backward
{
     420:	df 93       	push	r29
     422:	cf 93       	push	r28
     424:	cd b7       	in	r28, 0x3d	; 61
     426:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x09);
     428:	89 e0       	ldi	r24, 0x09	; 9
     42a:	0e 94 e7 01 	call	0x3ce	; 0x3ce <motion_set>
}
     42e:	cf 91       	pop	r28
     430:	df 91       	pop	r29
     432:	08 95       	ret

00000434 <left>:

void left (void) //Left wheel backward, Right wheel forward
{
     434:	df 93       	push	r29
     436:	cf 93       	push	r28
     438:	cd b7       	in	r28, 0x3d	; 61
     43a:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x05);
     43c:	85 e0       	ldi	r24, 0x05	; 5
     43e:	0e 94 e7 01 	call	0x3ce	; 0x3ce <motion_set>
}
     442:	cf 91       	pop	r28
     444:	df 91       	pop	r29
     446:	08 95       	ret

00000448 <right>:

void right (void) //Left wheel forward, Right wheel backward
{
     448:	df 93       	push	r29
     44a:	cf 93       	push	r28
     44c:	cd b7       	in	r28, 0x3d	; 61
     44e:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x0A);
     450:	8a e0       	ldi	r24, 0x0A	; 10
     452:	0e 94 e7 01 	call	0x3ce	; 0x3ce <motion_set>
}
     456:	cf 91       	pop	r28
     458:	df 91       	pop	r29
     45a:	08 95       	ret

0000045c <soft_left>:

void soft_left (void) //Left wheel stationary, Right wheel forward
{
     45c:	df 93       	push	r29
     45e:	cf 93       	push	r28
     460:	cd b7       	in	r28, 0x3d	; 61
     462:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x04);
     464:	84 e0       	ldi	r24, 0x04	; 4
     466:	0e 94 e7 01 	call	0x3ce	; 0x3ce <motion_set>
}
     46a:	cf 91       	pop	r28
     46c:	df 91       	pop	r29
     46e:	08 95       	ret

00000470 <soft_right>:

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
     470:	df 93       	push	r29
     472:	cf 93       	push	r28
     474:	cd b7       	in	r28, 0x3d	; 61
     476:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x02);
     478:	82 e0       	ldi	r24, 0x02	; 2
     47a:	0e 94 e7 01 	call	0x3ce	; 0x3ce <motion_set>
}
     47e:	cf 91       	pop	r28
     480:	df 91       	pop	r29
     482:	08 95       	ret

00000484 <soft_left_2>:

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
     484:	df 93       	push	r29
     486:	cf 93       	push	r28
     488:	cd b7       	in	r28, 0x3d	; 61
     48a:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x01);
     48c:	81 e0       	ldi	r24, 0x01	; 1
     48e:	0e 94 e7 01 	call	0x3ce	; 0x3ce <motion_set>
}
     492:	cf 91       	pop	r28
     494:	df 91       	pop	r29
     496:	08 95       	ret

00000498 <soft_right_2>:

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
     498:	df 93       	push	r29
     49a:	cf 93       	push	r28
     49c:	cd b7       	in	r28, 0x3d	; 61
     49e:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x08);
     4a0:	88 e0       	ldi	r24, 0x08	; 8
     4a2:	0e 94 e7 01 	call	0x3ce	; 0x3ce <motion_set>
}
     4a6:	cf 91       	pop	r28
     4a8:	df 91       	pop	r29
     4aa:	08 95       	ret

000004ac <stop>:

void stop (void)
{
     4ac:	df 93       	push	r29
     4ae:	cf 93       	push	r28
     4b0:	cd b7       	in	r28, 0x3d	; 61
     4b2:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x00);
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	0e 94 e7 01 	call	0x3ce	; 0x3ce <motion_set>
}
     4ba:	cf 91       	pop	r28
     4bc:	df 91       	pop	r29
     4be:	08 95       	ret

000004c0 <angle_rotate>:
/*****************************************************/
/**		Function used for turning robot by 			**/
/**		specified degrees							**/
/*****************************************************/
void angle_rotate(unsigned int Degrees)
{
     4c0:	df 93       	push	r29
     4c2:	cf 93       	push	r28
     4c4:	cd b7       	in	r28, 0x3d	; 61
     4c6:	de b7       	in	r29, 0x3e	; 62
     4c8:	2c 97       	sbiw	r28, 0x0c	; 12
     4ca:	0f b6       	in	r0, 0x3f	; 63
     4cc:	f8 94       	cli
     4ce:	de bf       	out	0x3e, r29	; 62
     4d0:	0f be       	out	0x3f, r0	; 63
     4d2:	cd bf       	out	0x3d, r28	; 61
     4d4:	9a 87       	std	Y+10, r25	; 0x0a
     4d6:	89 87       	std	Y+9, r24	; 0x09
 float ReqdShaftCount = 0;
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	a0 e0       	ldi	r26, 0x00	; 0
     4de:	b0 e0       	ldi	r27, 0x00	; 0
     4e0:	8d 83       	std	Y+5, r24	; 0x05
     4e2:	9e 83       	std	Y+6, r25	; 0x06
     4e4:	af 83       	std	Y+7, r26	; 0x07
     4e6:	b8 87       	std	Y+8, r27	; 0x08
 unsigned long int ReqdShaftCountInt = 0;
     4e8:	19 82       	std	Y+1, r1	; 0x01
     4ea:	1a 82       	std	Y+2, r1	; 0x02
     4ec:	1b 82       	std	Y+3, r1	; 0x03
     4ee:	1c 82       	std	Y+4, r1	; 0x04

 ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
     4f0:	89 85       	ldd	r24, Y+9	; 0x09
     4f2:	9a 85       	ldd	r25, Y+10	; 0x0a
     4f4:	cc 01       	movw	r24, r24
     4f6:	a0 e0       	ldi	r26, 0x00	; 0
     4f8:	b0 e0       	ldi	r27, 0x00	; 0
     4fa:	bc 01       	movw	r22, r24
     4fc:	cd 01       	movw	r24, r26
     4fe:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <__floatunsisf>
     502:	dc 01       	movw	r26, r24
     504:	cb 01       	movw	r24, r22
     506:	bc 01       	movw	r22, r24
     508:	cd 01       	movw	r24, r26
     50a:	28 e4       	ldi	r18, 0x48	; 72
     50c:	31 ee       	ldi	r19, 0xE1	; 225
     50e:	42 e8       	ldi	r20, 0x82	; 130
     510:	50 e4       	ldi	r21, 0x40	; 64
     512:	0e 94 c9 0c 	call	0x1992	; 0x1992 <__divsf3>
     516:	dc 01       	movw	r26, r24
     518:	cb 01       	movw	r24, r22
     51a:	8d 83       	std	Y+5, r24	; 0x05
     51c:	9e 83       	std	Y+6, r25	; 0x06
     51e:	af 83       	std	Y+7, r26	; 0x07
     520:	b8 87       	std	Y+8, r27	; 0x08
 ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     522:	6d 81       	ldd	r22, Y+5	; 0x05
     524:	7e 81       	ldd	r23, Y+6	; 0x06
     526:	8f 81       	ldd	r24, Y+7	; 0x07
     528:	98 85       	ldd	r25, Y+8	; 0x08
     52a:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__fixunssfsi>
     52e:	dc 01       	movw	r26, r24
     530:	cb 01       	movw	r24, r22
     532:	cc 01       	movw	r24, r24
     534:	a0 e0       	ldi	r26, 0x00	; 0
     536:	b0 e0       	ldi	r27, 0x00	; 0
     538:	89 83       	std	Y+1, r24	; 0x01
     53a:	9a 83       	std	Y+2, r25	; 0x02
     53c:	ab 83       	std	Y+3, r26	; 0x03
     53e:	bc 83       	std	Y+4, r27	; 0x04
 ShaftCountRight = 0; 
     540:	10 92 0c 03 	sts	0x030C, r1
     544:	10 92 0d 03 	sts	0x030D, r1
     548:	10 92 0e 03 	sts	0x030E, r1
     54c:	10 92 0f 03 	sts	0x030F, r1
 ShaftCountLeft = 0; 
     550:	10 92 08 03 	sts	0x0308, r1
     554:	10 92 09 03 	sts	0x0309, r1
     558:	10 92 0a 03 	sts	0x030A, r1
     55c:	10 92 0b 03 	sts	0x030B, r1

 while (1)
 {
  if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     560:	20 91 0c 03 	lds	r18, 0x030C
     564:	30 91 0d 03 	lds	r19, 0x030D
     568:	40 91 0e 03 	lds	r20, 0x030E
     56c:	50 91 0f 03 	lds	r21, 0x030F
     570:	1c 86       	std	Y+12, r1	; 0x0c
     572:	89 81       	ldd	r24, Y+1	; 0x01
     574:	9a 81       	ldd	r25, Y+2	; 0x02
     576:	ab 81       	ldd	r26, Y+3	; 0x03
     578:	bc 81       	ldd	r27, Y+4	; 0x04
     57a:	28 17       	cp	r18, r24
     57c:	39 07       	cpc	r19, r25
     57e:	4a 07       	cpc	r20, r26
     580:	5b 07       	cpc	r21, r27
     582:	10 f0       	brcs	.+4      	; 0x588 <angle_rotate+0xc8>
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	8c 87       	std	Y+12, r24	; 0x0c
     588:	20 91 08 03 	lds	r18, 0x0308
     58c:	30 91 09 03 	lds	r19, 0x0309
     590:	40 91 0a 03 	lds	r20, 0x030A
     594:	50 91 0b 03 	lds	r21, 0x030B
     598:	1b 86       	std	Y+11, r1	; 0x0b
     59a:	89 81       	ldd	r24, Y+1	; 0x01
     59c:	9a 81       	ldd	r25, Y+2	; 0x02
     59e:	ab 81       	ldd	r26, Y+3	; 0x03
     5a0:	bc 81       	ldd	r27, Y+4	; 0x04
     5a2:	28 17       	cp	r18, r24
     5a4:	39 07       	cpc	r19, r25
     5a6:	4a 07       	cpc	r20, r26
     5a8:	5b 07       	cpc	r21, r27
     5aa:	10 f0       	brcs	.+4      	; 0x5b0 <angle_rotate+0xf0>
     5ac:	91 e0       	ldi	r25, 0x01	; 1
     5ae:	9b 87       	std	Y+11, r25	; 0x0b
     5b0:	8c 85       	ldd	r24, Y+12	; 0x0c
     5b2:	9b 85       	ldd	r25, Y+11	; 0x0b
     5b4:	89 2b       	or	r24, r25
     5b6:	88 23       	and	r24, r24
     5b8:	99 f2       	breq	.-90     	; 0x560 <angle_rotate+0xa0>
  break;
 }
 stop(); //Stop action
     5ba:	0e 94 56 02 	call	0x4ac	; 0x4ac <stop>
}
     5be:	2c 96       	adiw	r28, 0x0c	; 12
     5c0:	0f b6       	in	r0, 0x3f	; 63
     5c2:	f8 94       	cli
     5c4:	de bf       	out	0x3e, r29	; 62
     5c6:	0f be       	out	0x3f, r0	; 63
     5c8:	cd bf       	out	0x3d, r28	; 61
     5ca:	cf 91       	pop	r28
     5cc:	df 91       	pop	r29
     5ce:	08 95       	ret

000005d0 <linear_distance_mm>:
/*****************************************************/
/**		Function used for moving robot forward		**/
/**		by specified distance						**/
/*****************************************************/
void linear_distance_mm(unsigned int DistanceInMM)
{
     5d0:	df 93       	push	r29
     5d2:	cf 93       	push	r28
     5d4:	cd b7       	in	r28, 0x3d	; 61
     5d6:	de b7       	in	r29, 0x3e	; 62
     5d8:	2a 97       	sbiw	r28, 0x0a	; 10
     5da:	0f b6       	in	r0, 0x3f	; 63
     5dc:	f8 94       	cli
     5de:	de bf       	out	0x3e, r29	; 62
     5e0:	0f be       	out	0x3f, r0	; 63
     5e2:	cd bf       	out	0x3d, r28	; 61
     5e4:	9a 87       	std	Y+10, r25	; 0x0a
     5e6:	89 87       	std	Y+9, r24	; 0x09
 float ReqdShaftCount = 0;
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	a0 e0       	ldi	r26, 0x00	; 0
     5ee:	b0 e0       	ldi	r27, 0x00	; 0
     5f0:	8d 83       	std	Y+5, r24	; 0x05
     5f2:	9e 83       	std	Y+6, r25	; 0x06
     5f4:	af 83       	std	Y+7, r26	; 0x07
     5f6:	b8 87       	std	Y+8, r27	; 0x08
 unsigned long int ReqdShaftCountInt = 0;
     5f8:	19 82       	std	Y+1, r1	; 0x01
     5fa:	1a 82       	std	Y+2, r1	; 0x02
     5fc:	1b 82       	std	Y+3, r1	; 0x03
     5fe:	1c 82       	std	Y+4, r1	; 0x04

 ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
     600:	89 85       	ldd	r24, Y+9	; 0x09
     602:	9a 85       	ldd	r25, Y+10	; 0x0a
     604:	cc 01       	movw	r24, r24
     606:	a0 e0       	ldi	r26, 0x00	; 0
     608:	b0 e0       	ldi	r27, 0x00	; 0
     60a:	bc 01       	movw	r22, r24
     60c:	cd 01       	movw	r24, r26
     60e:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <__floatunsisf>
     612:	dc 01       	movw	r26, r24
     614:	cb 01       	movw	r24, r22
     616:	bc 01       	movw	r22, r24
     618:	cd 01       	movw	r24, r26
     61a:	25 ee       	ldi	r18, 0xE5	; 229
     61c:	30 ed       	ldi	r19, 0xD0	; 208
     61e:	4a ea       	ldi	r20, 0xAA	; 170
     620:	50 e4       	ldi	r21, 0x40	; 64
     622:	0e 94 c9 0c 	call	0x1992	; 0x1992 <__divsf3>
     626:	dc 01       	movw	r26, r24
     628:	cb 01       	movw	r24, r22
     62a:	8d 83       	std	Y+5, r24	; 0x05
     62c:	9e 83       	std	Y+6, r25	; 0x06
     62e:	af 83       	std	Y+7, r26	; 0x07
     630:	b8 87       	std	Y+8, r27	; 0x08
 ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     632:	6d 81       	ldd	r22, Y+5	; 0x05
     634:	7e 81       	ldd	r23, Y+6	; 0x06
     636:	8f 81       	ldd	r24, Y+7	; 0x07
     638:	98 85       	ldd	r25, Y+8	; 0x08
     63a:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__fixunssfsi>
     63e:	dc 01       	movw	r26, r24
     640:	cb 01       	movw	r24, r22
     642:	89 83       	std	Y+1, r24	; 0x01
     644:	9a 83       	std	Y+2, r25	; 0x02
     646:	ab 83       	std	Y+3, r26	; 0x03
     648:	bc 83       	std	Y+4, r27	; 0x04
  
 ShaftCountRight = 0;
     64a:	10 92 0c 03 	sts	0x030C, r1
     64e:	10 92 0d 03 	sts	0x030D, r1
     652:	10 92 0e 03 	sts	0x030E, r1
     656:	10 92 0f 03 	sts	0x030F, r1
 while(1)
 {
  if(ShaftCountRight > ReqdShaftCountInt)
     65a:	20 91 0c 03 	lds	r18, 0x030C
     65e:	30 91 0d 03 	lds	r19, 0x030D
     662:	40 91 0e 03 	lds	r20, 0x030E
     666:	50 91 0f 03 	lds	r21, 0x030F
     66a:	89 81       	ldd	r24, Y+1	; 0x01
     66c:	9a 81       	ldd	r25, Y+2	; 0x02
     66e:	ab 81       	ldd	r26, Y+3	; 0x03
     670:	bc 81       	ldd	r27, Y+4	; 0x04
     672:	82 17       	cp	r24, r18
     674:	93 07       	cpc	r25, r19
     676:	a4 07       	cpc	r26, r20
     678:	b5 07       	cpc	r27, r21
     67a:	78 f7       	brcc	.-34     	; 0x65a <linear_distance_mm+0x8a>
  {
  	break;
  }
 } 
 stop(); //Stop action
     67c:	0e 94 56 02 	call	0x4ac	; 0x4ac <stop>
}
     680:	2a 96       	adiw	r28, 0x0a	; 10
     682:	0f b6       	in	r0, 0x3f	; 63
     684:	f8 94       	cli
     686:	de bf       	out	0x3e, r29	; 62
     688:	0f be       	out	0x3f, r0	; 63
     68a:	cd bf       	out	0x3d, r28	; 61
     68c:	cf 91       	pop	r28
     68e:	df 91       	pop	r29
     690:	08 95       	ret

00000692 <forward_mm>:

void forward_mm(unsigned int DistanceInMM)
{
     692:	df 93       	push	r29
     694:	cf 93       	push	r28
     696:	0f 92       	push	r0
     698:	0f 92       	push	r0
     69a:	cd b7       	in	r28, 0x3d	; 61
     69c:	de b7       	in	r29, 0x3e	; 62
     69e:	9a 83       	std	Y+2, r25	; 0x02
     6a0:	89 83       	std	Y+1, r24	; 0x01
 forward();
     6a2:	0e 94 06 02 	call	0x40c	; 0x40c <forward>
 linear_distance_mm(DistanceInMM);
     6a6:	89 81       	ldd	r24, Y+1	; 0x01
     6a8:	9a 81       	ldd	r25, Y+2	; 0x02
     6aa:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <linear_distance_mm>
}
     6ae:	0f 90       	pop	r0
     6b0:	0f 90       	pop	r0
     6b2:	cf 91       	pop	r28
     6b4:	df 91       	pop	r29
     6b6:	08 95       	ret

000006b8 <back_mm>:

void back_mm(unsigned int DistanceInMM)
{
     6b8:	df 93       	push	r29
     6ba:	cf 93       	push	r28
     6bc:	0f 92       	push	r0
     6be:	0f 92       	push	r0
     6c0:	cd b7       	in	r28, 0x3d	; 61
     6c2:	de b7       	in	r29, 0x3e	; 62
     6c4:	9a 83       	std	Y+2, r25	; 0x02
     6c6:	89 83       	std	Y+1, r24	; 0x01
 back();
     6c8:	0e 94 10 02 	call	0x420	; 0x420 <back>
 linear_distance_mm(DistanceInMM);
     6cc:	89 81       	ldd	r24, Y+1	; 0x01
     6ce:	9a 81       	ldd	r25, Y+2	; 0x02
     6d0:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <linear_distance_mm>
}
     6d4:	0f 90       	pop	r0
     6d6:	0f 90       	pop	r0
     6d8:	cf 91       	pop	r28
     6da:	df 91       	pop	r29
     6dc:	08 95       	ret

000006de <left_degrees>:

void left_degrees(unsigned int Degrees) 
{
     6de:	df 93       	push	r29
     6e0:	cf 93       	push	r28
     6e2:	0f 92       	push	r0
     6e4:	0f 92       	push	r0
     6e6:	cd b7       	in	r28, 0x3d	; 61
     6e8:	de b7       	in	r29, 0x3e	; 62
     6ea:	9a 83       	std	Y+2, r25	; 0x02
     6ec:	89 83       	std	Y+1, r24	; 0x01
// 88 pulses for 360 degrees rotation 4.090 degrees per count
 left(); //Turn left
     6ee:	0e 94 1a 02 	call	0x434	; 0x434 <left>
 angle_rotate(Degrees);
     6f2:	89 81       	ldd	r24, Y+1	; 0x01
     6f4:	9a 81       	ldd	r25, Y+2	; 0x02
     6f6:	0e 94 60 02 	call	0x4c0	; 0x4c0 <angle_rotate>
}
     6fa:	0f 90       	pop	r0
     6fc:	0f 90       	pop	r0
     6fe:	cf 91       	pop	r28
     700:	df 91       	pop	r29
     702:	08 95       	ret

00000704 <right_degrees>:

void right_degrees(unsigned int Degrees)
{
     704:	df 93       	push	r29
     706:	cf 93       	push	r28
     708:	0f 92       	push	r0
     70a:	0f 92       	push	r0
     70c:	cd b7       	in	r28, 0x3d	; 61
     70e:	de b7       	in	r29, 0x3e	; 62
     710:	9a 83       	std	Y+2, r25	; 0x02
     712:	89 83       	std	Y+1, r24	; 0x01
// 88 pulses for 360 degrees rotation 4.090 degrees per count
 right(); //Turn right
     714:	0e 94 24 02 	call	0x448	; 0x448 <right>
 angle_rotate(Degrees);
     718:	89 81       	ldd	r24, Y+1	; 0x01
     71a:	9a 81       	ldd	r25, Y+2	; 0x02
     71c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <angle_rotate>
}
     720:	0f 90       	pop	r0
     722:	0f 90       	pop	r0
     724:	cf 91       	pop	r28
     726:	df 91       	pop	r29
     728:	08 95       	ret

0000072a <soft_left_degrees>:


void soft_left_degrees(unsigned int Degrees)
{
     72a:	df 93       	push	r29
     72c:	cf 93       	push	r28
     72e:	0f 92       	push	r0
     730:	0f 92       	push	r0
     732:	cd b7       	in	r28, 0x3d	; 61
     734:	de b7       	in	r29, 0x3e	; 62
     736:	9a 83       	std	Y+2, r25	; 0x02
     738:	89 83       	std	Y+1, r24	; 0x01
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_left(); //Turn soft left
     73a:	0e 94 2e 02 	call	0x45c	; 0x45c <soft_left>
 Degrees=Degrees*2;
     73e:	89 81       	ldd	r24, Y+1	; 0x01
     740:	9a 81       	ldd	r25, Y+2	; 0x02
     742:	88 0f       	add	r24, r24
     744:	99 1f       	adc	r25, r25
     746:	9a 83       	std	Y+2, r25	; 0x02
     748:	89 83       	std	Y+1, r24	; 0x01
 angle_rotate(Degrees);
     74a:	89 81       	ldd	r24, Y+1	; 0x01
     74c:	9a 81       	ldd	r25, Y+2	; 0x02
     74e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <angle_rotate>
}
     752:	0f 90       	pop	r0
     754:	0f 90       	pop	r0
     756:	cf 91       	pop	r28
     758:	df 91       	pop	r29
     75a:	08 95       	ret

0000075c <soft_right_degrees>:

void soft_right_degrees(unsigned int Degrees)
{
     75c:	df 93       	push	r29
     75e:	cf 93       	push	r28
     760:	0f 92       	push	r0
     762:	0f 92       	push	r0
     764:	cd b7       	in	r28, 0x3d	; 61
     766:	de b7       	in	r29, 0x3e	; 62
     768:	9a 83       	std	Y+2, r25	; 0x02
     76a:	89 83       	std	Y+1, r24	; 0x01
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_right();  //Turn soft right
     76c:	0e 94 38 02 	call	0x470	; 0x470 <soft_right>
 Degrees=Degrees*2;
     770:	89 81       	ldd	r24, Y+1	; 0x01
     772:	9a 81       	ldd	r25, Y+2	; 0x02
     774:	88 0f       	add	r24, r24
     776:	99 1f       	adc	r25, r25
     778:	9a 83       	std	Y+2, r25	; 0x02
     77a:	89 83       	std	Y+1, r24	; 0x01
 angle_rotate(Degrees);
     77c:	89 81       	ldd	r24, Y+1	; 0x01
     77e:	9a 81       	ldd	r25, Y+2	; 0x02
     780:	0e 94 60 02 	call	0x4c0	; 0x4c0 <angle_rotate>
}
     784:	0f 90       	pop	r0
     786:	0f 90       	pop	r0
     788:	cf 91       	pop	r28
     78a:	df 91       	pop	r29
     78c:	08 95       	ret

0000078e <soft_left_2_degrees>:

void soft_left_2_degrees(unsigned int Degrees)
{
     78e:	df 93       	push	r29
     790:	cf 93       	push	r28
     792:	0f 92       	push	r0
     794:	0f 92       	push	r0
     796:	cd b7       	in	r28, 0x3d	; 61
     798:	de b7       	in	r29, 0x3e	; 62
     79a:	9a 83       	std	Y+2, r25	; 0x02
     79c:	89 83       	std	Y+1, r24	; 0x01
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_left_2(); //Turn reverse soft left
     79e:	0e 94 42 02 	call	0x484	; 0x484 <soft_left_2>
 Degrees=Degrees*2;
     7a2:	89 81       	ldd	r24, Y+1	; 0x01
     7a4:	9a 81       	ldd	r25, Y+2	; 0x02
     7a6:	88 0f       	add	r24, r24
     7a8:	99 1f       	adc	r25, r25
     7aa:	9a 83       	std	Y+2, r25	; 0x02
     7ac:	89 83       	std	Y+1, r24	; 0x01
 angle_rotate(Degrees);
     7ae:	89 81       	ldd	r24, Y+1	; 0x01
     7b0:	9a 81       	ldd	r25, Y+2	; 0x02
     7b2:	0e 94 60 02 	call	0x4c0	; 0x4c0 <angle_rotate>
}
     7b6:	0f 90       	pop	r0
     7b8:	0f 90       	pop	r0
     7ba:	cf 91       	pop	r28
     7bc:	df 91       	pop	r29
     7be:	08 95       	ret

000007c0 <soft_right_2_degrees>:

void soft_right_2_degrees(unsigned int Degrees)
{
     7c0:	df 93       	push	r29
     7c2:	cf 93       	push	r28
     7c4:	0f 92       	push	r0
     7c6:	0f 92       	push	r0
     7c8:	cd b7       	in	r28, 0x3d	; 61
     7ca:	de b7       	in	r29, 0x3e	; 62
     7cc:	9a 83       	std	Y+2, r25	; 0x02
     7ce:	89 83       	std	Y+1, r24	; 0x01
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_right_2();  //Turn reverse soft right
     7d0:	0e 94 4c 02 	call	0x498	; 0x498 <soft_right_2>
 Degrees=Degrees*2;
     7d4:	89 81       	ldd	r24, Y+1	; 0x01
     7d6:	9a 81       	ldd	r25, Y+2	; 0x02
     7d8:	88 0f       	add	r24, r24
     7da:	99 1f       	adc	r25, r25
     7dc:	9a 83       	std	Y+2, r25	; 0x02
     7de:	89 83       	std	Y+1, r24	; 0x01
 angle_rotate(Degrees);
     7e0:	89 81       	ldd	r24, Y+1	; 0x01
     7e2:	9a 81       	ldd	r25, Y+2	; 0x02
     7e4:	0e 94 60 02 	call	0x4c0	; 0x4c0 <angle_rotate>
}
     7e8:	0f 90       	pop	r0
     7ea:	0f 90       	pop	r0
     7ec:	cf 91       	pop	r28
     7ee:	df 91       	pop	r29
     7f0:	08 95       	ret

000007f2 <__vector_25>:

/*****************************************************/
/**		ISR for receive serial interrupt			**/
/*****************************************************/
SIGNAL(SIG_USART0_RECV) 		// ISR for receive complete interrupt
{
     7f2:	1f 92       	push	r1
     7f4:	0f 92       	push	r0
     7f6:	0f b6       	in	r0, 0x3f	; 63
     7f8:	0f 92       	push	r0
     7fa:	00 90 5b 00 	lds	r0, 0x005B
     7fe:	0f 92       	push	r0
     800:	11 24       	eor	r1, r1
     802:	0f 93       	push	r16
     804:	1f 93       	push	r17
     806:	2f 93       	push	r18
     808:	3f 93       	push	r19
     80a:	4f 93       	push	r20
     80c:	5f 93       	push	r21
     80e:	6f 93       	push	r22
     810:	7f 93       	push	r23
     812:	8f 93       	push	r24
     814:	9f 93       	push	r25
     816:	af 93       	push	r26
     818:	bf 93       	push	r27
     81a:	ef 93       	push	r30
     81c:	ff 93       	push	r31
     81e:	df 93       	push	r29
     820:	cf 93       	push	r28
     822:	cd b7       	in	r28, 0x3d	; 61
     824:	de b7       	in	r29, 0x3e	; 62
     826:	ce 57       	subi	r28, 0x7E	; 126
     828:	d0 40       	sbci	r29, 0x00	; 0
     82a:	de bf       	out	0x3e, r29	; 62
     82c:	cd bf       	out	0x3d, r28	; 61
	data = UDR0; 				//making copy of data from UDR2 in 'data' variable 
     82e:	e6 ec       	ldi	r30, 0xC6	; 198
     830:	f0 e0       	ldi	r31, 0x00	; 0
     832:	80 81       	ld	r24, Z
     834:	80 93 12 03 	sts	0x0312, r24
	sei();
     838:	78 94       	sei
	
		if(data == 0x77) //ASCII value of w
     83a:	80 91 12 03 	lds	r24, 0x0312
     83e:	87 37       	cpi	r24, 0x77	; 119
     840:	09 f0       	breq	.+2      	; 0x844 <__vector_25+0x52>
     842:	bf c0       	rjmp	.+382    	; 0x9c2 <__vector_25+0x1d0>
		{
		forward_mm(50); //Moves robot forward 100mm
     844:	82 e3       	ldi	r24, 0x32	; 50
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	0e 94 49 03 	call	0x692	; 0x692 <forward_mm>
		stop();
     84c:	0e 94 56 02 	call	0x4ac	; 0x4ac <stop>
     850:	fe 01       	movw	r30, r28
     852:	e5 58       	subi	r30, 0x85	; 133
     854:	ff 4f       	sbci	r31, 0xFF	; 255
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	a8 ec       	ldi	r26, 0xC8	; 200
     85c:	b2 e4       	ldi	r27, 0x42	; 66
     85e:	80 83       	st	Z, r24
     860:	91 83       	std	Z+1, r25	; 0x01
     862:	a2 83       	std	Z+2, r26	; 0x02
     864:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     866:	8e 01       	movw	r16, r28
     868:	09 58       	subi	r16, 0x89	; 137
     86a:	1f 4f       	sbci	r17, 0xFF	; 255
     86c:	fe 01       	movw	r30, r28
     86e:	e5 58       	subi	r30, 0x85	; 133
     870:	ff 4f       	sbci	r31, 0xFF	; 255
     872:	60 81       	ld	r22, Z
     874:	71 81       	ldd	r23, Z+1	; 0x01
     876:	82 81       	ldd	r24, Z+2	; 0x02
     878:	93 81       	ldd	r25, Z+3	; 0x03
     87a:	2d ec       	ldi	r18, 0xCD	; 205
     87c:	3c ec       	ldi	r19, 0xCC	; 204
     87e:	4c e2       	ldi	r20, 0x2C	; 44
     880:	55 e4       	ldi	r21, 0x45	; 69
     882:	0e 94 cf 0b 	call	0x179e	; 0x179e <__mulsf3>
     886:	dc 01       	movw	r26, r24
     888:	cb 01       	movw	r24, r22
     88a:	f8 01       	movw	r30, r16
     88c:	80 83       	st	Z, r24
     88e:	91 83       	std	Z+1, r25	; 0x01
     890:	a2 83       	std	Z+2, r26	; 0x02
     892:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     894:	fe 01       	movw	r30, r28
     896:	e9 58       	subi	r30, 0x89	; 137
     898:	ff 4f       	sbci	r31, 0xFF	; 255
     89a:	60 81       	ld	r22, Z
     89c:	71 81       	ldd	r23, Z+1	; 0x01
     89e:	82 81       	ldd	r24, Z+2	; 0x02
     8a0:	93 81       	ldd	r25, Z+3	; 0x03
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e8       	ldi	r20, 0x80	; 128
     8a8:	5f e3       	ldi	r21, 0x3F	; 63
     8aa:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__ltsf2>
     8ae:	88 23       	and	r24, r24
     8b0:	44 f4       	brge	.+16     	; 0x8c2 <__vector_25+0xd0>
		__ticks = 1;
     8b2:	fe 01       	movw	r30, r28
     8b4:	eb 58       	subi	r30, 0x8B	; 139
     8b6:	ff 4f       	sbci	r31, 0xFF	; 255
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	91 83       	std	Z+1, r25	; 0x01
     8be:	80 83       	st	Z, r24
     8c0:	64 c0       	rjmp	.+200    	; 0x98a <__vector_25+0x198>
	else if (__tmp > 65535)
     8c2:	fe 01       	movw	r30, r28
     8c4:	e9 58       	subi	r30, 0x89	; 137
     8c6:	ff 4f       	sbci	r31, 0xFF	; 255
     8c8:	60 81       	ld	r22, Z
     8ca:	71 81       	ldd	r23, Z+1	; 0x01
     8cc:	82 81       	ldd	r24, Z+2	; 0x02
     8ce:	93 81       	ldd	r25, Z+3	; 0x03
     8d0:	20 e0       	ldi	r18, 0x00	; 0
     8d2:	3f ef       	ldi	r19, 0xFF	; 255
     8d4:	4f e7       	ldi	r20, 0x7F	; 127
     8d6:	57 e4       	ldi	r21, 0x47	; 71
     8d8:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__gtsf2>
     8dc:	18 16       	cp	r1, r24
     8de:	0c f0       	brlt	.+2      	; 0x8e2 <__vector_25+0xf0>
     8e0:	43 c0       	rjmp	.+134    	; 0x968 <__vector_25+0x176>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8e2:	fe 01       	movw	r30, r28
     8e4:	e5 58       	subi	r30, 0x85	; 133
     8e6:	ff 4f       	sbci	r31, 0xFF	; 255
     8e8:	60 81       	ld	r22, Z
     8ea:	71 81       	ldd	r23, Z+1	; 0x01
     8ec:	82 81       	ldd	r24, Z+2	; 0x02
     8ee:	93 81       	ldd	r25, Z+3	; 0x03
     8f0:	20 e0       	ldi	r18, 0x00	; 0
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	40 e2       	ldi	r20, 0x20	; 32
     8f6:	51 e4       	ldi	r21, 0x41	; 65
     8f8:	0e 94 cf 0b 	call	0x179e	; 0x179e <__mulsf3>
     8fc:	dc 01       	movw	r26, r24
     8fe:	cb 01       	movw	r24, r22
     900:	8e 01       	movw	r16, r28
     902:	0b 58       	subi	r16, 0x8B	; 139
     904:	1f 4f       	sbci	r17, 0xFF	; 255
     906:	bc 01       	movw	r22, r24
     908:	cd 01       	movw	r24, r26
     90a:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__fixunssfsi>
     90e:	dc 01       	movw	r26, r24
     910:	cb 01       	movw	r24, r22
     912:	f8 01       	movw	r30, r16
     914:	91 83       	std	Z+1, r25	; 0x01
     916:	80 83       	st	Z, r24
     918:	1f c0       	rjmp	.+62     	; 0x958 <__vector_25+0x166>
     91a:	fe 01       	movw	r30, r28
     91c:	ed 58       	subi	r30, 0x8D	; 141
     91e:	ff 4f       	sbci	r31, 0xFF	; 255
     920:	84 e1       	ldi	r24, 0x14	; 20
     922:	91 e0       	ldi	r25, 0x01	; 1
     924:	91 83       	std	Z+1, r25	; 0x01
     926:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     928:	fe 01       	movw	r30, r28
     92a:	ed 58       	subi	r30, 0x8D	; 141
     92c:	ff 4f       	sbci	r31, 0xFF	; 255
     92e:	80 81       	ld	r24, Z
     930:	91 81       	ldd	r25, Z+1	; 0x01
     932:	01 97       	sbiw	r24, 0x01	; 1
     934:	f1 f7       	brne	.-4      	; 0x932 <__vector_25+0x140>
     936:	fe 01       	movw	r30, r28
     938:	ed 58       	subi	r30, 0x8D	; 141
     93a:	ff 4f       	sbci	r31, 0xFF	; 255
     93c:	91 83       	std	Z+1, r25	; 0x01
     93e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     940:	de 01       	movw	r26, r28
     942:	ab 58       	subi	r26, 0x8B	; 139
     944:	bf 4f       	sbci	r27, 0xFF	; 255
     946:	fe 01       	movw	r30, r28
     948:	eb 58       	subi	r30, 0x8B	; 139
     94a:	ff 4f       	sbci	r31, 0xFF	; 255
     94c:	80 81       	ld	r24, Z
     94e:	91 81       	ldd	r25, Z+1	; 0x01
     950:	01 97       	sbiw	r24, 0x01	; 1
     952:	11 96       	adiw	r26, 0x01	; 1
     954:	9c 93       	st	X, r25
     956:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     958:	fe 01       	movw	r30, r28
     95a:	eb 58       	subi	r30, 0x8B	; 139
     95c:	ff 4f       	sbci	r31, 0xFF	; 255
     95e:	80 81       	ld	r24, Z
     960:	91 81       	ldd	r25, Z+1	; 0x01
     962:	00 97       	sbiw	r24, 0x00	; 0
     964:	d1 f6       	brne	.-76     	; 0x91a <__vector_25+0x128>
     966:	28 c0       	rjmp	.+80     	; 0x9b8 <__vector_25+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     968:	8e 01       	movw	r16, r28
     96a:	0b 58       	subi	r16, 0x8B	; 139
     96c:	1f 4f       	sbci	r17, 0xFF	; 255
     96e:	fe 01       	movw	r30, r28
     970:	e9 58       	subi	r30, 0x89	; 137
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	60 81       	ld	r22, Z
     976:	71 81       	ldd	r23, Z+1	; 0x01
     978:	82 81       	ldd	r24, Z+2	; 0x02
     97a:	93 81       	ldd	r25, Z+3	; 0x03
     97c:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__fixunssfsi>
     980:	dc 01       	movw	r26, r24
     982:	cb 01       	movw	r24, r22
     984:	f8 01       	movw	r30, r16
     986:	91 83       	std	Z+1, r25	; 0x01
     988:	80 83       	st	Z, r24
     98a:	de 01       	movw	r26, r28
     98c:	af 58       	subi	r26, 0x8F	; 143
     98e:	bf 4f       	sbci	r27, 0xFF	; 255
     990:	fe 01       	movw	r30, r28
     992:	eb 58       	subi	r30, 0x8B	; 139
     994:	ff 4f       	sbci	r31, 0xFF	; 255
     996:	80 81       	ld	r24, Z
     998:	91 81       	ldd	r25, Z+1	; 0x01
     99a:	11 96       	adiw	r26, 0x01	; 1
     99c:	9c 93       	st	X, r25
     99e:	8e 93       	st	-X, r24
     9a0:	fe 01       	movw	r30, r28
     9a2:	ef 58       	subi	r30, 0x8F	; 143
     9a4:	ff 4f       	sbci	r31, 0xFF	; 255
     9a6:	80 81       	ld	r24, Z
     9a8:	91 81       	ldd	r25, Z+1	; 0x01
     9aa:	01 97       	sbiw	r24, 0x01	; 1
     9ac:	f1 f7       	brne	.-4      	; 0x9aa <__vector_25+0x1b8>
     9ae:	fe 01       	movw	r30, r28
     9b0:	ef 58       	subi	r30, 0x8F	; 143
     9b2:	ff 4f       	sbci	r31, 0xFF	; 255
     9b4:	91 83       	std	Z+1, r25	; 0x01
     9b6:	80 83       	st	Z, r24
		_delay_ms(100);
		UDR0 = data; 				//echo data back to PC
     9b8:	e6 ec       	ldi	r30, 0xC6	; 198
     9ba:	f0 e0       	ldi	r31, 0x00	; 0
     9bc:	80 91 12 03 	lds	r24, 0x0312
     9c0:	80 83       	st	Z, r24
		}

		if(data == 0x78) //ASCII value of x
     9c2:	80 91 12 03 	lds	r24, 0x0312
     9c6:	88 37       	cpi	r24, 0x78	; 120
     9c8:	09 f0       	breq	.+2      	; 0x9cc <__vector_25+0x1da>
     9ca:	bf c0       	rjmp	.+382    	; 0xb4a <__vector_25+0x358>
		{
		back_mm(50);   //Moves robot backward 100mm
     9cc:	82 e3       	ldi	r24, 0x32	; 50
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <back_mm>
		stop();			
     9d4:	0e 94 56 02 	call	0x4ac	; 0x4ac <stop>
     9d8:	fe 01       	movw	r30, r28
     9da:	e3 59       	subi	r30, 0x93	; 147
     9dc:	ff 4f       	sbci	r31, 0xFF	; 255
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a8 ec       	ldi	r26, 0xC8	; 200
     9e4:	b2 e4       	ldi	r27, 0x42	; 66
     9e6:	80 83       	st	Z, r24
     9e8:	91 83       	std	Z+1, r25	; 0x01
     9ea:	a2 83       	std	Z+2, r26	; 0x02
     9ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     9ee:	8e 01       	movw	r16, r28
     9f0:	07 59       	subi	r16, 0x97	; 151
     9f2:	1f 4f       	sbci	r17, 0xFF	; 255
     9f4:	fe 01       	movw	r30, r28
     9f6:	e3 59       	subi	r30, 0x93	; 147
     9f8:	ff 4f       	sbci	r31, 0xFF	; 255
     9fa:	60 81       	ld	r22, Z
     9fc:	71 81       	ldd	r23, Z+1	; 0x01
     9fe:	82 81       	ldd	r24, Z+2	; 0x02
     a00:	93 81       	ldd	r25, Z+3	; 0x03
     a02:	2d ec       	ldi	r18, 0xCD	; 205
     a04:	3c ec       	ldi	r19, 0xCC	; 204
     a06:	4c e2       	ldi	r20, 0x2C	; 44
     a08:	55 e4       	ldi	r21, 0x45	; 69
     a0a:	0e 94 cf 0b 	call	0x179e	; 0x179e <__mulsf3>
     a0e:	dc 01       	movw	r26, r24
     a10:	cb 01       	movw	r24, r22
     a12:	f8 01       	movw	r30, r16
     a14:	80 83       	st	Z, r24
     a16:	91 83       	std	Z+1, r25	; 0x01
     a18:	a2 83       	std	Z+2, r26	; 0x02
     a1a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     a1c:	fe 01       	movw	r30, r28
     a1e:	e7 59       	subi	r30, 0x97	; 151
     a20:	ff 4f       	sbci	r31, 0xFF	; 255
     a22:	60 81       	ld	r22, Z
     a24:	71 81       	ldd	r23, Z+1	; 0x01
     a26:	82 81       	ldd	r24, Z+2	; 0x02
     a28:	93 81       	ldd	r25, Z+3	; 0x03
     a2a:	20 e0       	ldi	r18, 0x00	; 0
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	40 e8       	ldi	r20, 0x80	; 128
     a30:	5f e3       	ldi	r21, 0x3F	; 63
     a32:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__ltsf2>
     a36:	88 23       	and	r24, r24
     a38:	44 f4       	brge	.+16     	; 0xa4a <__vector_25+0x258>
		__ticks = 1;
     a3a:	fe 01       	movw	r30, r28
     a3c:	e9 59       	subi	r30, 0x99	; 153
     a3e:	ff 4f       	sbci	r31, 0xFF	; 255
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	91 83       	std	Z+1, r25	; 0x01
     a46:	80 83       	st	Z, r24
     a48:	64 c0       	rjmp	.+200    	; 0xb12 <__vector_25+0x320>
	else if (__tmp > 65535)
     a4a:	fe 01       	movw	r30, r28
     a4c:	e7 59       	subi	r30, 0x97	; 151
     a4e:	ff 4f       	sbci	r31, 0xFF	; 255
     a50:	60 81       	ld	r22, Z
     a52:	71 81       	ldd	r23, Z+1	; 0x01
     a54:	82 81       	ldd	r24, Z+2	; 0x02
     a56:	93 81       	ldd	r25, Z+3	; 0x03
     a58:	20 e0       	ldi	r18, 0x00	; 0
     a5a:	3f ef       	ldi	r19, 0xFF	; 255
     a5c:	4f e7       	ldi	r20, 0x7F	; 127
     a5e:	57 e4       	ldi	r21, 0x47	; 71
     a60:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__gtsf2>
     a64:	18 16       	cp	r1, r24
     a66:	0c f0       	brlt	.+2      	; 0xa6a <__vector_25+0x278>
     a68:	43 c0       	rjmp	.+134    	; 0xaf0 <__vector_25+0x2fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a6a:	fe 01       	movw	r30, r28
     a6c:	e3 59       	subi	r30, 0x93	; 147
     a6e:	ff 4f       	sbci	r31, 0xFF	; 255
     a70:	60 81       	ld	r22, Z
     a72:	71 81       	ldd	r23, Z+1	; 0x01
     a74:	82 81       	ldd	r24, Z+2	; 0x02
     a76:	93 81       	ldd	r25, Z+3	; 0x03
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	30 e0       	ldi	r19, 0x00	; 0
     a7c:	40 e2       	ldi	r20, 0x20	; 32
     a7e:	51 e4       	ldi	r21, 0x41	; 65
     a80:	0e 94 cf 0b 	call	0x179e	; 0x179e <__mulsf3>
     a84:	dc 01       	movw	r26, r24
     a86:	cb 01       	movw	r24, r22
     a88:	8e 01       	movw	r16, r28
     a8a:	09 59       	subi	r16, 0x99	; 153
     a8c:	1f 4f       	sbci	r17, 0xFF	; 255
     a8e:	bc 01       	movw	r22, r24
     a90:	cd 01       	movw	r24, r26
     a92:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__fixunssfsi>
     a96:	dc 01       	movw	r26, r24
     a98:	cb 01       	movw	r24, r22
     a9a:	f8 01       	movw	r30, r16
     a9c:	91 83       	std	Z+1, r25	; 0x01
     a9e:	80 83       	st	Z, r24
     aa0:	1f c0       	rjmp	.+62     	; 0xae0 <__vector_25+0x2ee>
     aa2:	fe 01       	movw	r30, r28
     aa4:	eb 59       	subi	r30, 0x9B	; 155
     aa6:	ff 4f       	sbci	r31, 0xFF	; 255
     aa8:	84 e1       	ldi	r24, 0x14	; 20
     aaa:	91 e0       	ldi	r25, 0x01	; 1
     aac:	91 83       	std	Z+1, r25	; 0x01
     aae:	80 83       	st	Z, r24
     ab0:	fe 01       	movw	r30, r28
     ab2:	eb 59       	subi	r30, 0x9B	; 155
     ab4:	ff 4f       	sbci	r31, 0xFF	; 255
     ab6:	80 81       	ld	r24, Z
     ab8:	91 81       	ldd	r25, Z+1	; 0x01
     aba:	01 97       	sbiw	r24, 0x01	; 1
     abc:	f1 f7       	brne	.-4      	; 0xaba <__vector_25+0x2c8>
     abe:	fe 01       	movw	r30, r28
     ac0:	eb 59       	subi	r30, 0x9B	; 155
     ac2:	ff 4f       	sbci	r31, 0xFF	; 255
     ac4:	91 83       	std	Z+1, r25	; 0x01
     ac6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ac8:	de 01       	movw	r26, r28
     aca:	a9 59       	subi	r26, 0x99	; 153
     acc:	bf 4f       	sbci	r27, 0xFF	; 255
     ace:	fe 01       	movw	r30, r28
     ad0:	e9 59       	subi	r30, 0x99	; 153
     ad2:	ff 4f       	sbci	r31, 0xFF	; 255
     ad4:	80 81       	ld	r24, Z
     ad6:	91 81       	ldd	r25, Z+1	; 0x01
     ad8:	01 97       	sbiw	r24, 0x01	; 1
     ada:	11 96       	adiw	r26, 0x01	; 1
     adc:	9c 93       	st	X, r25
     ade:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ae0:	fe 01       	movw	r30, r28
     ae2:	e9 59       	subi	r30, 0x99	; 153
     ae4:	ff 4f       	sbci	r31, 0xFF	; 255
     ae6:	80 81       	ld	r24, Z
     ae8:	91 81       	ldd	r25, Z+1	; 0x01
     aea:	00 97       	sbiw	r24, 0x00	; 0
     aec:	d1 f6       	brne	.-76     	; 0xaa2 <__vector_25+0x2b0>
     aee:	28 c0       	rjmp	.+80     	; 0xb40 <__vector_25+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     af0:	8e 01       	movw	r16, r28
     af2:	09 59       	subi	r16, 0x99	; 153
     af4:	1f 4f       	sbci	r17, 0xFF	; 255
     af6:	fe 01       	movw	r30, r28
     af8:	e7 59       	subi	r30, 0x97	; 151
     afa:	ff 4f       	sbci	r31, 0xFF	; 255
     afc:	60 81       	ld	r22, Z
     afe:	71 81       	ldd	r23, Z+1	; 0x01
     b00:	82 81       	ldd	r24, Z+2	; 0x02
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__fixunssfsi>
     b08:	dc 01       	movw	r26, r24
     b0a:	cb 01       	movw	r24, r22
     b0c:	f8 01       	movw	r30, r16
     b0e:	91 83       	std	Z+1, r25	; 0x01
     b10:	80 83       	st	Z, r24
     b12:	de 01       	movw	r26, r28
     b14:	ad 59       	subi	r26, 0x9D	; 157
     b16:	bf 4f       	sbci	r27, 0xFF	; 255
     b18:	fe 01       	movw	r30, r28
     b1a:	e9 59       	subi	r30, 0x99	; 153
     b1c:	ff 4f       	sbci	r31, 0xFF	; 255
     b1e:	80 81       	ld	r24, Z
     b20:	91 81       	ldd	r25, Z+1	; 0x01
     b22:	11 96       	adiw	r26, 0x01	; 1
     b24:	9c 93       	st	X, r25
     b26:	8e 93       	st	-X, r24
     b28:	fe 01       	movw	r30, r28
     b2a:	ed 59       	subi	r30, 0x9D	; 157
     b2c:	ff 4f       	sbci	r31, 0xFF	; 255
     b2e:	80 81       	ld	r24, Z
     b30:	91 81       	ldd	r25, Z+1	; 0x01
     b32:	01 97       	sbiw	r24, 0x01	; 1
     b34:	f1 f7       	brne	.-4      	; 0xb32 <__vector_25+0x340>
     b36:	fe 01       	movw	r30, r28
     b38:	ed 59       	subi	r30, 0x9D	; 157
     b3a:	ff 4f       	sbci	r31, 0xFF	; 255
     b3c:	91 83       	std	Z+1, r25	; 0x01
     b3e:	80 83       	st	Z, r24
		_delay_ms(100);
		UDR0 = data; 				//echo data back to PC
     b40:	e6 ec       	ldi	r30, 0xC6	; 198
     b42:	f0 e0       	ldi	r31, 0x00	; 0
     b44:	80 91 12 03 	lds	r24, 0x0312
     b48:	80 83       	st	Z, r24
		}

		if(data == 0x61) //ASCII value of a
     b4a:	80 91 12 03 	lds	r24, 0x0312
     b4e:	81 36       	cpi	r24, 0x61	; 97
     b50:	09 f0       	breq	.+2      	; 0xb54 <__vector_25+0x362>
     b52:	bf c0       	rjmp	.+382    	; 0xcd2 <__vector_25+0x4e0>
		{
		left_degrees(94); //Rotate robot left by 90 degrees
     b54:	8e e5       	ldi	r24, 0x5E	; 94
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	0e 94 6f 03 	call	0x6de	; 0x6de <left_degrees>
		stop();
     b5c:	0e 94 56 02 	call	0x4ac	; 0x4ac <stop>
     b60:	fe 01       	movw	r30, r28
     b62:	e1 5a       	subi	r30, 0xA1	; 161
     b64:	ff 4f       	sbci	r31, 0xFF	; 255
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	a8 ec       	ldi	r26, 0xC8	; 200
     b6c:	b2 e4       	ldi	r27, 0x42	; 66
     b6e:	80 83       	st	Z, r24
     b70:	91 83       	std	Z+1, r25	; 0x01
     b72:	a2 83       	std	Z+2, r26	; 0x02
     b74:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b76:	8e 01       	movw	r16, r28
     b78:	05 5a       	subi	r16, 0xA5	; 165
     b7a:	1f 4f       	sbci	r17, 0xFF	; 255
     b7c:	fe 01       	movw	r30, r28
     b7e:	e1 5a       	subi	r30, 0xA1	; 161
     b80:	ff 4f       	sbci	r31, 0xFF	; 255
     b82:	60 81       	ld	r22, Z
     b84:	71 81       	ldd	r23, Z+1	; 0x01
     b86:	82 81       	ldd	r24, Z+2	; 0x02
     b88:	93 81       	ldd	r25, Z+3	; 0x03
     b8a:	2d ec       	ldi	r18, 0xCD	; 205
     b8c:	3c ec       	ldi	r19, 0xCC	; 204
     b8e:	4c e2       	ldi	r20, 0x2C	; 44
     b90:	55 e4       	ldi	r21, 0x45	; 69
     b92:	0e 94 cf 0b 	call	0x179e	; 0x179e <__mulsf3>
     b96:	dc 01       	movw	r26, r24
     b98:	cb 01       	movw	r24, r22
     b9a:	f8 01       	movw	r30, r16
     b9c:	80 83       	st	Z, r24
     b9e:	91 83       	std	Z+1, r25	; 0x01
     ba0:	a2 83       	std	Z+2, r26	; 0x02
     ba2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ba4:	fe 01       	movw	r30, r28
     ba6:	e5 5a       	subi	r30, 0xA5	; 165
     ba8:	ff 4f       	sbci	r31, 0xFF	; 255
     baa:	60 81       	ld	r22, Z
     bac:	71 81       	ldd	r23, Z+1	; 0x01
     bae:	82 81       	ldd	r24, Z+2	; 0x02
     bb0:	93 81       	ldd	r25, Z+3	; 0x03
     bb2:	20 e0       	ldi	r18, 0x00	; 0
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	40 e8       	ldi	r20, 0x80	; 128
     bb8:	5f e3       	ldi	r21, 0x3F	; 63
     bba:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__ltsf2>
     bbe:	88 23       	and	r24, r24
     bc0:	44 f4       	brge	.+16     	; 0xbd2 <__vector_25+0x3e0>
		__ticks = 1;
     bc2:	fe 01       	movw	r30, r28
     bc4:	e7 5a       	subi	r30, 0xA7	; 167
     bc6:	ff 4f       	sbci	r31, 0xFF	; 255
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	91 83       	std	Z+1, r25	; 0x01
     bce:	80 83       	st	Z, r24
     bd0:	64 c0       	rjmp	.+200    	; 0xc9a <__vector_25+0x4a8>
	else if (__tmp > 65535)
     bd2:	fe 01       	movw	r30, r28
     bd4:	e5 5a       	subi	r30, 0xA5	; 165
     bd6:	ff 4f       	sbci	r31, 0xFF	; 255
     bd8:	60 81       	ld	r22, Z
     bda:	71 81       	ldd	r23, Z+1	; 0x01
     bdc:	82 81       	ldd	r24, Z+2	; 0x02
     bde:	93 81       	ldd	r25, Z+3	; 0x03
     be0:	20 e0       	ldi	r18, 0x00	; 0
     be2:	3f ef       	ldi	r19, 0xFF	; 255
     be4:	4f e7       	ldi	r20, 0x7F	; 127
     be6:	57 e4       	ldi	r21, 0x47	; 71
     be8:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__gtsf2>
     bec:	18 16       	cp	r1, r24
     bee:	0c f0       	brlt	.+2      	; 0xbf2 <__vector_25+0x400>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__vector_25+0x486>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bf2:	fe 01       	movw	r30, r28
     bf4:	e1 5a       	subi	r30, 0xA1	; 161
     bf6:	ff 4f       	sbci	r31, 0xFF	; 255
     bf8:	60 81       	ld	r22, Z
     bfa:	71 81       	ldd	r23, Z+1	; 0x01
     bfc:	82 81       	ldd	r24, Z+2	; 0x02
     bfe:	93 81       	ldd	r25, Z+3	; 0x03
     c00:	20 e0       	ldi	r18, 0x00	; 0
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	40 e2       	ldi	r20, 0x20	; 32
     c06:	51 e4       	ldi	r21, 0x41	; 65
     c08:	0e 94 cf 0b 	call	0x179e	; 0x179e <__mulsf3>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	8e 01       	movw	r16, r28
     c12:	07 5a       	subi	r16, 0xA7	; 167
     c14:	1f 4f       	sbci	r17, 0xFF	; 255
     c16:	bc 01       	movw	r22, r24
     c18:	cd 01       	movw	r24, r26
     c1a:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__fixunssfsi>
     c1e:	dc 01       	movw	r26, r24
     c20:	cb 01       	movw	r24, r22
     c22:	f8 01       	movw	r30, r16
     c24:	91 83       	std	Z+1, r25	; 0x01
     c26:	80 83       	st	Z, r24
     c28:	1f c0       	rjmp	.+62     	; 0xc68 <__vector_25+0x476>
     c2a:	fe 01       	movw	r30, r28
     c2c:	e9 5a       	subi	r30, 0xA9	; 169
     c2e:	ff 4f       	sbci	r31, 0xFF	; 255
     c30:	84 e1       	ldi	r24, 0x14	; 20
     c32:	91 e0       	ldi	r25, 0x01	; 1
     c34:	91 83       	std	Z+1, r25	; 0x01
     c36:	80 83       	st	Z, r24
     c38:	fe 01       	movw	r30, r28
     c3a:	e9 5a       	subi	r30, 0xA9	; 169
     c3c:	ff 4f       	sbci	r31, 0xFF	; 255
     c3e:	80 81       	ld	r24, Z
     c40:	91 81       	ldd	r25, Z+1	; 0x01
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	f1 f7       	brne	.-4      	; 0xc42 <__vector_25+0x450>
     c46:	fe 01       	movw	r30, r28
     c48:	e9 5a       	subi	r30, 0xA9	; 169
     c4a:	ff 4f       	sbci	r31, 0xFF	; 255
     c4c:	91 83       	std	Z+1, r25	; 0x01
     c4e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c50:	de 01       	movw	r26, r28
     c52:	a7 5a       	subi	r26, 0xA7	; 167
     c54:	bf 4f       	sbci	r27, 0xFF	; 255
     c56:	fe 01       	movw	r30, r28
     c58:	e7 5a       	subi	r30, 0xA7	; 167
     c5a:	ff 4f       	sbci	r31, 0xFF	; 255
     c5c:	80 81       	ld	r24, Z
     c5e:	91 81       	ldd	r25, Z+1	; 0x01
     c60:	01 97       	sbiw	r24, 0x01	; 1
     c62:	11 96       	adiw	r26, 0x01	; 1
     c64:	9c 93       	st	X, r25
     c66:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c68:	fe 01       	movw	r30, r28
     c6a:	e7 5a       	subi	r30, 0xA7	; 167
     c6c:	ff 4f       	sbci	r31, 0xFF	; 255
     c6e:	80 81       	ld	r24, Z
     c70:	91 81       	ldd	r25, Z+1	; 0x01
     c72:	00 97       	sbiw	r24, 0x00	; 0
     c74:	d1 f6       	brne	.-76     	; 0xc2a <__vector_25+0x438>
     c76:	28 c0       	rjmp	.+80     	; 0xcc8 <__vector_25+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c78:	8e 01       	movw	r16, r28
     c7a:	07 5a       	subi	r16, 0xA7	; 167
     c7c:	1f 4f       	sbci	r17, 0xFF	; 255
     c7e:	fe 01       	movw	r30, r28
     c80:	e5 5a       	subi	r30, 0xA5	; 165
     c82:	ff 4f       	sbci	r31, 0xFF	; 255
     c84:	60 81       	ld	r22, Z
     c86:	71 81       	ldd	r23, Z+1	; 0x01
     c88:	82 81       	ldd	r24, Z+2	; 0x02
     c8a:	93 81       	ldd	r25, Z+3	; 0x03
     c8c:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__fixunssfsi>
     c90:	dc 01       	movw	r26, r24
     c92:	cb 01       	movw	r24, r22
     c94:	f8 01       	movw	r30, r16
     c96:	91 83       	std	Z+1, r25	; 0x01
     c98:	80 83       	st	Z, r24
     c9a:	de 01       	movw	r26, r28
     c9c:	ab 5a       	subi	r26, 0xAB	; 171
     c9e:	bf 4f       	sbci	r27, 0xFF	; 255
     ca0:	fe 01       	movw	r30, r28
     ca2:	e7 5a       	subi	r30, 0xA7	; 167
     ca4:	ff 4f       	sbci	r31, 0xFF	; 255
     ca6:	80 81       	ld	r24, Z
     ca8:	91 81       	ldd	r25, Z+1	; 0x01
     caa:	11 96       	adiw	r26, 0x01	; 1
     cac:	9c 93       	st	X, r25
     cae:	8e 93       	st	-X, r24
     cb0:	fe 01       	movw	r30, r28
     cb2:	eb 5a       	subi	r30, 0xAB	; 171
     cb4:	ff 4f       	sbci	r31, 0xFF	; 255
     cb6:	80 81       	ld	r24, Z
     cb8:	91 81       	ldd	r25, Z+1	; 0x01
     cba:	01 97       	sbiw	r24, 0x01	; 1
     cbc:	f1 f7       	brne	.-4      	; 0xcba <__vector_25+0x4c8>
     cbe:	fe 01       	movw	r30, r28
     cc0:	eb 5a       	subi	r30, 0xAB	; 171
     cc2:	ff 4f       	sbci	r31, 0xFF	; 255
     cc4:	91 83       	std	Z+1, r25	; 0x01
     cc6:	80 83       	st	Z, r24
		_delay_ms(100);
		UDR0 = data; 				//echo data back to PC
     cc8:	e6 ec       	ldi	r30, 0xC6	; 198
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 91 12 03 	lds	r24, 0x0312
     cd0:	80 83       	st	Z, r24
		}

		if(data == 0x64) //ASCII value of d
     cd2:	80 91 12 03 	lds	r24, 0x0312
     cd6:	84 36       	cpi	r24, 0x64	; 100
     cd8:	09 f0       	breq	.+2      	; 0xcdc <__vector_25+0x4ea>
     cda:	bf c0       	rjmp	.+382    	; 0xe5a <__vector_25+0x668>
		{
		right_degrees(98); //Rotate robot right by 90 degrees
     cdc:	82 e6       	ldi	r24, 0x62	; 98
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	0e 94 82 03 	call	0x704	; 0x704 <right_degrees>
		stop();
     ce4:	0e 94 56 02 	call	0x4ac	; 0x4ac <stop>
     ce8:	fe 01       	movw	r30, r28
     cea:	ef 5a       	subi	r30, 0xAF	; 175
     cec:	ff 4f       	sbci	r31, 0xFF	; 255
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	a8 ec       	ldi	r26, 0xC8	; 200
     cf4:	b2 e4       	ldi	r27, 0x42	; 66
     cf6:	80 83       	st	Z, r24
     cf8:	91 83       	std	Z+1, r25	; 0x01
     cfa:	a2 83       	std	Z+2, r26	; 0x02
     cfc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cfe:	8e 01       	movw	r16, r28
     d00:	03 5b       	subi	r16, 0xB3	; 179
     d02:	1f 4f       	sbci	r17, 0xFF	; 255
     d04:	fe 01       	movw	r30, r28
     d06:	ef 5a       	subi	r30, 0xAF	; 175
     d08:	ff 4f       	sbci	r31, 0xFF	; 255
     d0a:	60 81       	ld	r22, Z
     d0c:	71 81       	ldd	r23, Z+1	; 0x01
     d0e:	82 81       	ldd	r24, Z+2	; 0x02
     d10:	93 81       	ldd	r25, Z+3	; 0x03
     d12:	2d ec       	ldi	r18, 0xCD	; 205
     d14:	3c ec       	ldi	r19, 0xCC	; 204
     d16:	4c e2       	ldi	r20, 0x2C	; 44
     d18:	55 e4       	ldi	r21, 0x45	; 69
     d1a:	0e 94 cf 0b 	call	0x179e	; 0x179e <__mulsf3>
     d1e:	dc 01       	movw	r26, r24
     d20:	cb 01       	movw	r24, r22
     d22:	f8 01       	movw	r30, r16
     d24:	80 83       	st	Z, r24
     d26:	91 83       	std	Z+1, r25	; 0x01
     d28:	a2 83       	std	Z+2, r26	; 0x02
     d2a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d2c:	fe 01       	movw	r30, r28
     d2e:	e3 5b       	subi	r30, 0xB3	; 179
     d30:	ff 4f       	sbci	r31, 0xFF	; 255
     d32:	60 81       	ld	r22, Z
     d34:	71 81       	ldd	r23, Z+1	; 0x01
     d36:	82 81       	ldd	r24, Z+2	; 0x02
     d38:	93 81       	ldd	r25, Z+3	; 0x03
     d3a:	20 e0       	ldi	r18, 0x00	; 0
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	40 e8       	ldi	r20, 0x80	; 128
     d40:	5f e3       	ldi	r21, 0x3F	; 63
     d42:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__ltsf2>
     d46:	88 23       	and	r24, r24
     d48:	44 f4       	brge	.+16     	; 0xd5a <__vector_25+0x568>
		__ticks = 1;
     d4a:	fe 01       	movw	r30, r28
     d4c:	e5 5b       	subi	r30, 0xB5	; 181
     d4e:	ff 4f       	sbci	r31, 0xFF	; 255
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	91 83       	std	Z+1, r25	; 0x01
     d56:	80 83       	st	Z, r24
     d58:	64 c0       	rjmp	.+200    	; 0xe22 <__vector_25+0x630>
	else if (__tmp > 65535)
     d5a:	fe 01       	movw	r30, r28
     d5c:	e3 5b       	subi	r30, 0xB3	; 179
     d5e:	ff 4f       	sbci	r31, 0xFF	; 255
     d60:	60 81       	ld	r22, Z
     d62:	71 81       	ldd	r23, Z+1	; 0x01
     d64:	82 81       	ldd	r24, Z+2	; 0x02
     d66:	93 81       	ldd	r25, Z+3	; 0x03
     d68:	20 e0       	ldi	r18, 0x00	; 0
     d6a:	3f ef       	ldi	r19, 0xFF	; 255
     d6c:	4f e7       	ldi	r20, 0x7F	; 127
     d6e:	57 e4       	ldi	r21, 0x47	; 71
     d70:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__gtsf2>
     d74:	18 16       	cp	r1, r24
     d76:	0c f0       	brlt	.+2      	; 0xd7a <__vector_25+0x588>
     d78:	43 c0       	rjmp	.+134    	; 0xe00 <__vector_25+0x60e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d7a:	fe 01       	movw	r30, r28
     d7c:	ef 5a       	subi	r30, 0xAF	; 175
     d7e:	ff 4f       	sbci	r31, 0xFF	; 255
     d80:	60 81       	ld	r22, Z
     d82:	71 81       	ldd	r23, Z+1	; 0x01
     d84:	82 81       	ldd	r24, Z+2	; 0x02
     d86:	93 81       	ldd	r25, Z+3	; 0x03
     d88:	20 e0       	ldi	r18, 0x00	; 0
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	40 e2       	ldi	r20, 0x20	; 32
     d8e:	51 e4       	ldi	r21, 0x41	; 65
     d90:	0e 94 cf 0b 	call	0x179e	; 0x179e <__mulsf3>
     d94:	dc 01       	movw	r26, r24
     d96:	cb 01       	movw	r24, r22
     d98:	8e 01       	movw	r16, r28
     d9a:	05 5b       	subi	r16, 0xB5	; 181
     d9c:	1f 4f       	sbci	r17, 0xFF	; 255
     d9e:	bc 01       	movw	r22, r24
     da0:	cd 01       	movw	r24, r26
     da2:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__fixunssfsi>
     da6:	dc 01       	movw	r26, r24
     da8:	cb 01       	movw	r24, r22
     daa:	f8 01       	movw	r30, r16
     dac:	91 83       	std	Z+1, r25	; 0x01
     dae:	80 83       	st	Z, r24
     db0:	1f c0       	rjmp	.+62     	; 0xdf0 <__vector_25+0x5fe>
     db2:	fe 01       	movw	r30, r28
     db4:	e7 5b       	subi	r30, 0xB7	; 183
     db6:	ff 4f       	sbci	r31, 0xFF	; 255
     db8:	84 e1       	ldi	r24, 0x14	; 20
     dba:	91 e0       	ldi	r25, 0x01	; 1
     dbc:	91 83       	std	Z+1, r25	; 0x01
     dbe:	80 83       	st	Z, r24
     dc0:	fe 01       	movw	r30, r28
     dc2:	e7 5b       	subi	r30, 0xB7	; 183
     dc4:	ff 4f       	sbci	r31, 0xFF	; 255
     dc6:	80 81       	ld	r24, Z
     dc8:	91 81       	ldd	r25, Z+1	; 0x01
     dca:	01 97       	sbiw	r24, 0x01	; 1
     dcc:	f1 f7       	brne	.-4      	; 0xdca <__vector_25+0x5d8>
     dce:	fe 01       	movw	r30, r28
     dd0:	e7 5b       	subi	r30, 0xB7	; 183
     dd2:	ff 4f       	sbci	r31, 0xFF	; 255
     dd4:	91 83       	std	Z+1, r25	; 0x01
     dd6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dd8:	de 01       	movw	r26, r28
     dda:	a5 5b       	subi	r26, 0xB5	; 181
     ddc:	bf 4f       	sbci	r27, 0xFF	; 255
     dde:	fe 01       	movw	r30, r28
     de0:	e5 5b       	subi	r30, 0xB5	; 181
     de2:	ff 4f       	sbci	r31, 0xFF	; 255
     de4:	80 81       	ld	r24, Z
     de6:	91 81       	ldd	r25, Z+1	; 0x01
     de8:	01 97       	sbiw	r24, 0x01	; 1
     dea:	11 96       	adiw	r26, 0x01	; 1
     dec:	9c 93       	st	X, r25
     dee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     df0:	fe 01       	movw	r30, r28
     df2:	e5 5b       	subi	r30, 0xB5	; 181
     df4:	ff 4f       	sbci	r31, 0xFF	; 255
     df6:	80 81       	ld	r24, Z
     df8:	91 81       	ldd	r25, Z+1	; 0x01
     dfa:	00 97       	sbiw	r24, 0x00	; 0
     dfc:	d1 f6       	brne	.-76     	; 0xdb2 <__vector_25+0x5c0>
     dfe:	28 c0       	rjmp	.+80     	; 0xe50 <__vector_25+0x65e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e00:	8e 01       	movw	r16, r28
     e02:	05 5b       	subi	r16, 0xB5	; 181
     e04:	1f 4f       	sbci	r17, 0xFF	; 255
     e06:	fe 01       	movw	r30, r28
     e08:	e3 5b       	subi	r30, 0xB3	; 179
     e0a:	ff 4f       	sbci	r31, 0xFF	; 255
     e0c:	60 81       	ld	r22, Z
     e0e:	71 81       	ldd	r23, Z+1	; 0x01
     e10:	82 81       	ldd	r24, Z+2	; 0x02
     e12:	93 81       	ldd	r25, Z+3	; 0x03
     e14:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__fixunssfsi>
     e18:	dc 01       	movw	r26, r24
     e1a:	cb 01       	movw	r24, r22
     e1c:	f8 01       	movw	r30, r16
     e1e:	91 83       	std	Z+1, r25	; 0x01
     e20:	80 83       	st	Z, r24
     e22:	de 01       	movw	r26, r28
     e24:	a9 5b       	subi	r26, 0xB9	; 185
     e26:	bf 4f       	sbci	r27, 0xFF	; 255
     e28:	fe 01       	movw	r30, r28
     e2a:	e5 5b       	subi	r30, 0xB5	; 181
     e2c:	ff 4f       	sbci	r31, 0xFF	; 255
     e2e:	80 81       	ld	r24, Z
     e30:	91 81       	ldd	r25, Z+1	; 0x01
     e32:	11 96       	adiw	r26, 0x01	; 1
     e34:	9c 93       	st	X, r25
     e36:	8e 93       	st	-X, r24
     e38:	fe 01       	movw	r30, r28
     e3a:	e9 5b       	subi	r30, 0xB9	; 185
     e3c:	ff 4f       	sbci	r31, 0xFF	; 255
     e3e:	80 81       	ld	r24, Z
     e40:	91 81       	ldd	r25, Z+1	; 0x01
     e42:	01 97       	sbiw	r24, 0x01	; 1
     e44:	f1 f7       	brne	.-4      	; 0xe42 <__vector_25+0x650>
     e46:	fe 01       	movw	r30, r28
     e48:	e9 5b       	subi	r30, 0xB9	; 185
     e4a:	ff 4f       	sbci	r31, 0xFF	; 255
     e4c:	91 83       	std	Z+1, r25	; 0x01
     e4e:	80 83       	st	Z, r24
		_delay_ms(100);
		UDR0 = data; 				//echo data back to PC
     e50:	e6 ec       	ldi	r30, 0xC6	; 198
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 91 12 03 	lds	r24, 0x0312
     e58:	80 83       	st	Z, r24
		}

		if(data == 0x71) //ASCII value of q
     e5a:	80 91 12 03 	lds	r24, 0x0312
     e5e:	81 37       	cpi	r24, 0x71	; 113
     e60:	09 f0       	breq	.+2      	; 0xe64 <__vector_25+0x672>
     e62:	90 c0       	rjmp	.+288    	; 0xf84 <__vector_25+0x792>
		{
		soft_left_degrees(90); //Rotate (soft turn) by 90 degrees
     e64:	8a e5       	ldi	r24, 0x5A	; 90
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	0e 94 95 03 	call	0x72a	; 0x72a <soft_left_degrees>
		stop();
     e6c:	0e 94 56 02 	call	0x4ac	; 0x4ac <stop>
     e70:	fe 01       	movw	r30, r28
     e72:	ed 5b       	subi	r30, 0xBD	; 189
     e74:	ff 4f       	sbci	r31, 0xFF	; 255
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	a8 ec       	ldi	r26, 0xC8	; 200
     e7c:	b2 e4       	ldi	r27, 0x42	; 66
     e7e:	80 83       	st	Z, r24
     e80:	91 83       	std	Z+1, r25	; 0x01
     e82:	a2 83       	std	Z+2, r26	; 0x02
     e84:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e86:	8e 01       	movw	r16, r28
     e88:	01 5c       	subi	r16, 0xC1	; 193
     e8a:	1f 4f       	sbci	r17, 0xFF	; 255
     e8c:	fe 01       	movw	r30, r28
     e8e:	ed 5b       	subi	r30, 0xBD	; 189
     e90:	ff 4f       	sbci	r31, 0xFF	; 255
     e92:	60 81       	ld	r22, Z
     e94:	71 81       	ldd	r23, Z+1	; 0x01
     e96:	82 81       	ldd	r24, Z+2	; 0x02
     e98:	93 81       	ldd	r25, Z+3	; 0x03
     e9a:	2d ec       	ldi	r18, 0xCD	; 205
     e9c:	3c ec       	ldi	r19, 0xCC	; 204
     e9e:	4c e2       	ldi	r20, 0x2C	; 44
     ea0:	55 e4       	ldi	r21, 0x45	; 69
     ea2:	0e 94 cf 0b 	call	0x179e	; 0x179e <__mulsf3>
     ea6:	dc 01       	movw	r26, r24
     ea8:	cb 01       	movw	r24, r22
     eaa:	f8 01       	movw	r30, r16
     eac:	80 83       	st	Z, r24
     eae:	91 83       	std	Z+1, r25	; 0x01
     eb0:	a2 83       	std	Z+2, r26	; 0x02
     eb2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     eb4:	fe 01       	movw	r30, r28
     eb6:	ff 96       	adiw	r30, 0x3f	; 63
     eb8:	60 81       	ld	r22, Z
     eba:	71 81       	ldd	r23, Z+1	; 0x01
     ebc:	82 81       	ldd	r24, Z+2	; 0x02
     ebe:	93 81       	ldd	r25, Z+3	; 0x03
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	40 e8       	ldi	r20, 0x80	; 128
     ec6:	5f e3       	ldi	r21, 0x3F	; 63
     ec8:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__ltsf2>
     ecc:	88 23       	and	r24, r24
     ece:	2c f4       	brge	.+10     	; 0xeda <__vector_25+0x6e8>
		__ticks = 1;
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	9e af       	std	Y+62, r25	; 0x3e
     ed6:	8d af       	std	Y+61, r24	; 0x3d
     ed8:	46 c0       	rjmp	.+140    	; 0xf66 <__vector_25+0x774>
	else if (__tmp > 65535)
     eda:	fe 01       	movw	r30, r28
     edc:	ff 96       	adiw	r30, 0x3f	; 63
     ede:	60 81       	ld	r22, Z
     ee0:	71 81       	ldd	r23, Z+1	; 0x01
     ee2:	82 81       	ldd	r24, Z+2	; 0x02
     ee4:	93 81       	ldd	r25, Z+3	; 0x03
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	3f ef       	ldi	r19, 0xFF	; 255
     eea:	4f e7       	ldi	r20, 0x7F	; 127
     eec:	57 e4       	ldi	r21, 0x47	; 71
     eee:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__gtsf2>
     ef2:	18 16       	cp	r1, r24
     ef4:	64 f5       	brge	.+88     	; 0xf4e <__vector_25+0x75c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ef6:	fe 01       	movw	r30, r28
     ef8:	ed 5b       	subi	r30, 0xBD	; 189
     efa:	ff 4f       	sbci	r31, 0xFF	; 255
     efc:	60 81       	ld	r22, Z
     efe:	71 81       	ldd	r23, Z+1	; 0x01
     f00:	82 81       	ldd	r24, Z+2	; 0x02
     f02:	93 81       	ldd	r25, Z+3	; 0x03
     f04:	20 e0       	ldi	r18, 0x00	; 0
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	40 e2       	ldi	r20, 0x20	; 32
     f0a:	51 e4       	ldi	r21, 0x41	; 65
     f0c:	0e 94 cf 0b 	call	0x179e	; 0x179e <__mulsf3>
     f10:	dc 01       	movw	r26, r24
     f12:	cb 01       	movw	r24, r22
     f14:	bc 01       	movw	r22, r24
     f16:	cd 01       	movw	r24, r26
     f18:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__fixunssfsi>
     f1c:	dc 01       	movw	r26, r24
     f1e:	cb 01       	movw	r24, r22
     f20:	9e af       	std	Y+62, r25	; 0x3e
     f22:	8d af       	std	Y+61, r24	; 0x3d
     f24:	0f c0       	rjmp	.+30     	; 0xf44 <__vector_25+0x752>
     f26:	84 e1       	ldi	r24, 0x14	; 20
     f28:	91 e0       	ldi	r25, 0x01	; 1
     f2a:	9c af       	std	Y+60, r25	; 0x3c
     f2c:	8b af       	std	Y+59, r24	; 0x3b
     f2e:	8b ad       	ldd	r24, Y+59	; 0x3b
     f30:	9c ad       	ldd	r25, Y+60	; 0x3c
     f32:	01 97       	sbiw	r24, 0x01	; 1
     f34:	f1 f7       	brne	.-4      	; 0xf32 <__vector_25+0x740>
     f36:	9c af       	std	Y+60, r25	; 0x3c
     f38:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f3a:	8d ad       	ldd	r24, Y+61	; 0x3d
     f3c:	9e ad       	ldd	r25, Y+62	; 0x3e
     f3e:	01 97       	sbiw	r24, 0x01	; 1
     f40:	9e af       	std	Y+62, r25	; 0x3e
     f42:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f44:	8d ad       	ldd	r24, Y+61	; 0x3d
     f46:	9e ad       	ldd	r25, Y+62	; 0x3e
     f48:	00 97       	sbiw	r24, 0x00	; 0
     f4a:	69 f7       	brne	.-38     	; 0xf26 <__vector_25+0x734>
     f4c:	16 c0       	rjmp	.+44     	; 0xf7a <__vector_25+0x788>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f4e:	fe 01       	movw	r30, r28
     f50:	ff 96       	adiw	r30, 0x3f	; 63
     f52:	60 81       	ld	r22, Z
     f54:	71 81       	ldd	r23, Z+1	; 0x01
     f56:	82 81       	ldd	r24, Z+2	; 0x02
     f58:	93 81       	ldd	r25, Z+3	; 0x03
     f5a:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__fixunssfsi>
     f5e:	dc 01       	movw	r26, r24
     f60:	cb 01       	movw	r24, r22
     f62:	9e af       	std	Y+62, r25	; 0x3e
     f64:	8d af       	std	Y+61, r24	; 0x3d
     f66:	8d ad       	ldd	r24, Y+61	; 0x3d
     f68:	9e ad       	ldd	r25, Y+62	; 0x3e
     f6a:	9a af       	std	Y+58, r25	; 0x3a
     f6c:	89 af       	std	Y+57, r24	; 0x39
     f6e:	89 ad       	ldd	r24, Y+57	; 0x39
     f70:	9a ad       	ldd	r25, Y+58	; 0x3a
     f72:	01 97       	sbiw	r24, 0x01	; 1
     f74:	f1 f7       	brne	.-4      	; 0xf72 <__vector_25+0x780>
     f76:	9a af       	std	Y+58, r25	; 0x3a
     f78:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(100);
		UDR0 = data; 				//echo data back to PC
     f7a:	e6 ec       	ldi	r30, 0xC6	; 198
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 91 12 03 	lds	r24, 0x0312
     f82:	80 83       	st	Z, r24
		}
		
		if(data == 0x65) //ASCII value of e
     f84:	80 91 12 03 	lds	r24, 0x0312
     f88:	85 36       	cpi	r24, 0x65	; 101
     f8a:	09 f0       	breq	.+2      	; 0xf8e <__vector_25+0x79c>
     f8c:	7d c0       	rjmp	.+250    	; 0x1088 <__vector_25+0x896>
		{
		soft_right_degrees(90);	//Rotate (soft turn) by 90 degrees
     f8e:	8a e5       	ldi	r24, 0x5A	; 90
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	0e 94 ae 03 	call	0x75c	; 0x75c <soft_right_degrees>
		stop();
     f96:	0e 94 56 02 	call	0x4ac	; 0x4ac <stop>
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	a8 ec       	ldi	r26, 0xC8	; 200
     fa0:	b2 e4       	ldi	r27, 0x42	; 66
     fa2:	8d ab       	std	Y+53, r24	; 0x35
     fa4:	9e ab       	std	Y+54, r25	; 0x36
     fa6:	af ab       	std	Y+55, r26	; 0x37
     fa8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     faa:	6d a9       	ldd	r22, Y+53	; 0x35
     fac:	7e a9       	ldd	r23, Y+54	; 0x36
     fae:	8f a9       	ldd	r24, Y+55	; 0x37
     fb0:	98 ad       	ldd	r25, Y+56	; 0x38
     fb2:	2d ec       	ldi	r18, 0xCD	; 205
     fb4:	3c ec       	ldi	r19, 0xCC	; 204
     fb6:	4c e2       	ldi	r20, 0x2C	; 44
     fb8:	55 e4       	ldi	r21, 0x45	; 69
     fba:	0e 94 cf 0b 	call	0x179e	; 0x179e <__mulsf3>
     fbe:	dc 01       	movw	r26, r24
     fc0:	cb 01       	movw	r24, r22
     fc2:	89 ab       	std	Y+49, r24	; 0x31
     fc4:	9a ab       	std	Y+50, r25	; 0x32
     fc6:	ab ab       	std	Y+51, r26	; 0x33
     fc8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     fca:	69 a9       	ldd	r22, Y+49	; 0x31
     fcc:	7a a9       	ldd	r23, Y+50	; 0x32
     fce:	8b a9       	ldd	r24, Y+51	; 0x33
     fd0:	9c a9       	ldd	r25, Y+52	; 0x34
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	40 e8       	ldi	r20, 0x80	; 128
     fd8:	5f e3       	ldi	r21, 0x3F	; 63
     fda:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__ltsf2>
     fde:	88 23       	and	r24, r24
     fe0:	2c f4       	brge	.+10     	; 0xfec <__vector_25+0x7fa>
		__ticks = 1;
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	98 ab       	std	Y+48, r25	; 0x30
     fe8:	8f a7       	std	Y+47, r24	; 0x2f
     fea:	3f c0       	rjmp	.+126    	; 0x106a <__vector_25+0x878>
	else if (__tmp > 65535)
     fec:	69 a9       	ldd	r22, Y+49	; 0x31
     fee:	7a a9       	ldd	r23, Y+50	; 0x32
     ff0:	8b a9       	ldd	r24, Y+51	; 0x33
     ff2:	9c a9       	ldd	r25, Y+52	; 0x34
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	3f ef       	ldi	r19, 0xFF	; 255
     ff8:	4f e7       	ldi	r20, 0x7F	; 127
     ffa:	57 e4       	ldi	r21, 0x47	; 71
     ffc:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__gtsf2>
    1000:	18 16       	cp	r1, r24
    1002:	4c f5       	brge	.+82     	; 0x1056 <__vector_25+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1004:	6d a9       	ldd	r22, Y+53	; 0x35
    1006:	7e a9       	ldd	r23, Y+54	; 0x36
    1008:	8f a9       	ldd	r24, Y+55	; 0x37
    100a:	98 ad       	ldd	r25, Y+56	; 0x38
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	40 e2       	ldi	r20, 0x20	; 32
    1012:	51 e4       	ldi	r21, 0x41	; 65
    1014:	0e 94 cf 0b 	call	0x179e	; 0x179e <__mulsf3>
    1018:	dc 01       	movw	r26, r24
    101a:	cb 01       	movw	r24, r22
    101c:	bc 01       	movw	r22, r24
    101e:	cd 01       	movw	r24, r26
    1020:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__fixunssfsi>
    1024:	dc 01       	movw	r26, r24
    1026:	cb 01       	movw	r24, r22
    1028:	98 ab       	std	Y+48, r25	; 0x30
    102a:	8f a7       	std	Y+47, r24	; 0x2f
    102c:	0f c0       	rjmp	.+30     	; 0x104c <__vector_25+0x85a>
    102e:	84 e1       	ldi	r24, 0x14	; 20
    1030:	91 e0       	ldi	r25, 0x01	; 1
    1032:	9e a7       	std	Y+46, r25	; 0x2e
    1034:	8d a7       	std	Y+45, r24	; 0x2d
    1036:	8d a5       	ldd	r24, Y+45	; 0x2d
    1038:	9e a5       	ldd	r25, Y+46	; 0x2e
    103a:	01 97       	sbiw	r24, 0x01	; 1
    103c:	f1 f7       	brne	.-4      	; 0x103a <__vector_25+0x848>
    103e:	9e a7       	std	Y+46, r25	; 0x2e
    1040:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1042:	8f a5       	ldd	r24, Y+47	; 0x2f
    1044:	98 a9       	ldd	r25, Y+48	; 0x30
    1046:	01 97       	sbiw	r24, 0x01	; 1
    1048:	98 ab       	std	Y+48, r25	; 0x30
    104a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    104c:	8f a5       	ldd	r24, Y+47	; 0x2f
    104e:	98 a9       	ldd	r25, Y+48	; 0x30
    1050:	00 97       	sbiw	r24, 0x00	; 0
    1052:	69 f7       	brne	.-38     	; 0x102e <__vector_25+0x83c>
    1054:	14 c0       	rjmp	.+40     	; 0x107e <__vector_25+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1056:	69 a9       	ldd	r22, Y+49	; 0x31
    1058:	7a a9       	ldd	r23, Y+50	; 0x32
    105a:	8b a9       	ldd	r24, Y+51	; 0x33
    105c:	9c a9       	ldd	r25, Y+52	; 0x34
    105e:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__fixunssfsi>
    1062:	dc 01       	movw	r26, r24
    1064:	cb 01       	movw	r24, r22
    1066:	98 ab       	std	Y+48, r25	; 0x30
    1068:	8f a7       	std	Y+47, r24	; 0x2f
    106a:	8f a5       	ldd	r24, Y+47	; 0x2f
    106c:	98 a9       	ldd	r25, Y+48	; 0x30
    106e:	9c a7       	std	Y+44, r25	; 0x2c
    1070:	8b a7       	std	Y+43, r24	; 0x2b
    1072:	8b a5       	ldd	r24, Y+43	; 0x2b
    1074:	9c a5       	ldd	r25, Y+44	; 0x2c
    1076:	01 97       	sbiw	r24, 0x01	; 1
    1078:	f1 f7       	brne	.-4      	; 0x1076 <__vector_25+0x884>
    107a:	9c a7       	std	Y+44, r25	; 0x2c
    107c:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(100);
		UDR0 = data; 				//echo data back to PC
    107e:	e6 ec       	ldi	r30, 0xC6	; 198
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 91 12 03 	lds	r24, 0x0312
    1086:	80 83       	st	Z, r24
		}

		if(data == 0x73) //ASCII value of s
    1088:	80 91 12 03 	lds	r24, 0x0312
    108c:	83 37       	cpi	r24, 0x73	; 115
    108e:	09 f0       	breq	.+2      	; 0x1092 <__vector_25+0x8a0>
    1090:	79 c0       	rjmp	.+242    	; 0x1184 <__vector_25+0x992>
		{
		stop();
    1092:	0e 94 56 02 	call	0x4ac	; 0x4ac <stop>
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	a8 ec       	ldi	r26, 0xC8	; 200
    109c:	b2 e4       	ldi	r27, 0x42	; 66
    109e:	8f a3       	std	Y+39, r24	; 0x27
    10a0:	98 a7       	std	Y+40, r25	; 0x28
    10a2:	a9 a7       	std	Y+41, r26	; 0x29
    10a4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10a6:	6f a1       	ldd	r22, Y+39	; 0x27
    10a8:	78 a5       	ldd	r23, Y+40	; 0x28
    10aa:	89 a5       	ldd	r24, Y+41	; 0x29
    10ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    10ae:	2d ec       	ldi	r18, 0xCD	; 205
    10b0:	3c ec       	ldi	r19, 0xCC	; 204
    10b2:	4c e2       	ldi	r20, 0x2C	; 44
    10b4:	55 e4       	ldi	r21, 0x45	; 69
    10b6:	0e 94 cf 0b 	call	0x179e	; 0x179e <__mulsf3>
    10ba:	dc 01       	movw	r26, r24
    10bc:	cb 01       	movw	r24, r22
    10be:	8b a3       	std	Y+35, r24	; 0x23
    10c0:	9c a3       	std	Y+36, r25	; 0x24
    10c2:	ad a3       	std	Y+37, r26	; 0x25
    10c4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    10c6:	6b a1       	ldd	r22, Y+35	; 0x23
    10c8:	7c a1       	ldd	r23, Y+36	; 0x24
    10ca:	8d a1       	ldd	r24, Y+37	; 0x25
    10cc:	9e a1       	ldd	r25, Y+38	; 0x26
    10ce:	20 e0       	ldi	r18, 0x00	; 0
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	40 e8       	ldi	r20, 0x80	; 128
    10d4:	5f e3       	ldi	r21, 0x3F	; 63
    10d6:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__ltsf2>
    10da:	88 23       	and	r24, r24
    10dc:	2c f4       	brge	.+10     	; 0x10e8 <__vector_25+0x8f6>
		__ticks = 1;
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	9a a3       	std	Y+34, r25	; 0x22
    10e4:	89 a3       	std	Y+33, r24	; 0x21
    10e6:	3f c0       	rjmp	.+126    	; 0x1166 <__vector_25+0x974>
	else if (__tmp > 65535)
    10e8:	6b a1       	ldd	r22, Y+35	; 0x23
    10ea:	7c a1       	ldd	r23, Y+36	; 0x24
    10ec:	8d a1       	ldd	r24, Y+37	; 0x25
    10ee:	9e a1       	ldd	r25, Y+38	; 0x26
    10f0:	20 e0       	ldi	r18, 0x00	; 0
    10f2:	3f ef       	ldi	r19, 0xFF	; 255
    10f4:	4f e7       	ldi	r20, 0x7F	; 127
    10f6:	57 e4       	ldi	r21, 0x47	; 71
    10f8:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__gtsf2>
    10fc:	18 16       	cp	r1, r24
    10fe:	4c f5       	brge	.+82     	; 0x1152 <__vector_25+0x960>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1100:	6f a1       	ldd	r22, Y+39	; 0x27
    1102:	78 a5       	ldd	r23, Y+40	; 0x28
    1104:	89 a5       	ldd	r24, Y+41	; 0x29
    1106:	9a a5       	ldd	r25, Y+42	; 0x2a
    1108:	20 e0       	ldi	r18, 0x00	; 0
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	40 e2       	ldi	r20, 0x20	; 32
    110e:	51 e4       	ldi	r21, 0x41	; 65
    1110:	0e 94 cf 0b 	call	0x179e	; 0x179e <__mulsf3>
    1114:	dc 01       	movw	r26, r24
    1116:	cb 01       	movw	r24, r22
    1118:	bc 01       	movw	r22, r24
    111a:	cd 01       	movw	r24, r26
    111c:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__fixunssfsi>
    1120:	dc 01       	movw	r26, r24
    1122:	cb 01       	movw	r24, r22
    1124:	9a a3       	std	Y+34, r25	; 0x22
    1126:	89 a3       	std	Y+33, r24	; 0x21
    1128:	0f c0       	rjmp	.+30     	; 0x1148 <__vector_25+0x956>
    112a:	84 e1       	ldi	r24, 0x14	; 20
    112c:	91 e0       	ldi	r25, 0x01	; 1
    112e:	98 a3       	std	Y+32, r25	; 0x20
    1130:	8f 8f       	std	Y+31, r24	; 0x1f
    1132:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1134:	98 a1       	ldd	r25, Y+32	; 0x20
    1136:	01 97       	sbiw	r24, 0x01	; 1
    1138:	f1 f7       	brne	.-4      	; 0x1136 <__vector_25+0x944>
    113a:	98 a3       	std	Y+32, r25	; 0x20
    113c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    113e:	89 a1       	ldd	r24, Y+33	; 0x21
    1140:	9a a1       	ldd	r25, Y+34	; 0x22
    1142:	01 97       	sbiw	r24, 0x01	; 1
    1144:	9a a3       	std	Y+34, r25	; 0x22
    1146:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1148:	89 a1       	ldd	r24, Y+33	; 0x21
    114a:	9a a1       	ldd	r25, Y+34	; 0x22
    114c:	00 97       	sbiw	r24, 0x00	; 0
    114e:	69 f7       	brne	.-38     	; 0x112a <__vector_25+0x938>
    1150:	14 c0       	rjmp	.+40     	; 0x117a <__vector_25+0x988>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1152:	6b a1       	ldd	r22, Y+35	; 0x23
    1154:	7c a1       	ldd	r23, Y+36	; 0x24
    1156:	8d a1       	ldd	r24, Y+37	; 0x25
    1158:	9e a1       	ldd	r25, Y+38	; 0x26
    115a:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__fixunssfsi>
    115e:	dc 01       	movw	r26, r24
    1160:	cb 01       	movw	r24, r22
    1162:	9a a3       	std	Y+34, r25	; 0x22
    1164:	89 a3       	std	Y+33, r24	; 0x21
    1166:	89 a1       	ldd	r24, Y+33	; 0x21
    1168:	9a a1       	ldd	r25, Y+34	; 0x22
    116a:	9e 8f       	std	Y+30, r25	; 0x1e
    116c:	8d 8f       	std	Y+29, r24	; 0x1d
    116e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1170:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1172:	01 97       	sbiw	r24, 0x01	; 1
    1174:	f1 f7       	brne	.-4      	; 0x1172 <__vector_25+0x980>
    1176:	9e 8f       	std	Y+30, r25	; 0x1e
    1178:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(100);
		UDR0 = data; 				//echo data back to PC
    117a:	e6 ec       	ldi	r30, 0xC6	; 198
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 91 12 03 	lds	r24, 0x0312
    1182:	80 83       	st	Z, r24
		}

		if(data == 0x7A) //ASCII value of z
    1184:	80 91 12 03 	lds	r24, 0x0312
    1188:	8a 37       	cpi	r24, 0x7A	; 122
    118a:	09 f0       	breq	.+2      	; 0x118e <__vector_25+0x99c>
    118c:	79 c0       	rjmp	.+242    	; 0x1280 <__vector_25+0xa8e>
		{
		buzzer_on();
    118e:	0e 94 aa 00 	call	0x154	; 0x154 <buzzer_on>
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	a8 ec       	ldi	r26, 0xC8	; 200
    1198:	b2 e4       	ldi	r27, 0x42	; 66
    119a:	89 8f       	std	Y+25, r24	; 0x19
    119c:	9a 8f       	std	Y+26, r25	; 0x1a
    119e:	ab 8f       	std	Y+27, r26	; 0x1b
    11a0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11a2:	69 8d       	ldd	r22, Y+25	; 0x19
    11a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11aa:	2d ec       	ldi	r18, 0xCD	; 205
    11ac:	3c ec       	ldi	r19, 0xCC	; 204
    11ae:	4c e2       	ldi	r20, 0x2C	; 44
    11b0:	55 e4       	ldi	r21, 0x45	; 69
    11b2:	0e 94 cf 0b 	call	0x179e	; 0x179e <__mulsf3>
    11b6:	dc 01       	movw	r26, r24
    11b8:	cb 01       	movw	r24, r22
    11ba:	8d 8b       	std	Y+21, r24	; 0x15
    11bc:	9e 8b       	std	Y+22, r25	; 0x16
    11be:	af 8b       	std	Y+23, r26	; 0x17
    11c0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11c2:	6d 89       	ldd	r22, Y+21	; 0x15
    11c4:	7e 89       	ldd	r23, Y+22	; 0x16
    11c6:	8f 89       	ldd	r24, Y+23	; 0x17
    11c8:	98 8d       	ldd	r25, Y+24	; 0x18
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	40 e8       	ldi	r20, 0x80	; 128
    11d0:	5f e3       	ldi	r21, 0x3F	; 63
    11d2:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__ltsf2>
    11d6:	88 23       	and	r24, r24
    11d8:	2c f4       	brge	.+10     	; 0x11e4 <__vector_25+0x9f2>
		__ticks = 1;
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	9c 8b       	std	Y+20, r25	; 0x14
    11e0:	8b 8b       	std	Y+19, r24	; 0x13
    11e2:	3f c0       	rjmp	.+126    	; 0x1262 <__vector_25+0xa70>
	else if (__tmp > 65535)
    11e4:	6d 89       	ldd	r22, Y+21	; 0x15
    11e6:	7e 89       	ldd	r23, Y+22	; 0x16
    11e8:	8f 89       	ldd	r24, Y+23	; 0x17
    11ea:	98 8d       	ldd	r25, Y+24	; 0x18
    11ec:	20 e0       	ldi	r18, 0x00	; 0
    11ee:	3f ef       	ldi	r19, 0xFF	; 255
    11f0:	4f e7       	ldi	r20, 0x7F	; 127
    11f2:	57 e4       	ldi	r21, 0x47	; 71
    11f4:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__gtsf2>
    11f8:	18 16       	cp	r1, r24
    11fa:	4c f5       	brge	.+82     	; 0x124e <__vector_25+0xa5c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11fc:	69 8d       	ldd	r22, Y+25	; 0x19
    11fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1200:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1202:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1204:	20 e0       	ldi	r18, 0x00	; 0
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	40 e2       	ldi	r20, 0x20	; 32
    120a:	51 e4       	ldi	r21, 0x41	; 65
    120c:	0e 94 cf 0b 	call	0x179e	; 0x179e <__mulsf3>
    1210:	dc 01       	movw	r26, r24
    1212:	cb 01       	movw	r24, r22
    1214:	bc 01       	movw	r22, r24
    1216:	cd 01       	movw	r24, r26
    1218:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__fixunssfsi>
    121c:	dc 01       	movw	r26, r24
    121e:	cb 01       	movw	r24, r22
    1220:	9c 8b       	std	Y+20, r25	; 0x14
    1222:	8b 8b       	std	Y+19, r24	; 0x13
    1224:	0f c0       	rjmp	.+30     	; 0x1244 <__vector_25+0xa52>
    1226:	84 e1       	ldi	r24, 0x14	; 20
    1228:	91 e0       	ldi	r25, 0x01	; 1
    122a:	9a 8b       	std	Y+18, r25	; 0x12
    122c:	89 8b       	std	Y+17, r24	; 0x11
    122e:	89 89       	ldd	r24, Y+17	; 0x11
    1230:	9a 89       	ldd	r25, Y+18	; 0x12
    1232:	01 97       	sbiw	r24, 0x01	; 1
    1234:	f1 f7       	brne	.-4      	; 0x1232 <__vector_25+0xa40>
    1236:	9a 8b       	std	Y+18, r25	; 0x12
    1238:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    123a:	8b 89       	ldd	r24, Y+19	; 0x13
    123c:	9c 89       	ldd	r25, Y+20	; 0x14
    123e:	01 97       	sbiw	r24, 0x01	; 1
    1240:	9c 8b       	std	Y+20, r25	; 0x14
    1242:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1244:	8b 89       	ldd	r24, Y+19	; 0x13
    1246:	9c 89       	ldd	r25, Y+20	; 0x14
    1248:	00 97       	sbiw	r24, 0x00	; 0
    124a:	69 f7       	brne	.-38     	; 0x1226 <__vector_25+0xa34>
    124c:	14 c0       	rjmp	.+40     	; 0x1276 <__vector_25+0xa84>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    124e:	6d 89       	ldd	r22, Y+21	; 0x15
    1250:	7e 89       	ldd	r23, Y+22	; 0x16
    1252:	8f 89       	ldd	r24, Y+23	; 0x17
    1254:	98 8d       	ldd	r25, Y+24	; 0x18
    1256:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__fixunssfsi>
    125a:	dc 01       	movw	r26, r24
    125c:	cb 01       	movw	r24, r22
    125e:	9c 8b       	std	Y+20, r25	; 0x14
    1260:	8b 8b       	std	Y+19, r24	; 0x13
    1262:	8b 89       	ldd	r24, Y+19	; 0x13
    1264:	9c 89       	ldd	r25, Y+20	; 0x14
    1266:	98 8b       	std	Y+16, r25	; 0x10
    1268:	8f 87       	std	Y+15, r24	; 0x0f
    126a:	8f 85       	ldd	r24, Y+15	; 0x0f
    126c:	98 89       	ldd	r25, Y+16	; 0x10
    126e:	01 97       	sbiw	r24, 0x01	; 1
    1270:	f1 f7       	brne	.-4      	; 0x126e <__vector_25+0xa7c>
    1272:	98 8b       	std	Y+16, r25	; 0x10
    1274:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
		UDR0 = data; 				//echo data back to PC
    1276:	e6 ec       	ldi	r30, 0xC6	; 198
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 91 12 03 	lds	r24, 0x0312
    127e:	80 83       	st	Z, r24
		}

		if(data == 0x63) //ASCII value of c
    1280:	80 91 12 03 	lds	r24, 0x0312
    1284:	83 36       	cpi	r24, 0x63	; 99
    1286:	09 f0       	breq	.+2      	; 0x128a <__vector_25+0xa98>
    1288:	79 c0       	rjmp	.+242    	; 0x137c <__vector_25+0xb8a>
		{
		buzzer_off();
    128a:	0e 94 bf 00 	call	0x17e	; 0x17e <buzzer_off>
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	a8 ec       	ldi	r26, 0xC8	; 200
    1294:	b2 e4       	ldi	r27, 0x42	; 66
    1296:	8b 87       	std	Y+11, r24	; 0x0b
    1298:	9c 87       	std	Y+12, r25	; 0x0c
    129a:	ad 87       	std	Y+13, r26	; 0x0d
    129c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    129e:	6b 85       	ldd	r22, Y+11	; 0x0b
    12a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    12a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    12a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    12a6:	2d ec       	ldi	r18, 0xCD	; 205
    12a8:	3c ec       	ldi	r19, 0xCC	; 204
    12aa:	4c e2       	ldi	r20, 0x2C	; 44
    12ac:	55 e4       	ldi	r21, 0x45	; 69
    12ae:	0e 94 cf 0b 	call	0x179e	; 0x179e <__mulsf3>
    12b2:	dc 01       	movw	r26, r24
    12b4:	cb 01       	movw	r24, r22
    12b6:	8f 83       	std	Y+7, r24	; 0x07
    12b8:	98 87       	std	Y+8, r25	; 0x08
    12ba:	a9 87       	std	Y+9, r26	; 0x09
    12bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12be:	6f 81       	ldd	r22, Y+7	; 0x07
    12c0:	78 85       	ldd	r23, Y+8	; 0x08
    12c2:	89 85       	ldd	r24, Y+9	; 0x09
    12c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c6:	20 e0       	ldi	r18, 0x00	; 0
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	40 e8       	ldi	r20, 0x80	; 128
    12cc:	5f e3       	ldi	r21, 0x3F	; 63
    12ce:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__ltsf2>
    12d2:	88 23       	and	r24, r24
    12d4:	2c f4       	brge	.+10     	; 0x12e0 <__vector_25+0xaee>
		__ticks = 1;
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	9e 83       	std	Y+6, r25	; 0x06
    12dc:	8d 83       	std	Y+5, r24	; 0x05
    12de:	3f c0       	rjmp	.+126    	; 0x135e <__vector_25+0xb6c>
	else if (__tmp > 65535)
    12e0:	6f 81       	ldd	r22, Y+7	; 0x07
    12e2:	78 85       	ldd	r23, Y+8	; 0x08
    12e4:	89 85       	ldd	r24, Y+9	; 0x09
    12e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	3f ef       	ldi	r19, 0xFF	; 255
    12ec:	4f e7       	ldi	r20, 0x7F	; 127
    12ee:	57 e4       	ldi	r21, 0x47	; 71
    12f0:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__gtsf2>
    12f4:	18 16       	cp	r1, r24
    12f6:	4c f5       	brge	.+82     	; 0x134a <__vector_25+0xb58>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    12fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    12fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    12fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1300:	20 e0       	ldi	r18, 0x00	; 0
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	40 e2       	ldi	r20, 0x20	; 32
    1306:	51 e4       	ldi	r21, 0x41	; 65
    1308:	0e 94 cf 0b 	call	0x179e	; 0x179e <__mulsf3>
    130c:	dc 01       	movw	r26, r24
    130e:	cb 01       	movw	r24, r22
    1310:	bc 01       	movw	r22, r24
    1312:	cd 01       	movw	r24, r26
    1314:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__fixunssfsi>
    1318:	dc 01       	movw	r26, r24
    131a:	cb 01       	movw	r24, r22
    131c:	9e 83       	std	Y+6, r25	; 0x06
    131e:	8d 83       	std	Y+5, r24	; 0x05
    1320:	0f c0       	rjmp	.+30     	; 0x1340 <__vector_25+0xb4e>
    1322:	84 e1       	ldi	r24, 0x14	; 20
    1324:	91 e0       	ldi	r25, 0x01	; 1
    1326:	9c 83       	std	Y+4, r25	; 0x04
    1328:	8b 83       	std	Y+3, r24	; 0x03
    132a:	8b 81       	ldd	r24, Y+3	; 0x03
    132c:	9c 81       	ldd	r25, Y+4	; 0x04
    132e:	01 97       	sbiw	r24, 0x01	; 1
    1330:	f1 f7       	brne	.-4      	; 0x132e <__vector_25+0xb3c>
    1332:	9c 83       	std	Y+4, r25	; 0x04
    1334:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1336:	8d 81       	ldd	r24, Y+5	; 0x05
    1338:	9e 81       	ldd	r25, Y+6	; 0x06
    133a:	01 97       	sbiw	r24, 0x01	; 1
    133c:	9e 83       	std	Y+6, r25	; 0x06
    133e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1340:	8d 81       	ldd	r24, Y+5	; 0x05
    1342:	9e 81       	ldd	r25, Y+6	; 0x06
    1344:	00 97       	sbiw	r24, 0x00	; 0
    1346:	69 f7       	brne	.-38     	; 0x1322 <__vector_25+0xb30>
    1348:	14 c0       	rjmp	.+40     	; 0x1372 <__vector_25+0xb80>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    134a:	6f 81       	ldd	r22, Y+7	; 0x07
    134c:	78 85       	ldd	r23, Y+8	; 0x08
    134e:	89 85       	ldd	r24, Y+9	; 0x09
    1350:	9a 85       	ldd	r25, Y+10	; 0x0a
    1352:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__fixunssfsi>
    1356:	dc 01       	movw	r26, r24
    1358:	cb 01       	movw	r24, r22
    135a:	9e 83       	std	Y+6, r25	; 0x06
    135c:	8d 83       	std	Y+5, r24	; 0x05
    135e:	8d 81       	ldd	r24, Y+5	; 0x05
    1360:	9e 81       	ldd	r25, Y+6	; 0x06
    1362:	9a 83       	std	Y+2, r25	; 0x02
    1364:	89 83       	std	Y+1, r24	; 0x01
    1366:	89 81       	ldd	r24, Y+1	; 0x01
    1368:	9a 81       	ldd	r25, Y+2	; 0x02
    136a:	01 97       	sbiw	r24, 0x01	; 1
    136c:	f1 f7       	brne	.-4      	; 0x136a <__vector_25+0xb78>
    136e:	9a 83       	std	Y+2, r25	; 0x02
    1370:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		UDR0 = data; 				//echo data back to PC
    1372:	e6 ec       	ldi	r30, 0xC6	; 198
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 91 12 03 	lds	r24, 0x0312
    137a:	80 83       	st	Z, r24
		}
	
}
    137c:	c2 58       	subi	r28, 0x82	; 130
    137e:	df 4f       	sbci	r29, 0xFF	; 255
    1380:	de bf       	out	0x3e, r29	; 62
    1382:	cd bf       	out	0x3d, r28	; 61
    1384:	cf 91       	pop	r28
    1386:	df 91       	pop	r29
    1388:	ff 91       	pop	r31
    138a:	ef 91       	pop	r30
    138c:	bf 91       	pop	r27
    138e:	af 91       	pop	r26
    1390:	9f 91       	pop	r25
    1392:	8f 91       	pop	r24
    1394:	7f 91       	pop	r23
    1396:	6f 91       	pop	r22
    1398:	5f 91       	pop	r21
    139a:	4f 91       	pop	r20
    139c:	3f 91       	pop	r19
    139e:	2f 91       	pop	r18
    13a0:	1f 91       	pop	r17
    13a2:	0f 91       	pop	r16
    13a4:	0f 90       	pop	r0
    13a6:	00 92 5b 00 	sts	0x005B, r0
    13aa:	0f 90       	pop	r0
    13ac:	0f be       	out	0x3f, r0	; 63
    13ae:	0f 90       	pop	r0
    13b0:	1f 90       	pop	r1
    13b2:	18 95       	reti

000013b4 <init_devices>:

/*****************************************************/
/**  	Function To Initialize all The Devices  	**/
/*****************************************************/
void init_devices()
{
    13b4:	df 93       	push	r29
    13b6:	cf 93       	push	r28
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupts
    13bc:	f8 94       	cli
 port_init();  //Initializes all the ports
    13be:	0e 94 52 01 	call	0x2a4	; 0x2a4 <port_init>
 uart0_init(); //Initailize UART1 for serial communiaction
    13c2:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <uart0_init>
 left_position_encoder_interrupt_init();
    13c6:	0e 94 63 01 	call	0x2c6	; 0x2c6 <left_position_encoder_interrupt_init>
 right_position_encoder_interrupt_init();
    13ca:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <right_position_encoder_interrupt_init>
 sei();   //Enables the global interrupts
    13ce:	78 94       	sei
}
    13d0:	cf 91       	pop	r28
    13d2:	df 91       	pop	r29
    13d4:	08 95       	ret

000013d6 <main>:

/*****************************************************/
/**  				Main Function				  	**/
/*****************************************************/
int main(void)
{
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
	interrupt_switch_config();
    13de:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <interrupt_switch_config>
	while((PINE & 0x80) == 0x80); //switch is not pressed
    13e2:	ec e2       	ldi	r30, 0x2C	; 44
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	88 23       	and	r24, r24
    13ea:	dc f3       	brlt	.-10     	; 0x13e2 <main+0xc>
	init_devices();
    13ec:	0e 94 da 09 	call	0x13b4	; 0x13b4 <init_devices>
    13f0:	ff cf       	rjmp	.-2      	; 0x13f0 <main+0x1a>

000013f2 <__fixunssfsi>:
    13f2:	ef 92       	push	r14
    13f4:	ff 92       	push	r15
    13f6:	0f 93       	push	r16
    13f8:	1f 93       	push	r17
    13fa:	7b 01       	movw	r14, r22
    13fc:	8c 01       	movw	r16, r24
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	40 e0       	ldi	r20, 0x00	; 0
    1404:	5f e4       	ldi	r21, 0x4F	; 79
    1406:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <__gesf2>
    140a:	88 23       	and	r24, r24
    140c:	8c f0       	brlt	.+34     	; 0x1430 <__fixunssfsi+0x3e>
    140e:	c8 01       	movw	r24, r16
    1410:	b7 01       	movw	r22, r14
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	40 e0       	ldi	r20, 0x00	; 0
    1418:	5f e4       	ldi	r21, 0x4F	; 79
    141a:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <__subsf3>
    141e:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <__fixsfsi>
    1422:	9b 01       	movw	r18, r22
    1424:	ac 01       	movw	r20, r24
    1426:	20 50       	subi	r18, 0x00	; 0
    1428:	30 40       	sbci	r19, 0x00	; 0
    142a:	40 40       	sbci	r20, 0x00	; 0
    142c:	50 48       	sbci	r21, 0x80	; 128
    142e:	06 c0       	rjmp	.+12     	; 0x143c <__fixunssfsi+0x4a>
    1430:	c8 01       	movw	r24, r16
    1432:	b7 01       	movw	r22, r14
    1434:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <__fixsfsi>
    1438:	9b 01       	movw	r18, r22
    143a:	ac 01       	movw	r20, r24
    143c:	b9 01       	movw	r22, r18
    143e:	ca 01       	movw	r24, r20
    1440:	1f 91       	pop	r17
    1442:	0f 91       	pop	r16
    1444:	ff 90       	pop	r15
    1446:	ef 90       	pop	r14
    1448:	08 95       	ret

0000144a <_fpadd_parts>:
    144a:	a0 e0       	ldi	r26, 0x00	; 0
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	eb e2       	ldi	r30, 0x2B	; 43
    1450:	fa e0       	ldi	r31, 0x0A	; 10
    1452:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__prologue_saves__>
    1456:	dc 01       	movw	r26, r24
    1458:	2b 01       	movw	r4, r22
    145a:	fa 01       	movw	r30, r20
    145c:	9c 91       	ld	r25, X
    145e:	92 30       	cpi	r25, 0x02	; 2
    1460:	08 f4       	brcc	.+2      	; 0x1464 <_fpadd_parts+0x1a>
    1462:	39 c1       	rjmp	.+626    	; 0x16d6 <_fpadd_parts+0x28c>
    1464:	eb 01       	movw	r28, r22
    1466:	88 81       	ld	r24, Y
    1468:	82 30       	cpi	r24, 0x02	; 2
    146a:	08 f4       	brcc	.+2      	; 0x146e <_fpadd_parts+0x24>
    146c:	33 c1       	rjmp	.+614    	; 0x16d4 <_fpadd_parts+0x28a>
    146e:	94 30       	cpi	r25, 0x04	; 4
    1470:	69 f4       	brne	.+26     	; 0x148c <_fpadd_parts+0x42>
    1472:	84 30       	cpi	r24, 0x04	; 4
    1474:	09 f0       	breq	.+2      	; 0x1478 <_fpadd_parts+0x2e>
    1476:	2f c1       	rjmp	.+606    	; 0x16d6 <_fpadd_parts+0x28c>
    1478:	11 96       	adiw	r26, 0x01	; 1
    147a:	9c 91       	ld	r25, X
    147c:	11 97       	sbiw	r26, 0x01	; 1
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	98 17       	cp	r25, r24
    1482:	09 f4       	brne	.+2      	; 0x1486 <_fpadd_parts+0x3c>
    1484:	28 c1       	rjmp	.+592    	; 0x16d6 <_fpadd_parts+0x28c>
    1486:	a0 e0       	ldi	r26, 0x00	; 0
    1488:	b2 e0       	ldi	r27, 0x02	; 2
    148a:	25 c1       	rjmp	.+586    	; 0x16d6 <_fpadd_parts+0x28c>
    148c:	84 30       	cpi	r24, 0x04	; 4
    148e:	09 f4       	brne	.+2      	; 0x1492 <_fpadd_parts+0x48>
    1490:	21 c1       	rjmp	.+578    	; 0x16d4 <_fpadd_parts+0x28a>
    1492:	82 30       	cpi	r24, 0x02	; 2
    1494:	a9 f4       	brne	.+42     	; 0x14c0 <_fpadd_parts+0x76>
    1496:	92 30       	cpi	r25, 0x02	; 2
    1498:	09 f0       	breq	.+2      	; 0x149c <_fpadd_parts+0x52>
    149a:	1d c1       	rjmp	.+570    	; 0x16d6 <_fpadd_parts+0x28c>
    149c:	9a 01       	movw	r18, r20
    149e:	ad 01       	movw	r20, r26
    14a0:	88 e0       	ldi	r24, 0x08	; 8
    14a2:	ea 01       	movw	r28, r20
    14a4:	09 90       	ld	r0, Y+
    14a6:	ae 01       	movw	r20, r28
    14a8:	e9 01       	movw	r28, r18
    14aa:	09 92       	st	Y+, r0
    14ac:	9e 01       	movw	r18, r28
    14ae:	81 50       	subi	r24, 0x01	; 1
    14b0:	c1 f7       	brne	.-16     	; 0x14a2 <_fpadd_parts+0x58>
    14b2:	e2 01       	movw	r28, r4
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	11 96       	adiw	r26, 0x01	; 1
    14b8:	9c 91       	ld	r25, X
    14ba:	89 23       	and	r24, r25
    14bc:	81 83       	std	Z+1, r24	; 0x01
    14be:	08 c1       	rjmp	.+528    	; 0x16d0 <_fpadd_parts+0x286>
    14c0:	92 30       	cpi	r25, 0x02	; 2
    14c2:	09 f4       	brne	.+2      	; 0x14c6 <_fpadd_parts+0x7c>
    14c4:	07 c1       	rjmp	.+526    	; 0x16d4 <_fpadd_parts+0x28a>
    14c6:	12 96       	adiw	r26, 0x02	; 2
    14c8:	2d 90       	ld	r2, X+
    14ca:	3c 90       	ld	r3, X
    14cc:	13 97       	sbiw	r26, 0x03	; 3
    14ce:	eb 01       	movw	r28, r22
    14d0:	8a 81       	ldd	r24, Y+2	; 0x02
    14d2:	9b 81       	ldd	r25, Y+3	; 0x03
    14d4:	14 96       	adiw	r26, 0x04	; 4
    14d6:	ad 90       	ld	r10, X+
    14d8:	bd 90       	ld	r11, X+
    14da:	cd 90       	ld	r12, X+
    14dc:	dc 90       	ld	r13, X
    14de:	17 97       	sbiw	r26, 0x07	; 7
    14e0:	ec 80       	ldd	r14, Y+4	; 0x04
    14e2:	fd 80       	ldd	r15, Y+5	; 0x05
    14e4:	0e 81       	ldd	r16, Y+6	; 0x06
    14e6:	1f 81       	ldd	r17, Y+7	; 0x07
    14e8:	91 01       	movw	r18, r2
    14ea:	28 1b       	sub	r18, r24
    14ec:	39 0b       	sbc	r19, r25
    14ee:	b9 01       	movw	r22, r18
    14f0:	37 ff       	sbrs	r19, 7
    14f2:	04 c0       	rjmp	.+8      	; 0x14fc <_fpadd_parts+0xb2>
    14f4:	66 27       	eor	r22, r22
    14f6:	77 27       	eor	r23, r23
    14f8:	62 1b       	sub	r22, r18
    14fa:	73 0b       	sbc	r23, r19
    14fc:	60 32       	cpi	r22, 0x20	; 32
    14fe:	71 05       	cpc	r23, r1
    1500:	0c f0       	brlt	.+2      	; 0x1504 <_fpadd_parts+0xba>
    1502:	61 c0       	rjmp	.+194    	; 0x15c6 <_fpadd_parts+0x17c>
    1504:	12 16       	cp	r1, r18
    1506:	13 06       	cpc	r1, r19
    1508:	6c f5       	brge	.+90     	; 0x1564 <_fpadd_parts+0x11a>
    150a:	37 01       	movw	r6, r14
    150c:	48 01       	movw	r8, r16
    150e:	06 2e       	mov	r0, r22
    1510:	04 c0       	rjmp	.+8      	; 0x151a <_fpadd_parts+0xd0>
    1512:	96 94       	lsr	r9
    1514:	87 94       	ror	r8
    1516:	77 94       	ror	r7
    1518:	67 94       	ror	r6
    151a:	0a 94       	dec	r0
    151c:	d2 f7       	brpl	.-12     	; 0x1512 <_fpadd_parts+0xc8>
    151e:	21 e0       	ldi	r18, 0x01	; 1
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	40 e0       	ldi	r20, 0x00	; 0
    1524:	50 e0       	ldi	r21, 0x00	; 0
    1526:	04 c0       	rjmp	.+8      	; 0x1530 <_fpadd_parts+0xe6>
    1528:	22 0f       	add	r18, r18
    152a:	33 1f       	adc	r19, r19
    152c:	44 1f       	adc	r20, r20
    152e:	55 1f       	adc	r21, r21
    1530:	6a 95       	dec	r22
    1532:	d2 f7       	brpl	.-12     	; 0x1528 <_fpadd_parts+0xde>
    1534:	21 50       	subi	r18, 0x01	; 1
    1536:	30 40       	sbci	r19, 0x00	; 0
    1538:	40 40       	sbci	r20, 0x00	; 0
    153a:	50 40       	sbci	r21, 0x00	; 0
    153c:	2e 21       	and	r18, r14
    153e:	3f 21       	and	r19, r15
    1540:	40 23       	and	r20, r16
    1542:	51 23       	and	r21, r17
    1544:	21 15       	cp	r18, r1
    1546:	31 05       	cpc	r19, r1
    1548:	41 05       	cpc	r20, r1
    154a:	51 05       	cpc	r21, r1
    154c:	21 f0       	breq	.+8      	; 0x1556 <_fpadd_parts+0x10c>
    154e:	21 e0       	ldi	r18, 0x01	; 1
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	40 e0       	ldi	r20, 0x00	; 0
    1554:	50 e0       	ldi	r21, 0x00	; 0
    1556:	79 01       	movw	r14, r18
    1558:	8a 01       	movw	r16, r20
    155a:	e6 28       	or	r14, r6
    155c:	f7 28       	or	r15, r7
    155e:	08 29       	or	r16, r8
    1560:	19 29       	or	r17, r9
    1562:	3c c0       	rjmp	.+120    	; 0x15dc <_fpadd_parts+0x192>
    1564:	23 2b       	or	r18, r19
    1566:	d1 f1       	breq	.+116    	; 0x15dc <_fpadd_parts+0x192>
    1568:	26 0e       	add	r2, r22
    156a:	37 1e       	adc	r3, r23
    156c:	35 01       	movw	r6, r10
    156e:	46 01       	movw	r8, r12
    1570:	06 2e       	mov	r0, r22
    1572:	04 c0       	rjmp	.+8      	; 0x157c <_fpadd_parts+0x132>
    1574:	96 94       	lsr	r9
    1576:	87 94       	ror	r8
    1578:	77 94       	ror	r7
    157a:	67 94       	ror	r6
    157c:	0a 94       	dec	r0
    157e:	d2 f7       	brpl	.-12     	; 0x1574 <_fpadd_parts+0x12a>
    1580:	21 e0       	ldi	r18, 0x01	; 1
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	40 e0       	ldi	r20, 0x00	; 0
    1586:	50 e0       	ldi	r21, 0x00	; 0
    1588:	04 c0       	rjmp	.+8      	; 0x1592 <_fpadd_parts+0x148>
    158a:	22 0f       	add	r18, r18
    158c:	33 1f       	adc	r19, r19
    158e:	44 1f       	adc	r20, r20
    1590:	55 1f       	adc	r21, r21
    1592:	6a 95       	dec	r22
    1594:	d2 f7       	brpl	.-12     	; 0x158a <_fpadd_parts+0x140>
    1596:	21 50       	subi	r18, 0x01	; 1
    1598:	30 40       	sbci	r19, 0x00	; 0
    159a:	40 40       	sbci	r20, 0x00	; 0
    159c:	50 40       	sbci	r21, 0x00	; 0
    159e:	2a 21       	and	r18, r10
    15a0:	3b 21       	and	r19, r11
    15a2:	4c 21       	and	r20, r12
    15a4:	5d 21       	and	r21, r13
    15a6:	21 15       	cp	r18, r1
    15a8:	31 05       	cpc	r19, r1
    15aa:	41 05       	cpc	r20, r1
    15ac:	51 05       	cpc	r21, r1
    15ae:	21 f0       	breq	.+8      	; 0x15b8 <_fpadd_parts+0x16e>
    15b0:	21 e0       	ldi	r18, 0x01	; 1
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	40 e0       	ldi	r20, 0x00	; 0
    15b6:	50 e0       	ldi	r21, 0x00	; 0
    15b8:	59 01       	movw	r10, r18
    15ba:	6a 01       	movw	r12, r20
    15bc:	a6 28       	or	r10, r6
    15be:	b7 28       	or	r11, r7
    15c0:	c8 28       	or	r12, r8
    15c2:	d9 28       	or	r13, r9
    15c4:	0b c0       	rjmp	.+22     	; 0x15dc <_fpadd_parts+0x192>
    15c6:	82 15       	cp	r24, r2
    15c8:	93 05       	cpc	r25, r3
    15ca:	2c f0       	brlt	.+10     	; 0x15d6 <_fpadd_parts+0x18c>
    15cc:	1c 01       	movw	r2, r24
    15ce:	aa 24       	eor	r10, r10
    15d0:	bb 24       	eor	r11, r11
    15d2:	65 01       	movw	r12, r10
    15d4:	03 c0       	rjmp	.+6      	; 0x15dc <_fpadd_parts+0x192>
    15d6:	ee 24       	eor	r14, r14
    15d8:	ff 24       	eor	r15, r15
    15da:	87 01       	movw	r16, r14
    15dc:	11 96       	adiw	r26, 0x01	; 1
    15de:	9c 91       	ld	r25, X
    15e0:	d2 01       	movw	r26, r4
    15e2:	11 96       	adiw	r26, 0x01	; 1
    15e4:	8c 91       	ld	r24, X
    15e6:	98 17       	cp	r25, r24
    15e8:	09 f4       	brne	.+2      	; 0x15ec <_fpadd_parts+0x1a2>
    15ea:	45 c0       	rjmp	.+138    	; 0x1676 <_fpadd_parts+0x22c>
    15ec:	99 23       	and	r25, r25
    15ee:	39 f0       	breq	.+14     	; 0x15fe <_fpadd_parts+0x1b4>
    15f0:	a8 01       	movw	r20, r16
    15f2:	97 01       	movw	r18, r14
    15f4:	2a 19       	sub	r18, r10
    15f6:	3b 09       	sbc	r19, r11
    15f8:	4c 09       	sbc	r20, r12
    15fa:	5d 09       	sbc	r21, r13
    15fc:	06 c0       	rjmp	.+12     	; 0x160a <_fpadd_parts+0x1c0>
    15fe:	a6 01       	movw	r20, r12
    1600:	95 01       	movw	r18, r10
    1602:	2e 19       	sub	r18, r14
    1604:	3f 09       	sbc	r19, r15
    1606:	40 0b       	sbc	r20, r16
    1608:	51 0b       	sbc	r21, r17
    160a:	57 fd       	sbrc	r21, 7
    160c:	08 c0       	rjmp	.+16     	; 0x161e <_fpadd_parts+0x1d4>
    160e:	11 82       	std	Z+1, r1	; 0x01
    1610:	33 82       	std	Z+3, r3	; 0x03
    1612:	22 82       	std	Z+2, r2	; 0x02
    1614:	24 83       	std	Z+4, r18	; 0x04
    1616:	35 83       	std	Z+5, r19	; 0x05
    1618:	46 83       	std	Z+6, r20	; 0x06
    161a:	57 83       	std	Z+7, r21	; 0x07
    161c:	1d c0       	rjmp	.+58     	; 0x1658 <_fpadd_parts+0x20e>
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	81 83       	std	Z+1, r24	; 0x01
    1622:	33 82       	std	Z+3, r3	; 0x03
    1624:	22 82       	std	Z+2, r2	; 0x02
    1626:	88 27       	eor	r24, r24
    1628:	99 27       	eor	r25, r25
    162a:	dc 01       	movw	r26, r24
    162c:	82 1b       	sub	r24, r18
    162e:	93 0b       	sbc	r25, r19
    1630:	a4 0b       	sbc	r26, r20
    1632:	b5 0b       	sbc	r27, r21
    1634:	84 83       	std	Z+4, r24	; 0x04
    1636:	95 83       	std	Z+5, r25	; 0x05
    1638:	a6 83       	std	Z+6, r26	; 0x06
    163a:	b7 83       	std	Z+7, r27	; 0x07
    163c:	0d c0       	rjmp	.+26     	; 0x1658 <_fpadd_parts+0x20e>
    163e:	22 0f       	add	r18, r18
    1640:	33 1f       	adc	r19, r19
    1642:	44 1f       	adc	r20, r20
    1644:	55 1f       	adc	r21, r21
    1646:	24 83       	std	Z+4, r18	; 0x04
    1648:	35 83       	std	Z+5, r19	; 0x05
    164a:	46 83       	std	Z+6, r20	; 0x06
    164c:	57 83       	std	Z+7, r21	; 0x07
    164e:	82 81       	ldd	r24, Z+2	; 0x02
    1650:	93 81       	ldd	r25, Z+3	; 0x03
    1652:	01 97       	sbiw	r24, 0x01	; 1
    1654:	93 83       	std	Z+3, r25	; 0x03
    1656:	82 83       	std	Z+2, r24	; 0x02
    1658:	24 81       	ldd	r18, Z+4	; 0x04
    165a:	35 81       	ldd	r19, Z+5	; 0x05
    165c:	46 81       	ldd	r20, Z+6	; 0x06
    165e:	57 81       	ldd	r21, Z+7	; 0x07
    1660:	da 01       	movw	r26, r20
    1662:	c9 01       	movw	r24, r18
    1664:	01 97       	sbiw	r24, 0x01	; 1
    1666:	a1 09       	sbc	r26, r1
    1668:	b1 09       	sbc	r27, r1
    166a:	8f 5f       	subi	r24, 0xFF	; 255
    166c:	9f 4f       	sbci	r25, 0xFF	; 255
    166e:	af 4f       	sbci	r26, 0xFF	; 255
    1670:	bf 43       	sbci	r27, 0x3F	; 63
    1672:	28 f3       	brcs	.-54     	; 0x163e <_fpadd_parts+0x1f4>
    1674:	0b c0       	rjmp	.+22     	; 0x168c <_fpadd_parts+0x242>
    1676:	91 83       	std	Z+1, r25	; 0x01
    1678:	33 82       	std	Z+3, r3	; 0x03
    167a:	22 82       	std	Z+2, r2	; 0x02
    167c:	ea 0c       	add	r14, r10
    167e:	fb 1c       	adc	r15, r11
    1680:	0c 1d       	adc	r16, r12
    1682:	1d 1d       	adc	r17, r13
    1684:	e4 82       	std	Z+4, r14	; 0x04
    1686:	f5 82       	std	Z+5, r15	; 0x05
    1688:	06 83       	std	Z+6, r16	; 0x06
    168a:	17 83       	std	Z+7, r17	; 0x07
    168c:	83 e0       	ldi	r24, 0x03	; 3
    168e:	80 83       	st	Z, r24
    1690:	24 81       	ldd	r18, Z+4	; 0x04
    1692:	35 81       	ldd	r19, Z+5	; 0x05
    1694:	46 81       	ldd	r20, Z+6	; 0x06
    1696:	57 81       	ldd	r21, Z+7	; 0x07
    1698:	57 ff       	sbrs	r21, 7
    169a:	1a c0       	rjmp	.+52     	; 0x16d0 <_fpadd_parts+0x286>
    169c:	c9 01       	movw	r24, r18
    169e:	aa 27       	eor	r26, r26
    16a0:	97 fd       	sbrc	r25, 7
    16a2:	a0 95       	com	r26
    16a4:	ba 2f       	mov	r27, r26
    16a6:	81 70       	andi	r24, 0x01	; 1
    16a8:	90 70       	andi	r25, 0x00	; 0
    16aa:	a0 70       	andi	r26, 0x00	; 0
    16ac:	b0 70       	andi	r27, 0x00	; 0
    16ae:	56 95       	lsr	r21
    16b0:	47 95       	ror	r20
    16b2:	37 95       	ror	r19
    16b4:	27 95       	ror	r18
    16b6:	82 2b       	or	r24, r18
    16b8:	93 2b       	or	r25, r19
    16ba:	a4 2b       	or	r26, r20
    16bc:	b5 2b       	or	r27, r21
    16be:	84 83       	std	Z+4, r24	; 0x04
    16c0:	95 83       	std	Z+5, r25	; 0x05
    16c2:	a6 83       	std	Z+6, r26	; 0x06
    16c4:	b7 83       	std	Z+7, r27	; 0x07
    16c6:	82 81       	ldd	r24, Z+2	; 0x02
    16c8:	93 81       	ldd	r25, Z+3	; 0x03
    16ca:	01 96       	adiw	r24, 0x01	; 1
    16cc:	93 83       	std	Z+3, r25	; 0x03
    16ce:	82 83       	std	Z+2, r24	; 0x02
    16d0:	df 01       	movw	r26, r30
    16d2:	01 c0       	rjmp	.+2      	; 0x16d6 <_fpadd_parts+0x28c>
    16d4:	d2 01       	movw	r26, r4
    16d6:	cd 01       	movw	r24, r26
    16d8:	cd b7       	in	r28, 0x3d	; 61
    16da:	de b7       	in	r29, 0x3e	; 62
    16dc:	e2 e1       	ldi	r30, 0x12	; 18
    16de:	0c 94 e3 10 	jmp	0x21c6	; 0x21c6 <__epilogue_restores__>

000016e2 <__subsf3>:
    16e2:	a0 e2       	ldi	r26, 0x20	; 32
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	e7 e7       	ldi	r30, 0x77	; 119
    16e8:	fb e0       	ldi	r31, 0x0B	; 11
    16ea:	0c 94 d3 10 	jmp	0x21a6	; 0x21a6 <__prologue_saves__+0x18>
    16ee:	69 83       	std	Y+1, r22	; 0x01
    16f0:	7a 83       	std	Y+2, r23	; 0x02
    16f2:	8b 83       	std	Y+3, r24	; 0x03
    16f4:	9c 83       	std	Y+4, r25	; 0x04
    16f6:	2d 83       	std	Y+5, r18	; 0x05
    16f8:	3e 83       	std	Y+6, r19	; 0x06
    16fa:	4f 83       	std	Y+7, r20	; 0x07
    16fc:	58 87       	std	Y+8, r21	; 0x08
    16fe:	e9 e0       	ldi	r30, 0x09	; 9
    1700:	ee 2e       	mov	r14, r30
    1702:	f1 2c       	mov	r15, r1
    1704:	ec 0e       	add	r14, r28
    1706:	fd 1e       	adc	r15, r29
    1708:	ce 01       	movw	r24, r28
    170a:	01 96       	adiw	r24, 0x01	; 1
    170c:	b7 01       	movw	r22, r14
    170e:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__unpack_f>
    1712:	8e 01       	movw	r16, r28
    1714:	0f 5e       	subi	r16, 0xEF	; 239
    1716:	1f 4f       	sbci	r17, 0xFF	; 255
    1718:	ce 01       	movw	r24, r28
    171a:	05 96       	adiw	r24, 0x05	; 5
    171c:	b8 01       	movw	r22, r16
    171e:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__unpack_f>
    1722:	8a 89       	ldd	r24, Y+18	; 0x12
    1724:	91 e0       	ldi	r25, 0x01	; 1
    1726:	89 27       	eor	r24, r25
    1728:	8a 8b       	std	Y+18, r24	; 0x12
    172a:	c7 01       	movw	r24, r14
    172c:	b8 01       	movw	r22, r16
    172e:	ae 01       	movw	r20, r28
    1730:	47 5e       	subi	r20, 0xE7	; 231
    1732:	5f 4f       	sbci	r21, 0xFF	; 255
    1734:	0e 94 25 0a 	call	0x144a	; 0x144a <_fpadd_parts>
    1738:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <__pack_f>
    173c:	a0 96       	adiw	r28, 0x20	; 32
    173e:	e6 e0       	ldi	r30, 0x06	; 6
    1740:	0c 94 ef 10 	jmp	0x21de	; 0x21de <__epilogue_restores__+0x18>

00001744 <__addsf3>:
    1744:	a0 e2       	ldi	r26, 0x20	; 32
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	e8 ea       	ldi	r30, 0xA8	; 168
    174a:	fb e0       	ldi	r31, 0x0B	; 11
    174c:	0c 94 d3 10 	jmp	0x21a6	; 0x21a6 <__prologue_saves__+0x18>
    1750:	69 83       	std	Y+1, r22	; 0x01
    1752:	7a 83       	std	Y+2, r23	; 0x02
    1754:	8b 83       	std	Y+3, r24	; 0x03
    1756:	9c 83       	std	Y+4, r25	; 0x04
    1758:	2d 83       	std	Y+5, r18	; 0x05
    175a:	3e 83       	std	Y+6, r19	; 0x06
    175c:	4f 83       	std	Y+7, r20	; 0x07
    175e:	58 87       	std	Y+8, r21	; 0x08
    1760:	f9 e0       	ldi	r31, 0x09	; 9
    1762:	ef 2e       	mov	r14, r31
    1764:	f1 2c       	mov	r15, r1
    1766:	ec 0e       	add	r14, r28
    1768:	fd 1e       	adc	r15, r29
    176a:	ce 01       	movw	r24, r28
    176c:	01 96       	adiw	r24, 0x01	; 1
    176e:	b7 01       	movw	r22, r14
    1770:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__unpack_f>
    1774:	8e 01       	movw	r16, r28
    1776:	0f 5e       	subi	r16, 0xEF	; 239
    1778:	1f 4f       	sbci	r17, 0xFF	; 255
    177a:	ce 01       	movw	r24, r28
    177c:	05 96       	adiw	r24, 0x05	; 5
    177e:	b8 01       	movw	r22, r16
    1780:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__unpack_f>
    1784:	c7 01       	movw	r24, r14
    1786:	b8 01       	movw	r22, r16
    1788:	ae 01       	movw	r20, r28
    178a:	47 5e       	subi	r20, 0xE7	; 231
    178c:	5f 4f       	sbci	r21, 0xFF	; 255
    178e:	0e 94 25 0a 	call	0x144a	; 0x144a <_fpadd_parts>
    1792:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <__pack_f>
    1796:	a0 96       	adiw	r28, 0x20	; 32
    1798:	e6 e0       	ldi	r30, 0x06	; 6
    179a:	0c 94 ef 10 	jmp	0x21de	; 0x21de <__epilogue_restores__+0x18>

0000179e <__mulsf3>:
    179e:	a0 e2       	ldi	r26, 0x20	; 32
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	e5 ed       	ldi	r30, 0xD5	; 213
    17a4:	fb e0       	ldi	r31, 0x0B	; 11
    17a6:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__prologue_saves__>
    17aa:	69 83       	std	Y+1, r22	; 0x01
    17ac:	7a 83       	std	Y+2, r23	; 0x02
    17ae:	8b 83       	std	Y+3, r24	; 0x03
    17b0:	9c 83       	std	Y+4, r25	; 0x04
    17b2:	2d 83       	std	Y+5, r18	; 0x05
    17b4:	3e 83       	std	Y+6, r19	; 0x06
    17b6:	4f 83       	std	Y+7, r20	; 0x07
    17b8:	58 87       	std	Y+8, r21	; 0x08
    17ba:	ce 01       	movw	r24, r28
    17bc:	01 96       	adiw	r24, 0x01	; 1
    17be:	be 01       	movw	r22, r28
    17c0:	67 5f       	subi	r22, 0xF7	; 247
    17c2:	7f 4f       	sbci	r23, 0xFF	; 255
    17c4:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__unpack_f>
    17c8:	ce 01       	movw	r24, r28
    17ca:	05 96       	adiw	r24, 0x05	; 5
    17cc:	be 01       	movw	r22, r28
    17ce:	6f 5e       	subi	r22, 0xEF	; 239
    17d0:	7f 4f       	sbci	r23, 0xFF	; 255
    17d2:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__unpack_f>
    17d6:	99 85       	ldd	r25, Y+9	; 0x09
    17d8:	92 30       	cpi	r25, 0x02	; 2
    17da:	88 f0       	brcs	.+34     	; 0x17fe <__mulsf3+0x60>
    17dc:	89 89       	ldd	r24, Y+17	; 0x11
    17de:	82 30       	cpi	r24, 0x02	; 2
    17e0:	c8 f0       	brcs	.+50     	; 0x1814 <__mulsf3+0x76>
    17e2:	94 30       	cpi	r25, 0x04	; 4
    17e4:	19 f4       	brne	.+6      	; 0x17ec <__mulsf3+0x4e>
    17e6:	82 30       	cpi	r24, 0x02	; 2
    17e8:	51 f4       	brne	.+20     	; 0x17fe <__mulsf3+0x60>
    17ea:	04 c0       	rjmp	.+8      	; 0x17f4 <__mulsf3+0x56>
    17ec:	84 30       	cpi	r24, 0x04	; 4
    17ee:	29 f4       	brne	.+10     	; 0x17fa <__mulsf3+0x5c>
    17f0:	92 30       	cpi	r25, 0x02	; 2
    17f2:	81 f4       	brne	.+32     	; 0x1814 <__mulsf3+0x76>
    17f4:	80 e0       	ldi	r24, 0x00	; 0
    17f6:	92 e0       	ldi	r25, 0x02	; 2
    17f8:	c6 c0       	rjmp	.+396    	; 0x1986 <__mulsf3+0x1e8>
    17fa:	92 30       	cpi	r25, 0x02	; 2
    17fc:	49 f4       	brne	.+18     	; 0x1810 <__mulsf3+0x72>
    17fe:	20 e0       	ldi	r18, 0x00	; 0
    1800:	9a 85       	ldd	r25, Y+10	; 0x0a
    1802:	8a 89       	ldd	r24, Y+18	; 0x12
    1804:	98 13       	cpse	r25, r24
    1806:	21 e0       	ldi	r18, 0x01	; 1
    1808:	2a 87       	std	Y+10, r18	; 0x0a
    180a:	ce 01       	movw	r24, r28
    180c:	09 96       	adiw	r24, 0x09	; 9
    180e:	bb c0       	rjmp	.+374    	; 0x1986 <__mulsf3+0x1e8>
    1810:	82 30       	cpi	r24, 0x02	; 2
    1812:	49 f4       	brne	.+18     	; 0x1826 <__mulsf3+0x88>
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	9a 85       	ldd	r25, Y+10	; 0x0a
    1818:	8a 89       	ldd	r24, Y+18	; 0x12
    181a:	98 13       	cpse	r25, r24
    181c:	21 e0       	ldi	r18, 0x01	; 1
    181e:	2a 8b       	std	Y+18, r18	; 0x12
    1820:	ce 01       	movw	r24, r28
    1822:	41 96       	adiw	r24, 0x11	; 17
    1824:	b0 c0       	rjmp	.+352    	; 0x1986 <__mulsf3+0x1e8>
    1826:	2d 84       	ldd	r2, Y+13	; 0x0d
    1828:	3e 84       	ldd	r3, Y+14	; 0x0e
    182a:	4f 84       	ldd	r4, Y+15	; 0x0f
    182c:	58 88       	ldd	r5, Y+16	; 0x10
    182e:	6d 88       	ldd	r6, Y+21	; 0x15
    1830:	7e 88       	ldd	r7, Y+22	; 0x16
    1832:	8f 88       	ldd	r8, Y+23	; 0x17
    1834:	98 8c       	ldd	r9, Y+24	; 0x18
    1836:	ee 24       	eor	r14, r14
    1838:	ff 24       	eor	r15, r15
    183a:	87 01       	movw	r16, r14
    183c:	aa 24       	eor	r10, r10
    183e:	bb 24       	eor	r11, r11
    1840:	65 01       	movw	r12, r10
    1842:	40 e0       	ldi	r20, 0x00	; 0
    1844:	50 e0       	ldi	r21, 0x00	; 0
    1846:	60 e0       	ldi	r22, 0x00	; 0
    1848:	70 e0       	ldi	r23, 0x00	; 0
    184a:	e0 e0       	ldi	r30, 0x00	; 0
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	c1 01       	movw	r24, r2
    1850:	81 70       	andi	r24, 0x01	; 1
    1852:	90 70       	andi	r25, 0x00	; 0
    1854:	89 2b       	or	r24, r25
    1856:	e9 f0       	breq	.+58     	; 0x1892 <__mulsf3+0xf4>
    1858:	e6 0c       	add	r14, r6
    185a:	f7 1c       	adc	r15, r7
    185c:	08 1d       	adc	r16, r8
    185e:	19 1d       	adc	r17, r9
    1860:	9a 01       	movw	r18, r20
    1862:	ab 01       	movw	r20, r22
    1864:	2a 0d       	add	r18, r10
    1866:	3b 1d       	adc	r19, r11
    1868:	4c 1d       	adc	r20, r12
    186a:	5d 1d       	adc	r21, r13
    186c:	80 e0       	ldi	r24, 0x00	; 0
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	a0 e0       	ldi	r26, 0x00	; 0
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	e6 14       	cp	r14, r6
    1876:	f7 04       	cpc	r15, r7
    1878:	08 05       	cpc	r16, r8
    187a:	19 05       	cpc	r17, r9
    187c:	20 f4       	brcc	.+8      	; 0x1886 <__mulsf3+0xe8>
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	a0 e0       	ldi	r26, 0x00	; 0
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	ba 01       	movw	r22, r20
    1888:	a9 01       	movw	r20, r18
    188a:	48 0f       	add	r20, r24
    188c:	59 1f       	adc	r21, r25
    188e:	6a 1f       	adc	r22, r26
    1890:	7b 1f       	adc	r23, r27
    1892:	aa 0c       	add	r10, r10
    1894:	bb 1c       	adc	r11, r11
    1896:	cc 1c       	adc	r12, r12
    1898:	dd 1c       	adc	r13, r13
    189a:	97 fe       	sbrs	r9, 7
    189c:	08 c0       	rjmp	.+16     	; 0x18ae <__mulsf3+0x110>
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	a0 e0       	ldi	r26, 0x00	; 0
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	a8 2a       	or	r10, r24
    18a8:	b9 2a       	or	r11, r25
    18aa:	ca 2a       	or	r12, r26
    18ac:	db 2a       	or	r13, r27
    18ae:	31 96       	adiw	r30, 0x01	; 1
    18b0:	e0 32       	cpi	r30, 0x20	; 32
    18b2:	f1 05       	cpc	r31, r1
    18b4:	49 f0       	breq	.+18     	; 0x18c8 <__mulsf3+0x12a>
    18b6:	66 0c       	add	r6, r6
    18b8:	77 1c       	adc	r7, r7
    18ba:	88 1c       	adc	r8, r8
    18bc:	99 1c       	adc	r9, r9
    18be:	56 94       	lsr	r5
    18c0:	47 94       	ror	r4
    18c2:	37 94       	ror	r3
    18c4:	27 94       	ror	r2
    18c6:	c3 cf       	rjmp	.-122    	; 0x184e <__mulsf3+0xb0>
    18c8:	fa 85       	ldd	r31, Y+10	; 0x0a
    18ca:	ea 89       	ldd	r30, Y+18	; 0x12
    18cc:	2b 89       	ldd	r18, Y+19	; 0x13
    18ce:	3c 89       	ldd	r19, Y+20	; 0x14
    18d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    18d2:	9c 85       	ldd	r25, Y+12	; 0x0c
    18d4:	28 0f       	add	r18, r24
    18d6:	39 1f       	adc	r19, r25
    18d8:	2e 5f       	subi	r18, 0xFE	; 254
    18da:	3f 4f       	sbci	r19, 0xFF	; 255
    18dc:	17 c0       	rjmp	.+46     	; 0x190c <__mulsf3+0x16e>
    18de:	ca 01       	movw	r24, r20
    18e0:	81 70       	andi	r24, 0x01	; 1
    18e2:	90 70       	andi	r25, 0x00	; 0
    18e4:	89 2b       	or	r24, r25
    18e6:	61 f0       	breq	.+24     	; 0x1900 <__mulsf3+0x162>
    18e8:	16 95       	lsr	r17
    18ea:	07 95       	ror	r16
    18ec:	f7 94       	ror	r15
    18ee:	e7 94       	ror	r14
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	a0 e0       	ldi	r26, 0x00	; 0
    18f6:	b0 e8       	ldi	r27, 0x80	; 128
    18f8:	e8 2a       	or	r14, r24
    18fa:	f9 2a       	or	r15, r25
    18fc:	0a 2b       	or	r16, r26
    18fe:	1b 2b       	or	r17, r27
    1900:	76 95       	lsr	r23
    1902:	67 95       	ror	r22
    1904:	57 95       	ror	r21
    1906:	47 95       	ror	r20
    1908:	2f 5f       	subi	r18, 0xFF	; 255
    190a:	3f 4f       	sbci	r19, 0xFF	; 255
    190c:	77 fd       	sbrc	r23, 7
    190e:	e7 cf       	rjmp	.-50     	; 0x18de <__mulsf3+0x140>
    1910:	0c c0       	rjmp	.+24     	; 0x192a <__mulsf3+0x18c>
    1912:	44 0f       	add	r20, r20
    1914:	55 1f       	adc	r21, r21
    1916:	66 1f       	adc	r22, r22
    1918:	77 1f       	adc	r23, r23
    191a:	17 fd       	sbrc	r17, 7
    191c:	41 60       	ori	r20, 0x01	; 1
    191e:	ee 0c       	add	r14, r14
    1920:	ff 1c       	adc	r15, r15
    1922:	00 1f       	adc	r16, r16
    1924:	11 1f       	adc	r17, r17
    1926:	21 50       	subi	r18, 0x01	; 1
    1928:	30 40       	sbci	r19, 0x00	; 0
    192a:	40 30       	cpi	r20, 0x00	; 0
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	59 07       	cpc	r21, r25
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	69 07       	cpc	r22, r25
    1934:	90 e4       	ldi	r25, 0x40	; 64
    1936:	79 07       	cpc	r23, r25
    1938:	60 f3       	brcs	.-40     	; 0x1912 <__mulsf3+0x174>
    193a:	2b 8f       	std	Y+27, r18	; 0x1b
    193c:	3c 8f       	std	Y+28, r19	; 0x1c
    193e:	db 01       	movw	r26, r22
    1940:	ca 01       	movw	r24, r20
    1942:	8f 77       	andi	r24, 0x7F	; 127
    1944:	90 70       	andi	r25, 0x00	; 0
    1946:	a0 70       	andi	r26, 0x00	; 0
    1948:	b0 70       	andi	r27, 0x00	; 0
    194a:	80 34       	cpi	r24, 0x40	; 64
    194c:	91 05       	cpc	r25, r1
    194e:	a1 05       	cpc	r26, r1
    1950:	b1 05       	cpc	r27, r1
    1952:	61 f4       	brne	.+24     	; 0x196c <__mulsf3+0x1ce>
    1954:	47 fd       	sbrc	r20, 7
    1956:	0a c0       	rjmp	.+20     	; 0x196c <__mulsf3+0x1ce>
    1958:	e1 14       	cp	r14, r1
    195a:	f1 04       	cpc	r15, r1
    195c:	01 05       	cpc	r16, r1
    195e:	11 05       	cpc	r17, r1
    1960:	29 f0       	breq	.+10     	; 0x196c <__mulsf3+0x1ce>
    1962:	40 5c       	subi	r20, 0xC0	; 192
    1964:	5f 4f       	sbci	r21, 0xFF	; 255
    1966:	6f 4f       	sbci	r22, 0xFF	; 255
    1968:	7f 4f       	sbci	r23, 0xFF	; 255
    196a:	40 78       	andi	r20, 0x80	; 128
    196c:	1a 8e       	std	Y+26, r1	; 0x1a
    196e:	fe 17       	cp	r31, r30
    1970:	11 f0       	breq	.+4      	; 0x1976 <__mulsf3+0x1d8>
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	8a 8f       	std	Y+26, r24	; 0x1a
    1976:	4d 8f       	std	Y+29, r20	; 0x1d
    1978:	5e 8f       	std	Y+30, r21	; 0x1e
    197a:	6f 8f       	std	Y+31, r22	; 0x1f
    197c:	78 a3       	std	Y+32, r23	; 0x20
    197e:	83 e0       	ldi	r24, 0x03	; 3
    1980:	89 8f       	std	Y+25, r24	; 0x19
    1982:	ce 01       	movw	r24, r28
    1984:	49 96       	adiw	r24, 0x19	; 25
    1986:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <__pack_f>
    198a:	a0 96       	adiw	r28, 0x20	; 32
    198c:	e2 e1       	ldi	r30, 0x12	; 18
    198e:	0c 94 e3 10 	jmp	0x21c6	; 0x21c6 <__epilogue_restores__>

00001992 <__divsf3>:
    1992:	a8 e1       	ldi	r26, 0x18	; 24
    1994:	b0 e0       	ldi	r27, 0x00	; 0
    1996:	ef ec       	ldi	r30, 0xCF	; 207
    1998:	fc e0       	ldi	r31, 0x0C	; 12
    199a:	0c 94 cf 10 	jmp	0x219e	; 0x219e <__prologue_saves__+0x10>
    199e:	69 83       	std	Y+1, r22	; 0x01
    19a0:	7a 83       	std	Y+2, r23	; 0x02
    19a2:	8b 83       	std	Y+3, r24	; 0x03
    19a4:	9c 83       	std	Y+4, r25	; 0x04
    19a6:	2d 83       	std	Y+5, r18	; 0x05
    19a8:	3e 83       	std	Y+6, r19	; 0x06
    19aa:	4f 83       	std	Y+7, r20	; 0x07
    19ac:	58 87       	std	Y+8, r21	; 0x08
    19ae:	b9 e0       	ldi	r27, 0x09	; 9
    19b0:	eb 2e       	mov	r14, r27
    19b2:	f1 2c       	mov	r15, r1
    19b4:	ec 0e       	add	r14, r28
    19b6:	fd 1e       	adc	r15, r29
    19b8:	ce 01       	movw	r24, r28
    19ba:	01 96       	adiw	r24, 0x01	; 1
    19bc:	b7 01       	movw	r22, r14
    19be:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__unpack_f>
    19c2:	8e 01       	movw	r16, r28
    19c4:	0f 5e       	subi	r16, 0xEF	; 239
    19c6:	1f 4f       	sbci	r17, 0xFF	; 255
    19c8:	ce 01       	movw	r24, r28
    19ca:	05 96       	adiw	r24, 0x05	; 5
    19cc:	b8 01       	movw	r22, r16
    19ce:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__unpack_f>
    19d2:	29 85       	ldd	r18, Y+9	; 0x09
    19d4:	22 30       	cpi	r18, 0x02	; 2
    19d6:	08 f4       	brcc	.+2      	; 0x19da <__divsf3+0x48>
    19d8:	7e c0       	rjmp	.+252    	; 0x1ad6 <__divsf3+0x144>
    19da:	39 89       	ldd	r19, Y+17	; 0x11
    19dc:	32 30       	cpi	r19, 0x02	; 2
    19de:	10 f4       	brcc	.+4      	; 0x19e4 <__divsf3+0x52>
    19e0:	b8 01       	movw	r22, r16
    19e2:	7c c0       	rjmp	.+248    	; 0x1adc <__divsf3+0x14a>
    19e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    19e6:	9a 89       	ldd	r25, Y+18	; 0x12
    19e8:	89 27       	eor	r24, r25
    19ea:	8a 87       	std	Y+10, r24	; 0x0a
    19ec:	24 30       	cpi	r18, 0x04	; 4
    19ee:	11 f0       	breq	.+4      	; 0x19f4 <__divsf3+0x62>
    19f0:	22 30       	cpi	r18, 0x02	; 2
    19f2:	31 f4       	brne	.+12     	; 0x1a00 <__divsf3+0x6e>
    19f4:	23 17       	cp	r18, r19
    19f6:	09 f0       	breq	.+2      	; 0x19fa <__divsf3+0x68>
    19f8:	6e c0       	rjmp	.+220    	; 0x1ad6 <__divsf3+0x144>
    19fa:	60 e0       	ldi	r22, 0x00	; 0
    19fc:	72 e0       	ldi	r23, 0x02	; 2
    19fe:	6e c0       	rjmp	.+220    	; 0x1adc <__divsf3+0x14a>
    1a00:	34 30       	cpi	r19, 0x04	; 4
    1a02:	39 f4       	brne	.+14     	; 0x1a12 <__divsf3+0x80>
    1a04:	1d 86       	std	Y+13, r1	; 0x0d
    1a06:	1e 86       	std	Y+14, r1	; 0x0e
    1a08:	1f 86       	std	Y+15, r1	; 0x0f
    1a0a:	18 8a       	std	Y+16, r1	; 0x10
    1a0c:	1c 86       	std	Y+12, r1	; 0x0c
    1a0e:	1b 86       	std	Y+11, r1	; 0x0b
    1a10:	04 c0       	rjmp	.+8      	; 0x1a1a <__divsf3+0x88>
    1a12:	32 30       	cpi	r19, 0x02	; 2
    1a14:	21 f4       	brne	.+8      	; 0x1a1e <__divsf3+0x8c>
    1a16:	84 e0       	ldi	r24, 0x04	; 4
    1a18:	89 87       	std	Y+9, r24	; 0x09
    1a1a:	b7 01       	movw	r22, r14
    1a1c:	5f c0       	rjmp	.+190    	; 0x1adc <__divsf3+0x14a>
    1a1e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1a20:	3c 85       	ldd	r19, Y+12	; 0x0c
    1a22:	8b 89       	ldd	r24, Y+19	; 0x13
    1a24:	9c 89       	ldd	r25, Y+20	; 0x14
    1a26:	28 1b       	sub	r18, r24
    1a28:	39 0b       	sbc	r19, r25
    1a2a:	3c 87       	std	Y+12, r19	; 0x0c
    1a2c:	2b 87       	std	Y+11, r18	; 0x0b
    1a2e:	ed 84       	ldd	r14, Y+13	; 0x0d
    1a30:	fe 84       	ldd	r15, Y+14	; 0x0e
    1a32:	0f 85       	ldd	r16, Y+15	; 0x0f
    1a34:	18 89       	ldd	r17, Y+16	; 0x10
    1a36:	ad 88       	ldd	r10, Y+21	; 0x15
    1a38:	be 88       	ldd	r11, Y+22	; 0x16
    1a3a:	cf 88       	ldd	r12, Y+23	; 0x17
    1a3c:	d8 8c       	ldd	r13, Y+24	; 0x18
    1a3e:	ea 14       	cp	r14, r10
    1a40:	fb 04       	cpc	r15, r11
    1a42:	0c 05       	cpc	r16, r12
    1a44:	1d 05       	cpc	r17, r13
    1a46:	40 f4       	brcc	.+16     	; 0x1a58 <__divsf3+0xc6>
    1a48:	ee 0c       	add	r14, r14
    1a4a:	ff 1c       	adc	r15, r15
    1a4c:	00 1f       	adc	r16, r16
    1a4e:	11 1f       	adc	r17, r17
    1a50:	21 50       	subi	r18, 0x01	; 1
    1a52:	30 40       	sbci	r19, 0x00	; 0
    1a54:	3c 87       	std	Y+12, r19	; 0x0c
    1a56:	2b 87       	std	Y+11, r18	; 0x0b
    1a58:	20 e0       	ldi	r18, 0x00	; 0
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	40 e0       	ldi	r20, 0x00	; 0
    1a5e:	50 e0       	ldi	r21, 0x00	; 0
    1a60:	80 e0       	ldi	r24, 0x00	; 0
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	a0 e0       	ldi	r26, 0x00	; 0
    1a66:	b0 e4       	ldi	r27, 0x40	; 64
    1a68:	60 e0       	ldi	r22, 0x00	; 0
    1a6a:	70 e0       	ldi	r23, 0x00	; 0
    1a6c:	ea 14       	cp	r14, r10
    1a6e:	fb 04       	cpc	r15, r11
    1a70:	0c 05       	cpc	r16, r12
    1a72:	1d 05       	cpc	r17, r13
    1a74:	40 f0       	brcs	.+16     	; 0x1a86 <__divsf3+0xf4>
    1a76:	28 2b       	or	r18, r24
    1a78:	39 2b       	or	r19, r25
    1a7a:	4a 2b       	or	r20, r26
    1a7c:	5b 2b       	or	r21, r27
    1a7e:	ea 18       	sub	r14, r10
    1a80:	fb 08       	sbc	r15, r11
    1a82:	0c 09       	sbc	r16, r12
    1a84:	1d 09       	sbc	r17, r13
    1a86:	b6 95       	lsr	r27
    1a88:	a7 95       	ror	r26
    1a8a:	97 95       	ror	r25
    1a8c:	87 95       	ror	r24
    1a8e:	ee 0c       	add	r14, r14
    1a90:	ff 1c       	adc	r15, r15
    1a92:	00 1f       	adc	r16, r16
    1a94:	11 1f       	adc	r17, r17
    1a96:	6f 5f       	subi	r22, 0xFF	; 255
    1a98:	7f 4f       	sbci	r23, 0xFF	; 255
    1a9a:	6f 31       	cpi	r22, 0x1F	; 31
    1a9c:	71 05       	cpc	r23, r1
    1a9e:	31 f7       	brne	.-52     	; 0x1a6c <__divsf3+0xda>
    1aa0:	da 01       	movw	r26, r20
    1aa2:	c9 01       	movw	r24, r18
    1aa4:	8f 77       	andi	r24, 0x7F	; 127
    1aa6:	90 70       	andi	r25, 0x00	; 0
    1aa8:	a0 70       	andi	r26, 0x00	; 0
    1aaa:	b0 70       	andi	r27, 0x00	; 0
    1aac:	80 34       	cpi	r24, 0x40	; 64
    1aae:	91 05       	cpc	r25, r1
    1ab0:	a1 05       	cpc	r26, r1
    1ab2:	b1 05       	cpc	r27, r1
    1ab4:	61 f4       	brne	.+24     	; 0x1ace <__divsf3+0x13c>
    1ab6:	27 fd       	sbrc	r18, 7
    1ab8:	0a c0       	rjmp	.+20     	; 0x1ace <__divsf3+0x13c>
    1aba:	e1 14       	cp	r14, r1
    1abc:	f1 04       	cpc	r15, r1
    1abe:	01 05       	cpc	r16, r1
    1ac0:	11 05       	cpc	r17, r1
    1ac2:	29 f0       	breq	.+10     	; 0x1ace <__divsf3+0x13c>
    1ac4:	20 5c       	subi	r18, 0xC0	; 192
    1ac6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ac8:	4f 4f       	sbci	r20, 0xFF	; 255
    1aca:	5f 4f       	sbci	r21, 0xFF	; 255
    1acc:	20 78       	andi	r18, 0x80	; 128
    1ace:	2d 87       	std	Y+13, r18	; 0x0d
    1ad0:	3e 87       	std	Y+14, r19	; 0x0e
    1ad2:	4f 87       	std	Y+15, r20	; 0x0f
    1ad4:	58 8b       	std	Y+16, r21	; 0x10
    1ad6:	be 01       	movw	r22, r28
    1ad8:	67 5f       	subi	r22, 0xF7	; 247
    1ada:	7f 4f       	sbci	r23, 0xFF	; 255
    1adc:	cb 01       	movw	r24, r22
    1ade:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <__pack_f>
    1ae2:	68 96       	adiw	r28, 0x18	; 24
    1ae4:	ea e0       	ldi	r30, 0x0A	; 10
    1ae6:	0c 94 eb 10 	jmp	0x21d6	; 0x21d6 <__epilogue_restores__+0x10>

00001aea <__gtsf2>:
    1aea:	a8 e1       	ldi	r26, 0x18	; 24
    1aec:	b0 e0       	ldi	r27, 0x00	; 0
    1aee:	eb e7       	ldi	r30, 0x7B	; 123
    1af0:	fd e0       	ldi	r31, 0x0D	; 13
    1af2:	0c 94 d3 10 	jmp	0x21a6	; 0x21a6 <__prologue_saves__+0x18>
    1af6:	69 83       	std	Y+1, r22	; 0x01
    1af8:	7a 83       	std	Y+2, r23	; 0x02
    1afa:	8b 83       	std	Y+3, r24	; 0x03
    1afc:	9c 83       	std	Y+4, r25	; 0x04
    1afe:	2d 83       	std	Y+5, r18	; 0x05
    1b00:	3e 83       	std	Y+6, r19	; 0x06
    1b02:	4f 83       	std	Y+7, r20	; 0x07
    1b04:	58 87       	std	Y+8, r21	; 0x08
    1b06:	89 e0       	ldi	r24, 0x09	; 9
    1b08:	e8 2e       	mov	r14, r24
    1b0a:	f1 2c       	mov	r15, r1
    1b0c:	ec 0e       	add	r14, r28
    1b0e:	fd 1e       	adc	r15, r29
    1b10:	ce 01       	movw	r24, r28
    1b12:	01 96       	adiw	r24, 0x01	; 1
    1b14:	b7 01       	movw	r22, r14
    1b16:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__unpack_f>
    1b1a:	8e 01       	movw	r16, r28
    1b1c:	0f 5e       	subi	r16, 0xEF	; 239
    1b1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b20:	ce 01       	movw	r24, r28
    1b22:	05 96       	adiw	r24, 0x05	; 5
    1b24:	b8 01       	movw	r22, r16
    1b26:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__unpack_f>
    1b2a:	89 85       	ldd	r24, Y+9	; 0x09
    1b2c:	82 30       	cpi	r24, 0x02	; 2
    1b2e:	40 f0       	brcs	.+16     	; 0x1b40 <__gtsf2+0x56>
    1b30:	89 89       	ldd	r24, Y+17	; 0x11
    1b32:	82 30       	cpi	r24, 0x02	; 2
    1b34:	28 f0       	brcs	.+10     	; 0x1b40 <__gtsf2+0x56>
    1b36:	c7 01       	movw	r24, r14
    1b38:	b8 01       	movw	r22, r16
    1b3a:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fpcmp_parts_f>
    1b3e:	01 c0       	rjmp	.+2      	; 0x1b42 <__gtsf2+0x58>
    1b40:	8f ef       	ldi	r24, 0xFF	; 255
    1b42:	68 96       	adiw	r28, 0x18	; 24
    1b44:	e6 e0       	ldi	r30, 0x06	; 6
    1b46:	0c 94 ef 10 	jmp	0x21de	; 0x21de <__epilogue_restores__+0x18>

00001b4a <__gesf2>:
    1b4a:	a8 e1       	ldi	r26, 0x18	; 24
    1b4c:	b0 e0       	ldi	r27, 0x00	; 0
    1b4e:	eb ea       	ldi	r30, 0xAB	; 171
    1b50:	fd e0       	ldi	r31, 0x0D	; 13
    1b52:	0c 94 d3 10 	jmp	0x21a6	; 0x21a6 <__prologue_saves__+0x18>
    1b56:	69 83       	std	Y+1, r22	; 0x01
    1b58:	7a 83       	std	Y+2, r23	; 0x02
    1b5a:	8b 83       	std	Y+3, r24	; 0x03
    1b5c:	9c 83       	std	Y+4, r25	; 0x04
    1b5e:	2d 83       	std	Y+5, r18	; 0x05
    1b60:	3e 83       	std	Y+6, r19	; 0x06
    1b62:	4f 83       	std	Y+7, r20	; 0x07
    1b64:	58 87       	std	Y+8, r21	; 0x08
    1b66:	89 e0       	ldi	r24, 0x09	; 9
    1b68:	e8 2e       	mov	r14, r24
    1b6a:	f1 2c       	mov	r15, r1
    1b6c:	ec 0e       	add	r14, r28
    1b6e:	fd 1e       	adc	r15, r29
    1b70:	ce 01       	movw	r24, r28
    1b72:	01 96       	adiw	r24, 0x01	; 1
    1b74:	b7 01       	movw	r22, r14
    1b76:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__unpack_f>
    1b7a:	8e 01       	movw	r16, r28
    1b7c:	0f 5e       	subi	r16, 0xEF	; 239
    1b7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b80:	ce 01       	movw	r24, r28
    1b82:	05 96       	adiw	r24, 0x05	; 5
    1b84:	b8 01       	movw	r22, r16
    1b86:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__unpack_f>
    1b8a:	89 85       	ldd	r24, Y+9	; 0x09
    1b8c:	82 30       	cpi	r24, 0x02	; 2
    1b8e:	40 f0       	brcs	.+16     	; 0x1ba0 <__gesf2+0x56>
    1b90:	89 89       	ldd	r24, Y+17	; 0x11
    1b92:	82 30       	cpi	r24, 0x02	; 2
    1b94:	28 f0       	brcs	.+10     	; 0x1ba0 <__gesf2+0x56>
    1b96:	c7 01       	movw	r24, r14
    1b98:	b8 01       	movw	r22, r16
    1b9a:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fpcmp_parts_f>
    1b9e:	01 c0       	rjmp	.+2      	; 0x1ba2 <__gesf2+0x58>
    1ba0:	8f ef       	ldi	r24, 0xFF	; 255
    1ba2:	68 96       	adiw	r28, 0x18	; 24
    1ba4:	e6 e0       	ldi	r30, 0x06	; 6
    1ba6:	0c 94 ef 10 	jmp	0x21de	; 0x21de <__epilogue_restores__+0x18>

00001baa <__ltsf2>:
    1baa:	a8 e1       	ldi	r26, 0x18	; 24
    1bac:	b0 e0       	ldi	r27, 0x00	; 0
    1bae:	eb ed       	ldi	r30, 0xDB	; 219
    1bb0:	fd e0       	ldi	r31, 0x0D	; 13
    1bb2:	0c 94 d3 10 	jmp	0x21a6	; 0x21a6 <__prologue_saves__+0x18>
    1bb6:	69 83       	std	Y+1, r22	; 0x01
    1bb8:	7a 83       	std	Y+2, r23	; 0x02
    1bba:	8b 83       	std	Y+3, r24	; 0x03
    1bbc:	9c 83       	std	Y+4, r25	; 0x04
    1bbe:	2d 83       	std	Y+5, r18	; 0x05
    1bc0:	3e 83       	std	Y+6, r19	; 0x06
    1bc2:	4f 83       	std	Y+7, r20	; 0x07
    1bc4:	58 87       	std	Y+8, r21	; 0x08
    1bc6:	89 e0       	ldi	r24, 0x09	; 9
    1bc8:	e8 2e       	mov	r14, r24
    1bca:	f1 2c       	mov	r15, r1
    1bcc:	ec 0e       	add	r14, r28
    1bce:	fd 1e       	adc	r15, r29
    1bd0:	ce 01       	movw	r24, r28
    1bd2:	01 96       	adiw	r24, 0x01	; 1
    1bd4:	b7 01       	movw	r22, r14
    1bd6:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__unpack_f>
    1bda:	8e 01       	movw	r16, r28
    1bdc:	0f 5e       	subi	r16, 0xEF	; 239
    1bde:	1f 4f       	sbci	r17, 0xFF	; 255
    1be0:	ce 01       	movw	r24, r28
    1be2:	05 96       	adiw	r24, 0x05	; 5
    1be4:	b8 01       	movw	r22, r16
    1be6:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__unpack_f>
    1bea:	89 85       	ldd	r24, Y+9	; 0x09
    1bec:	82 30       	cpi	r24, 0x02	; 2
    1bee:	40 f0       	brcs	.+16     	; 0x1c00 <__ltsf2+0x56>
    1bf0:	89 89       	ldd	r24, Y+17	; 0x11
    1bf2:	82 30       	cpi	r24, 0x02	; 2
    1bf4:	28 f0       	brcs	.+10     	; 0x1c00 <__ltsf2+0x56>
    1bf6:	c7 01       	movw	r24, r14
    1bf8:	b8 01       	movw	r22, r16
    1bfa:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fpcmp_parts_f>
    1bfe:	01 c0       	rjmp	.+2      	; 0x1c02 <__ltsf2+0x58>
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	68 96       	adiw	r28, 0x18	; 24
    1c04:	e6 e0       	ldi	r30, 0x06	; 6
    1c06:	0c 94 ef 10 	jmp	0x21de	; 0x21de <__epilogue_restores__+0x18>

00001c0a <__fixsfsi>:
    1c0a:	ac e0       	ldi	r26, 0x0C	; 12
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	eb e0       	ldi	r30, 0x0B	; 11
    1c10:	fe e0       	ldi	r31, 0x0E	; 14
    1c12:	0c 94 d7 10 	jmp	0x21ae	; 0x21ae <__prologue_saves__+0x20>
    1c16:	69 83       	std	Y+1, r22	; 0x01
    1c18:	7a 83       	std	Y+2, r23	; 0x02
    1c1a:	8b 83       	std	Y+3, r24	; 0x03
    1c1c:	9c 83       	std	Y+4, r25	; 0x04
    1c1e:	ce 01       	movw	r24, r28
    1c20:	01 96       	adiw	r24, 0x01	; 1
    1c22:	be 01       	movw	r22, r28
    1c24:	6b 5f       	subi	r22, 0xFB	; 251
    1c26:	7f 4f       	sbci	r23, 0xFF	; 255
    1c28:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__unpack_f>
    1c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2e:	82 30       	cpi	r24, 0x02	; 2
    1c30:	61 f1       	breq	.+88     	; 0x1c8a <__fixsfsi+0x80>
    1c32:	82 30       	cpi	r24, 0x02	; 2
    1c34:	50 f1       	brcs	.+84     	; 0x1c8a <__fixsfsi+0x80>
    1c36:	84 30       	cpi	r24, 0x04	; 4
    1c38:	21 f4       	brne	.+8      	; 0x1c42 <__fixsfsi+0x38>
    1c3a:	8e 81       	ldd	r24, Y+6	; 0x06
    1c3c:	88 23       	and	r24, r24
    1c3e:	51 f1       	breq	.+84     	; 0x1c94 <__fixsfsi+0x8a>
    1c40:	2e c0       	rjmp	.+92     	; 0x1c9e <__fixsfsi+0x94>
    1c42:	2f 81       	ldd	r18, Y+7	; 0x07
    1c44:	38 85       	ldd	r19, Y+8	; 0x08
    1c46:	37 fd       	sbrc	r19, 7
    1c48:	20 c0       	rjmp	.+64     	; 0x1c8a <__fixsfsi+0x80>
    1c4a:	6e 81       	ldd	r22, Y+6	; 0x06
    1c4c:	2f 31       	cpi	r18, 0x1F	; 31
    1c4e:	31 05       	cpc	r19, r1
    1c50:	1c f0       	brlt	.+6      	; 0x1c58 <__fixsfsi+0x4e>
    1c52:	66 23       	and	r22, r22
    1c54:	f9 f0       	breq	.+62     	; 0x1c94 <__fixsfsi+0x8a>
    1c56:	23 c0       	rjmp	.+70     	; 0x1c9e <__fixsfsi+0x94>
    1c58:	8e e1       	ldi	r24, 0x1E	; 30
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	82 1b       	sub	r24, r18
    1c5e:	93 0b       	sbc	r25, r19
    1c60:	29 85       	ldd	r18, Y+9	; 0x09
    1c62:	3a 85       	ldd	r19, Y+10	; 0x0a
    1c64:	4b 85       	ldd	r20, Y+11	; 0x0b
    1c66:	5c 85       	ldd	r21, Y+12	; 0x0c
    1c68:	04 c0       	rjmp	.+8      	; 0x1c72 <__fixsfsi+0x68>
    1c6a:	56 95       	lsr	r21
    1c6c:	47 95       	ror	r20
    1c6e:	37 95       	ror	r19
    1c70:	27 95       	ror	r18
    1c72:	8a 95       	dec	r24
    1c74:	d2 f7       	brpl	.-12     	; 0x1c6a <__fixsfsi+0x60>
    1c76:	66 23       	and	r22, r22
    1c78:	b1 f0       	breq	.+44     	; 0x1ca6 <__fixsfsi+0x9c>
    1c7a:	50 95       	com	r21
    1c7c:	40 95       	com	r20
    1c7e:	30 95       	com	r19
    1c80:	21 95       	neg	r18
    1c82:	3f 4f       	sbci	r19, 0xFF	; 255
    1c84:	4f 4f       	sbci	r20, 0xFF	; 255
    1c86:	5f 4f       	sbci	r21, 0xFF	; 255
    1c88:	0e c0       	rjmp	.+28     	; 0x1ca6 <__fixsfsi+0x9c>
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	40 e0       	ldi	r20, 0x00	; 0
    1c90:	50 e0       	ldi	r21, 0x00	; 0
    1c92:	09 c0       	rjmp	.+18     	; 0x1ca6 <__fixsfsi+0x9c>
    1c94:	2f ef       	ldi	r18, 0xFF	; 255
    1c96:	3f ef       	ldi	r19, 0xFF	; 255
    1c98:	4f ef       	ldi	r20, 0xFF	; 255
    1c9a:	5f e7       	ldi	r21, 0x7F	; 127
    1c9c:	04 c0       	rjmp	.+8      	; 0x1ca6 <__fixsfsi+0x9c>
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	40 e0       	ldi	r20, 0x00	; 0
    1ca4:	50 e8       	ldi	r21, 0x80	; 128
    1ca6:	b9 01       	movw	r22, r18
    1ca8:	ca 01       	movw	r24, r20
    1caa:	2c 96       	adiw	r28, 0x0c	; 12
    1cac:	e2 e0       	ldi	r30, 0x02	; 2
    1cae:	0c 94 f3 10 	jmp	0x21e6	; 0x21e6 <__epilogue_restores__+0x20>

00001cb2 <__floatunsisf>:
    1cb2:	a8 e0       	ldi	r26, 0x08	; 8
    1cb4:	b0 e0       	ldi	r27, 0x00	; 0
    1cb6:	ef e5       	ldi	r30, 0x5F	; 95
    1cb8:	fe e0       	ldi	r31, 0x0E	; 14
    1cba:	0c 94 cf 10 	jmp	0x219e	; 0x219e <__prologue_saves__+0x10>
    1cbe:	7b 01       	movw	r14, r22
    1cc0:	8c 01       	movw	r16, r24
    1cc2:	61 15       	cp	r22, r1
    1cc4:	71 05       	cpc	r23, r1
    1cc6:	81 05       	cpc	r24, r1
    1cc8:	91 05       	cpc	r25, r1
    1cca:	19 f4       	brne	.+6      	; 0x1cd2 <__floatunsisf+0x20>
    1ccc:	82 e0       	ldi	r24, 0x02	; 2
    1cce:	89 83       	std	Y+1, r24	; 0x01
    1cd0:	60 c0       	rjmp	.+192    	; 0x1d92 <__floatunsisf+0xe0>
    1cd2:	83 e0       	ldi	r24, 0x03	; 3
    1cd4:	89 83       	std	Y+1, r24	; 0x01
    1cd6:	8e e1       	ldi	r24, 0x1E	; 30
    1cd8:	c8 2e       	mov	r12, r24
    1cda:	d1 2c       	mov	r13, r1
    1cdc:	dc 82       	std	Y+4, r13	; 0x04
    1cde:	cb 82       	std	Y+3, r12	; 0x03
    1ce0:	ed 82       	std	Y+5, r14	; 0x05
    1ce2:	fe 82       	std	Y+6, r15	; 0x06
    1ce4:	0f 83       	std	Y+7, r16	; 0x07
    1ce6:	18 87       	std	Y+8, r17	; 0x08
    1ce8:	c8 01       	movw	r24, r16
    1cea:	b7 01       	movw	r22, r14
    1cec:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <__clzsi2>
    1cf0:	fc 01       	movw	r30, r24
    1cf2:	31 97       	sbiw	r30, 0x01	; 1
    1cf4:	f7 ff       	sbrs	r31, 7
    1cf6:	3b c0       	rjmp	.+118    	; 0x1d6e <__floatunsisf+0xbc>
    1cf8:	22 27       	eor	r18, r18
    1cfa:	33 27       	eor	r19, r19
    1cfc:	2e 1b       	sub	r18, r30
    1cfe:	3f 0b       	sbc	r19, r31
    1d00:	57 01       	movw	r10, r14
    1d02:	68 01       	movw	r12, r16
    1d04:	02 2e       	mov	r0, r18
    1d06:	04 c0       	rjmp	.+8      	; 0x1d10 <__floatunsisf+0x5e>
    1d08:	d6 94       	lsr	r13
    1d0a:	c7 94       	ror	r12
    1d0c:	b7 94       	ror	r11
    1d0e:	a7 94       	ror	r10
    1d10:	0a 94       	dec	r0
    1d12:	d2 f7       	brpl	.-12     	; 0x1d08 <__floatunsisf+0x56>
    1d14:	40 e0       	ldi	r20, 0x00	; 0
    1d16:	50 e0       	ldi	r21, 0x00	; 0
    1d18:	60 e0       	ldi	r22, 0x00	; 0
    1d1a:	70 e0       	ldi	r23, 0x00	; 0
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	a0 e0       	ldi	r26, 0x00	; 0
    1d22:	b0 e0       	ldi	r27, 0x00	; 0
    1d24:	04 c0       	rjmp	.+8      	; 0x1d2e <__floatunsisf+0x7c>
    1d26:	88 0f       	add	r24, r24
    1d28:	99 1f       	adc	r25, r25
    1d2a:	aa 1f       	adc	r26, r26
    1d2c:	bb 1f       	adc	r27, r27
    1d2e:	2a 95       	dec	r18
    1d30:	d2 f7       	brpl	.-12     	; 0x1d26 <__floatunsisf+0x74>
    1d32:	01 97       	sbiw	r24, 0x01	; 1
    1d34:	a1 09       	sbc	r26, r1
    1d36:	b1 09       	sbc	r27, r1
    1d38:	8e 21       	and	r24, r14
    1d3a:	9f 21       	and	r25, r15
    1d3c:	a0 23       	and	r26, r16
    1d3e:	b1 23       	and	r27, r17
    1d40:	00 97       	sbiw	r24, 0x00	; 0
    1d42:	a1 05       	cpc	r26, r1
    1d44:	b1 05       	cpc	r27, r1
    1d46:	21 f0       	breq	.+8      	; 0x1d50 <__floatunsisf+0x9e>
    1d48:	41 e0       	ldi	r20, 0x01	; 1
    1d4a:	50 e0       	ldi	r21, 0x00	; 0
    1d4c:	60 e0       	ldi	r22, 0x00	; 0
    1d4e:	70 e0       	ldi	r23, 0x00	; 0
    1d50:	4a 29       	or	r20, r10
    1d52:	5b 29       	or	r21, r11
    1d54:	6c 29       	or	r22, r12
    1d56:	7d 29       	or	r23, r13
    1d58:	4d 83       	std	Y+5, r20	; 0x05
    1d5a:	5e 83       	std	Y+6, r21	; 0x06
    1d5c:	6f 83       	std	Y+7, r22	; 0x07
    1d5e:	78 87       	std	Y+8, r23	; 0x08
    1d60:	8e e1       	ldi	r24, 0x1E	; 30
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	8e 1b       	sub	r24, r30
    1d66:	9f 0b       	sbc	r25, r31
    1d68:	9c 83       	std	Y+4, r25	; 0x04
    1d6a:	8b 83       	std	Y+3, r24	; 0x03
    1d6c:	12 c0       	rjmp	.+36     	; 0x1d92 <__floatunsisf+0xe0>
    1d6e:	30 97       	sbiw	r30, 0x00	; 0
    1d70:	81 f0       	breq	.+32     	; 0x1d92 <__floatunsisf+0xe0>
    1d72:	0e 2e       	mov	r0, r30
    1d74:	04 c0       	rjmp	.+8      	; 0x1d7e <__floatunsisf+0xcc>
    1d76:	ee 0c       	add	r14, r14
    1d78:	ff 1c       	adc	r15, r15
    1d7a:	00 1f       	adc	r16, r16
    1d7c:	11 1f       	adc	r17, r17
    1d7e:	0a 94       	dec	r0
    1d80:	d2 f7       	brpl	.-12     	; 0x1d76 <__floatunsisf+0xc4>
    1d82:	ed 82       	std	Y+5, r14	; 0x05
    1d84:	fe 82       	std	Y+6, r15	; 0x06
    1d86:	0f 83       	std	Y+7, r16	; 0x07
    1d88:	18 87       	std	Y+8, r17	; 0x08
    1d8a:	ce 1a       	sub	r12, r30
    1d8c:	df 0a       	sbc	r13, r31
    1d8e:	dc 82       	std	Y+4, r13	; 0x04
    1d90:	cb 82       	std	Y+3, r12	; 0x03
    1d92:	1a 82       	std	Y+2, r1	; 0x02
    1d94:	ce 01       	movw	r24, r28
    1d96:	01 96       	adiw	r24, 0x01	; 1
    1d98:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <__pack_f>
    1d9c:	28 96       	adiw	r28, 0x08	; 8
    1d9e:	ea e0       	ldi	r30, 0x0A	; 10
    1da0:	0c 94 eb 10 	jmp	0x21d6	; 0x21d6 <__epilogue_restores__+0x10>

00001da4 <__clzsi2>:
    1da4:	ef 92       	push	r14
    1da6:	ff 92       	push	r15
    1da8:	0f 93       	push	r16
    1daa:	1f 93       	push	r17
    1dac:	7b 01       	movw	r14, r22
    1dae:	8c 01       	movw	r16, r24
    1db0:	80 e0       	ldi	r24, 0x00	; 0
    1db2:	e8 16       	cp	r14, r24
    1db4:	80 e0       	ldi	r24, 0x00	; 0
    1db6:	f8 06       	cpc	r15, r24
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	08 07       	cpc	r16, r24
    1dbc:	80 e0       	ldi	r24, 0x00	; 0
    1dbe:	18 07       	cpc	r17, r24
    1dc0:	88 f4       	brcc	.+34     	; 0x1de4 <__clzsi2+0x40>
    1dc2:	8f ef       	ldi	r24, 0xFF	; 255
    1dc4:	e8 16       	cp	r14, r24
    1dc6:	f1 04       	cpc	r15, r1
    1dc8:	01 05       	cpc	r16, r1
    1dca:	11 05       	cpc	r17, r1
    1dcc:	31 f0       	breq	.+12     	; 0x1dda <__clzsi2+0x36>
    1dce:	28 f0       	brcs	.+10     	; 0x1dda <__clzsi2+0x36>
    1dd0:	88 e0       	ldi	r24, 0x08	; 8
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	a0 e0       	ldi	r26, 0x00	; 0
    1dd6:	b0 e0       	ldi	r27, 0x00	; 0
    1dd8:	17 c0       	rjmp	.+46     	; 0x1e08 <__clzsi2+0x64>
    1dda:	80 e0       	ldi	r24, 0x00	; 0
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	a0 e0       	ldi	r26, 0x00	; 0
    1de0:	b0 e0       	ldi	r27, 0x00	; 0
    1de2:	12 c0       	rjmp	.+36     	; 0x1e08 <__clzsi2+0x64>
    1de4:	80 e0       	ldi	r24, 0x00	; 0
    1de6:	e8 16       	cp	r14, r24
    1de8:	80 e0       	ldi	r24, 0x00	; 0
    1dea:	f8 06       	cpc	r15, r24
    1dec:	80 e0       	ldi	r24, 0x00	; 0
    1dee:	08 07       	cpc	r16, r24
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	18 07       	cpc	r17, r24
    1df4:	28 f0       	brcs	.+10     	; 0x1e00 <__clzsi2+0x5c>
    1df6:	88 e1       	ldi	r24, 0x18	; 24
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	a0 e0       	ldi	r26, 0x00	; 0
    1dfc:	b0 e0       	ldi	r27, 0x00	; 0
    1dfe:	04 c0       	rjmp	.+8      	; 0x1e08 <__clzsi2+0x64>
    1e00:	80 e1       	ldi	r24, 0x10	; 16
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	a0 e0       	ldi	r26, 0x00	; 0
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	20 e2       	ldi	r18, 0x20	; 32
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	40 e0       	ldi	r20, 0x00	; 0
    1e0e:	50 e0       	ldi	r21, 0x00	; 0
    1e10:	28 1b       	sub	r18, r24
    1e12:	39 0b       	sbc	r19, r25
    1e14:	4a 0b       	sbc	r20, r26
    1e16:	5b 0b       	sbc	r21, r27
    1e18:	04 c0       	rjmp	.+8      	; 0x1e22 <__clzsi2+0x7e>
    1e1a:	16 95       	lsr	r17
    1e1c:	07 95       	ror	r16
    1e1e:	f7 94       	ror	r15
    1e20:	e7 94       	ror	r14
    1e22:	8a 95       	dec	r24
    1e24:	d2 f7       	brpl	.-12     	; 0x1e1a <__clzsi2+0x76>
    1e26:	f7 01       	movw	r30, r14
    1e28:	e8 5f       	subi	r30, 0xF8	; 248
    1e2a:	fd 4f       	sbci	r31, 0xFD	; 253
    1e2c:	80 81       	ld	r24, Z
    1e2e:	28 1b       	sub	r18, r24
    1e30:	31 09       	sbc	r19, r1
    1e32:	41 09       	sbc	r20, r1
    1e34:	51 09       	sbc	r21, r1
    1e36:	c9 01       	movw	r24, r18
    1e38:	1f 91       	pop	r17
    1e3a:	0f 91       	pop	r16
    1e3c:	ff 90       	pop	r15
    1e3e:	ef 90       	pop	r14
    1e40:	08 95       	ret

00001e42 <__pack_f>:
    1e42:	df 92       	push	r13
    1e44:	ef 92       	push	r14
    1e46:	ff 92       	push	r15
    1e48:	0f 93       	push	r16
    1e4a:	1f 93       	push	r17
    1e4c:	fc 01       	movw	r30, r24
    1e4e:	e4 80       	ldd	r14, Z+4	; 0x04
    1e50:	f5 80       	ldd	r15, Z+5	; 0x05
    1e52:	06 81       	ldd	r16, Z+6	; 0x06
    1e54:	17 81       	ldd	r17, Z+7	; 0x07
    1e56:	d1 80       	ldd	r13, Z+1	; 0x01
    1e58:	80 81       	ld	r24, Z
    1e5a:	82 30       	cpi	r24, 0x02	; 2
    1e5c:	48 f4       	brcc	.+18     	; 0x1e70 <__pack_f+0x2e>
    1e5e:	80 e0       	ldi	r24, 0x00	; 0
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	a0 e1       	ldi	r26, 0x10	; 16
    1e64:	b0 e0       	ldi	r27, 0x00	; 0
    1e66:	e8 2a       	or	r14, r24
    1e68:	f9 2a       	or	r15, r25
    1e6a:	0a 2b       	or	r16, r26
    1e6c:	1b 2b       	or	r17, r27
    1e6e:	a5 c0       	rjmp	.+330    	; 0x1fba <__pack_f+0x178>
    1e70:	84 30       	cpi	r24, 0x04	; 4
    1e72:	09 f4       	brne	.+2      	; 0x1e76 <__pack_f+0x34>
    1e74:	9f c0       	rjmp	.+318    	; 0x1fb4 <__pack_f+0x172>
    1e76:	82 30       	cpi	r24, 0x02	; 2
    1e78:	21 f4       	brne	.+8      	; 0x1e82 <__pack_f+0x40>
    1e7a:	ee 24       	eor	r14, r14
    1e7c:	ff 24       	eor	r15, r15
    1e7e:	87 01       	movw	r16, r14
    1e80:	05 c0       	rjmp	.+10     	; 0x1e8c <__pack_f+0x4a>
    1e82:	e1 14       	cp	r14, r1
    1e84:	f1 04       	cpc	r15, r1
    1e86:	01 05       	cpc	r16, r1
    1e88:	11 05       	cpc	r17, r1
    1e8a:	19 f4       	brne	.+6      	; 0x1e92 <__pack_f+0x50>
    1e8c:	e0 e0       	ldi	r30, 0x00	; 0
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	96 c0       	rjmp	.+300    	; 0x1fbe <__pack_f+0x17c>
    1e92:	62 81       	ldd	r22, Z+2	; 0x02
    1e94:	73 81       	ldd	r23, Z+3	; 0x03
    1e96:	9f ef       	ldi	r25, 0xFF	; 255
    1e98:	62 38       	cpi	r22, 0x82	; 130
    1e9a:	79 07       	cpc	r23, r25
    1e9c:	0c f0       	brlt	.+2      	; 0x1ea0 <__pack_f+0x5e>
    1e9e:	5b c0       	rjmp	.+182    	; 0x1f56 <__pack_f+0x114>
    1ea0:	22 e8       	ldi	r18, 0x82	; 130
    1ea2:	3f ef       	ldi	r19, 0xFF	; 255
    1ea4:	26 1b       	sub	r18, r22
    1ea6:	37 0b       	sbc	r19, r23
    1ea8:	2a 31       	cpi	r18, 0x1A	; 26
    1eaa:	31 05       	cpc	r19, r1
    1eac:	2c f0       	brlt	.+10     	; 0x1eb8 <__pack_f+0x76>
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	40 e0       	ldi	r20, 0x00	; 0
    1eb4:	50 e0       	ldi	r21, 0x00	; 0
    1eb6:	2a c0       	rjmp	.+84     	; 0x1f0c <__pack_f+0xca>
    1eb8:	b8 01       	movw	r22, r16
    1eba:	a7 01       	movw	r20, r14
    1ebc:	02 2e       	mov	r0, r18
    1ebe:	04 c0       	rjmp	.+8      	; 0x1ec8 <__pack_f+0x86>
    1ec0:	76 95       	lsr	r23
    1ec2:	67 95       	ror	r22
    1ec4:	57 95       	ror	r21
    1ec6:	47 95       	ror	r20
    1ec8:	0a 94       	dec	r0
    1eca:	d2 f7       	brpl	.-12     	; 0x1ec0 <__pack_f+0x7e>
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	a0 e0       	ldi	r26, 0x00	; 0
    1ed2:	b0 e0       	ldi	r27, 0x00	; 0
    1ed4:	04 c0       	rjmp	.+8      	; 0x1ede <__pack_f+0x9c>
    1ed6:	88 0f       	add	r24, r24
    1ed8:	99 1f       	adc	r25, r25
    1eda:	aa 1f       	adc	r26, r26
    1edc:	bb 1f       	adc	r27, r27
    1ede:	2a 95       	dec	r18
    1ee0:	d2 f7       	brpl	.-12     	; 0x1ed6 <__pack_f+0x94>
    1ee2:	01 97       	sbiw	r24, 0x01	; 1
    1ee4:	a1 09       	sbc	r26, r1
    1ee6:	b1 09       	sbc	r27, r1
    1ee8:	8e 21       	and	r24, r14
    1eea:	9f 21       	and	r25, r15
    1eec:	a0 23       	and	r26, r16
    1eee:	b1 23       	and	r27, r17
    1ef0:	00 97       	sbiw	r24, 0x00	; 0
    1ef2:	a1 05       	cpc	r26, r1
    1ef4:	b1 05       	cpc	r27, r1
    1ef6:	21 f0       	breq	.+8      	; 0x1f00 <__pack_f+0xbe>
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	a0 e0       	ldi	r26, 0x00	; 0
    1efe:	b0 e0       	ldi	r27, 0x00	; 0
    1f00:	9a 01       	movw	r18, r20
    1f02:	ab 01       	movw	r20, r22
    1f04:	28 2b       	or	r18, r24
    1f06:	39 2b       	or	r19, r25
    1f08:	4a 2b       	or	r20, r26
    1f0a:	5b 2b       	or	r21, r27
    1f0c:	da 01       	movw	r26, r20
    1f0e:	c9 01       	movw	r24, r18
    1f10:	8f 77       	andi	r24, 0x7F	; 127
    1f12:	90 70       	andi	r25, 0x00	; 0
    1f14:	a0 70       	andi	r26, 0x00	; 0
    1f16:	b0 70       	andi	r27, 0x00	; 0
    1f18:	80 34       	cpi	r24, 0x40	; 64
    1f1a:	91 05       	cpc	r25, r1
    1f1c:	a1 05       	cpc	r26, r1
    1f1e:	b1 05       	cpc	r27, r1
    1f20:	39 f4       	brne	.+14     	; 0x1f30 <__pack_f+0xee>
    1f22:	27 ff       	sbrs	r18, 7
    1f24:	09 c0       	rjmp	.+18     	; 0x1f38 <__pack_f+0xf6>
    1f26:	20 5c       	subi	r18, 0xC0	; 192
    1f28:	3f 4f       	sbci	r19, 0xFF	; 255
    1f2a:	4f 4f       	sbci	r20, 0xFF	; 255
    1f2c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f2e:	04 c0       	rjmp	.+8      	; 0x1f38 <__pack_f+0xf6>
    1f30:	21 5c       	subi	r18, 0xC1	; 193
    1f32:	3f 4f       	sbci	r19, 0xFF	; 255
    1f34:	4f 4f       	sbci	r20, 0xFF	; 255
    1f36:	5f 4f       	sbci	r21, 0xFF	; 255
    1f38:	e0 e0       	ldi	r30, 0x00	; 0
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	20 30       	cpi	r18, 0x00	; 0
    1f3e:	a0 e0       	ldi	r26, 0x00	; 0
    1f40:	3a 07       	cpc	r19, r26
    1f42:	a0 e0       	ldi	r26, 0x00	; 0
    1f44:	4a 07       	cpc	r20, r26
    1f46:	a0 e4       	ldi	r26, 0x40	; 64
    1f48:	5a 07       	cpc	r21, r26
    1f4a:	10 f0       	brcs	.+4      	; 0x1f50 <__pack_f+0x10e>
    1f4c:	e1 e0       	ldi	r30, 0x01	; 1
    1f4e:	f0 e0       	ldi	r31, 0x00	; 0
    1f50:	79 01       	movw	r14, r18
    1f52:	8a 01       	movw	r16, r20
    1f54:	27 c0       	rjmp	.+78     	; 0x1fa4 <__pack_f+0x162>
    1f56:	60 38       	cpi	r22, 0x80	; 128
    1f58:	71 05       	cpc	r23, r1
    1f5a:	64 f5       	brge	.+88     	; 0x1fb4 <__pack_f+0x172>
    1f5c:	fb 01       	movw	r30, r22
    1f5e:	e1 58       	subi	r30, 0x81	; 129
    1f60:	ff 4f       	sbci	r31, 0xFF	; 255
    1f62:	d8 01       	movw	r26, r16
    1f64:	c7 01       	movw	r24, r14
    1f66:	8f 77       	andi	r24, 0x7F	; 127
    1f68:	90 70       	andi	r25, 0x00	; 0
    1f6a:	a0 70       	andi	r26, 0x00	; 0
    1f6c:	b0 70       	andi	r27, 0x00	; 0
    1f6e:	80 34       	cpi	r24, 0x40	; 64
    1f70:	91 05       	cpc	r25, r1
    1f72:	a1 05       	cpc	r26, r1
    1f74:	b1 05       	cpc	r27, r1
    1f76:	39 f4       	brne	.+14     	; 0x1f86 <__pack_f+0x144>
    1f78:	e7 fe       	sbrs	r14, 7
    1f7a:	0d c0       	rjmp	.+26     	; 0x1f96 <__pack_f+0x154>
    1f7c:	80 e4       	ldi	r24, 0x40	; 64
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	a0 e0       	ldi	r26, 0x00	; 0
    1f82:	b0 e0       	ldi	r27, 0x00	; 0
    1f84:	04 c0       	rjmp	.+8      	; 0x1f8e <__pack_f+0x14c>
    1f86:	8f e3       	ldi	r24, 0x3F	; 63
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	a0 e0       	ldi	r26, 0x00	; 0
    1f8c:	b0 e0       	ldi	r27, 0x00	; 0
    1f8e:	e8 0e       	add	r14, r24
    1f90:	f9 1e       	adc	r15, r25
    1f92:	0a 1f       	adc	r16, r26
    1f94:	1b 1f       	adc	r17, r27
    1f96:	17 ff       	sbrs	r17, 7
    1f98:	05 c0       	rjmp	.+10     	; 0x1fa4 <__pack_f+0x162>
    1f9a:	16 95       	lsr	r17
    1f9c:	07 95       	ror	r16
    1f9e:	f7 94       	ror	r15
    1fa0:	e7 94       	ror	r14
    1fa2:	31 96       	adiw	r30, 0x01	; 1
    1fa4:	87 e0       	ldi	r24, 0x07	; 7
    1fa6:	16 95       	lsr	r17
    1fa8:	07 95       	ror	r16
    1faa:	f7 94       	ror	r15
    1fac:	e7 94       	ror	r14
    1fae:	8a 95       	dec	r24
    1fb0:	d1 f7       	brne	.-12     	; 0x1fa6 <__pack_f+0x164>
    1fb2:	05 c0       	rjmp	.+10     	; 0x1fbe <__pack_f+0x17c>
    1fb4:	ee 24       	eor	r14, r14
    1fb6:	ff 24       	eor	r15, r15
    1fb8:	87 01       	movw	r16, r14
    1fba:	ef ef       	ldi	r30, 0xFF	; 255
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	6e 2f       	mov	r22, r30
    1fc0:	67 95       	ror	r22
    1fc2:	66 27       	eor	r22, r22
    1fc4:	67 95       	ror	r22
    1fc6:	90 2f       	mov	r25, r16
    1fc8:	9f 77       	andi	r25, 0x7F	; 127
    1fca:	d7 94       	ror	r13
    1fcc:	dd 24       	eor	r13, r13
    1fce:	d7 94       	ror	r13
    1fd0:	8e 2f       	mov	r24, r30
    1fd2:	86 95       	lsr	r24
    1fd4:	49 2f       	mov	r20, r25
    1fd6:	46 2b       	or	r20, r22
    1fd8:	58 2f       	mov	r21, r24
    1fda:	5d 29       	or	r21, r13
    1fdc:	b7 01       	movw	r22, r14
    1fde:	ca 01       	movw	r24, r20
    1fe0:	1f 91       	pop	r17
    1fe2:	0f 91       	pop	r16
    1fe4:	ff 90       	pop	r15
    1fe6:	ef 90       	pop	r14
    1fe8:	df 90       	pop	r13
    1fea:	08 95       	ret

00001fec <__unpack_f>:
    1fec:	fc 01       	movw	r30, r24
    1fee:	db 01       	movw	r26, r22
    1ff0:	40 81       	ld	r20, Z
    1ff2:	51 81       	ldd	r21, Z+1	; 0x01
    1ff4:	22 81       	ldd	r18, Z+2	; 0x02
    1ff6:	62 2f       	mov	r22, r18
    1ff8:	6f 77       	andi	r22, 0x7F	; 127
    1ffa:	70 e0       	ldi	r23, 0x00	; 0
    1ffc:	22 1f       	adc	r18, r18
    1ffe:	22 27       	eor	r18, r18
    2000:	22 1f       	adc	r18, r18
    2002:	93 81       	ldd	r25, Z+3	; 0x03
    2004:	89 2f       	mov	r24, r25
    2006:	88 0f       	add	r24, r24
    2008:	82 2b       	or	r24, r18
    200a:	28 2f       	mov	r18, r24
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	99 1f       	adc	r25, r25
    2010:	99 27       	eor	r25, r25
    2012:	99 1f       	adc	r25, r25
    2014:	11 96       	adiw	r26, 0x01	; 1
    2016:	9c 93       	st	X, r25
    2018:	11 97       	sbiw	r26, 0x01	; 1
    201a:	21 15       	cp	r18, r1
    201c:	31 05       	cpc	r19, r1
    201e:	a9 f5       	brne	.+106    	; 0x208a <__unpack_f+0x9e>
    2020:	41 15       	cp	r20, r1
    2022:	51 05       	cpc	r21, r1
    2024:	61 05       	cpc	r22, r1
    2026:	71 05       	cpc	r23, r1
    2028:	11 f4       	brne	.+4      	; 0x202e <__unpack_f+0x42>
    202a:	82 e0       	ldi	r24, 0x02	; 2
    202c:	37 c0       	rjmp	.+110    	; 0x209c <__unpack_f+0xb0>
    202e:	82 e8       	ldi	r24, 0x82	; 130
    2030:	9f ef       	ldi	r25, 0xFF	; 255
    2032:	13 96       	adiw	r26, 0x03	; 3
    2034:	9c 93       	st	X, r25
    2036:	8e 93       	st	-X, r24
    2038:	12 97       	sbiw	r26, 0x02	; 2
    203a:	9a 01       	movw	r18, r20
    203c:	ab 01       	movw	r20, r22
    203e:	67 e0       	ldi	r22, 0x07	; 7
    2040:	22 0f       	add	r18, r18
    2042:	33 1f       	adc	r19, r19
    2044:	44 1f       	adc	r20, r20
    2046:	55 1f       	adc	r21, r21
    2048:	6a 95       	dec	r22
    204a:	d1 f7       	brne	.-12     	; 0x2040 <__unpack_f+0x54>
    204c:	83 e0       	ldi	r24, 0x03	; 3
    204e:	8c 93       	st	X, r24
    2050:	0d c0       	rjmp	.+26     	; 0x206c <__unpack_f+0x80>
    2052:	22 0f       	add	r18, r18
    2054:	33 1f       	adc	r19, r19
    2056:	44 1f       	adc	r20, r20
    2058:	55 1f       	adc	r21, r21
    205a:	12 96       	adiw	r26, 0x02	; 2
    205c:	8d 91       	ld	r24, X+
    205e:	9c 91       	ld	r25, X
    2060:	13 97       	sbiw	r26, 0x03	; 3
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	13 96       	adiw	r26, 0x03	; 3
    2066:	9c 93       	st	X, r25
    2068:	8e 93       	st	-X, r24
    206a:	12 97       	sbiw	r26, 0x02	; 2
    206c:	20 30       	cpi	r18, 0x00	; 0
    206e:	80 e0       	ldi	r24, 0x00	; 0
    2070:	38 07       	cpc	r19, r24
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	48 07       	cpc	r20, r24
    2076:	80 e4       	ldi	r24, 0x40	; 64
    2078:	58 07       	cpc	r21, r24
    207a:	58 f3       	brcs	.-42     	; 0x2052 <__unpack_f+0x66>
    207c:	14 96       	adiw	r26, 0x04	; 4
    207e:	2d 93       	st	X+, r18
    2080:	3d 93       	st	X+, r19
    2082:	4d 93       	st	X+, r20
    2084:	5c 93       	st	X, r21
    2086:	17 97       	sbiw	r26, 0x07	; 7
    2088:	08 95       	ret
    208a:	2f 3f       	cpi	r18, 0xFF	; 255
    208c:	31 05       	cpc	r19, r1
    208e:	79 f4       	brne	.+30     	; 0x20ae <__unpack_f+0xc2>
    2090:	41 15       	cp	r20, r1
    2092:	51 05       	cpc	r21, r1
    2094:	61 05       	cpc	r22, r1
    2096:	71 05       	cpc	r23, r1
    2098:	19 f4       	brne	.+6      	; 0x20a0 <__unpack_f+0xb4>
    209a:	84 e0       	ldi	r24, 0x04	; 4
    209c:	8c 93       	st	X, r24
    209e:	08 95       	ret
    20a0:	64 ff       	sbrs	r22, 4
    20a2:	03 c0       	rjmp	.+6      	; 0x20aa <__unpack_f+0xbe>
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	8c 93       	st	X, r24
    20a8:	12 c0       	rjmp	.+36     	; 0x20ce <__unpack_f+0xe2>
    20aa:	1c 92       	st	X, r1
    20ac:	10 c0       	rjmp	.+32     	; 0x20ce <__unpack_f+0xe2>
    20ae:	2f 57       	subi	r18, 0x7F	; 127
    20b0:	30 40       	sbci	r19, 0x00	; 0
    20b2:	13 96       	adiw	r26, 0x03	; 3
    20b4:	3c 93       	st	X, r19
    20b6:	2e 93       	st	-X, r18
    20b8:	12 97       	sbiw	r26, 0x02	; 2
    20ba:	83 e0       	ldi	r24, 0x03	; 3
    20bc:	8c 93       	st	X, r24
    20be:	87 e0       	ldi	r24, 0x07	; 7
    20c0:	44 0f       	add	r20, r20
    20c2:	55 1f       	adc	r21, r21
    20c4:	66 1f       	adc	r22, r22
    20c6:	77 1f       	adc	r23, r23
    20c8:	8a 95       	dec	r24
    20ca:	d1 f7       	brne	.-12     	; 0x20c0 <__unpack_f+0xd4>
    20cc:	70 64       	ori	r23, 0x40	; 64
    20ce:	14 96       	adiw	r26, 0x04	; 4
    20d0:	4d 93       	st	X+, r20
    20d2:	5d 93       	st	X+, r21
    20d4:	6d 93       	st	X+, r22
    20d6:	7c 93       	st	X, r23
    20d8:	17 97       	sbiw	r26, 0x07	; 7
    20da:	08 95       	ret

000020dc <__fpcmp_parts_f>:
    20dc:	1f 93       	push	r17
    20de:	dc 01       	movw	r26, r24
    20e0:	fb 01       	movw	r30, r22
    20e2:	9c 91       	ld	r25, X
    20e4:	92 30       	cpi	r25, 0x02	; 2
    20e6:	08 f4       	brcc	.+2      	; 0x20ea <__fpcmp_parts_f+0xe>
    20e8:	47 c0       	rjmp	.+142    	; 0x2178 <__fpcmp_parts_f+0x9c>
    20ea:	80 81       	ld	r24, Z
    20ec:	82 30       	cpi	r24, 0x02	; 2
    20ee:	08 f4       	brcc	.+2      	; 0x20f2 <__fpcmp_parts_f+0x16>
    20f0:	43 c0       	rjmp	.+134    	; 0x2178 <__fpcmp_parts_f+0x9c>
    20f2:	94 30       	cpi	r25, 0x04	; 4
    20f4:	51 f4       	brne	.+20     	; 0x210a <__fpcmp_parts_f+0x2e>
    20f6:	11 96       	adiw	r26, 0x01	; 1
    20f8:	1c 91       	ld	r17, X
    20fa:	84 30       	cpi	r24, 0x04	; 4
    20fc:	99 f5       	brne	.+102    	; 0x2164 <__fpcmp_parts_f+0x88>
    20fe:	81 81       	ldd	r24, Z+1	; 0x01
    2100:	68 2f       	mov	r22, r24
    2102:	70 e0       	ldi	r23, 0x00	; 0
    2104:	61 1b       	sub	r22, r17
    2106:	71 09       	sbc	r23, r1
    2108:	3f c0       	rjmp	.+126    	; 0x2188 <__fpcmp_parts_f+0xac>
    210a:	84 30       	cpi	r24, 0x04	; 4
    210c:	21 f0       	breq	.+8      	; 0x2116 <__fpcmp_parts_f+0x3a>
    210e:	92 30       	cpi	r25, 0x02	; 2
    2110:	31 f4       	brne	.+12     	; 0x211e <__fpcmp_parts_f+0x42>
    2112:	82 30       	cpi	r24, 0x02	; 2
    2114:	b9 f1       	breq	.+110    	; 0x2184 <__fpcmp_parts_f+0xa8>
    2116:	81 81       	ldd	r24, Z+1	; 0x01
    2118:	88 23       	and	r24, r24
    211a:	89 f1       	breq	.+98     	; 0x217e <__fpcmp_parts_f+0xa2>
    211c:	2d c0       	rjmp	.+90     	; 0x2178 <__fpcmp_parts_f+0x9c>
    211e:	11 96       	adiw	r26, 0x01	; 1
    2120:	1c 91       	ld	r17, X
    2122:	11 97       	sbiw	r26, 0x01	; 1
    2124:	82 30       	cpi	r24, 0x02	; 2
    2126:	f1 f0       	breq	.+60     	; 0x2164 <__fpcmp_parts_f+0x88>
    2128:	81 81       	ldd	r24, Z+1	; 0x01
    212a:	18 17       	cp	r17, r24
    212c:	d9 f4       	brne	.+54     	; 0x2164 <__fpcmp_parts_f+0x88>
    212e:	12 96       	adiw	r26, 0x02	; 2
    2130:	2d 91       	ld	r18, X+
    2132:	3c 91       	ld	r19, X
    2134:	13 97       	sbiw	r26, 0x03	; 3
    2136:	82 81       	ldd	r24, Z+2	; 0x02
    2138:	93 81       	ldd	r25, Z+3	; 0x03
    213a:	82 17       	cp	r24, r18
    213c:	93 07       	cpc	r25, r19
    213e:	94 f0       	brlt	.+36     	; 0x2164 <__fpcmp_parts_f+0x88>
    2140:	28 17       	cp	r18, r24
    2142:	39 07       	cpc	r19, r25
    2144:	bc f0       	brlt	.+46     	; 0x2174 <__fpcmp_parts_f+0x98>
    2146:	14 96       	adiw	r26, 0x04	; 4
    2148:	8d 91       	ld	r24, X+
    214a:	9d 91       	ld	r25, X+
    214c:	0d 90       	ld	r0, X+
    214e:	bc 91       	ld	r27, X
    2150:	a0 2d       	mov	r26, r0
    2152:	24 81       	ldd	r18, Z+4	; 0x04
    2154:	35 81       	ldd	r19, Z+5	; 0x05
    2156:	46 81       	ldd	r20, Z+6	; 0x06
    2158:	57 81       	ldd	r21, Z+7	; 0x07
    215a:	28 17       	cp	r18, r24
    215c:	39 07       	cpc	r19, r25
    215e:	4a 07       	cpc	r20, r26
    2160:	5b 07       	cpc	r21, r27
    2162:	18 f4       	brcc	.+6      	; 0x216a <__fpcmp_parts_f+0x8e>
    2164:	11 23       	and	r17, r17
    2166:	41 f0       	breq	.+16     	; 0x2178 <__fpcmp_parts_f+0x9c>
    2168:	0a c0       	rjmp	.+20     	; 0x217e <__fpcmp_parts_f+0xa2>
    216a:	82 17       	cp	r24, r18
    216c:	93 07       	cpc	r25, r19
    216e:	a4 07       	cpc	r26, r20
    2170:	b5 07       	cpc	r27, r21
    2172:	40 f4       	brcc	.+16     	; 0x2184 <__fpcmp_parts_f+0xa8>
    2174:	11 23       	and	r17, r17
    2176:	19 f0       	breq	.+6      	; 0x217e <__fpcmp_parts_f+0xa2>
    2178:	61 e0       	ldi	r22, 0x01	; 1
    217a:	70 e0       	ldi	r23, 0x00	; 0
    217c:	05 c0       	rjmp	.+10     	; 0x2188 <__fpcmp_parts_f+0xac>
    217e:	6f ef       	ldi	r22, 0xFF	; 255
    2180:	7f ef       	ldi	r23, 0xFF	; 255
    2182:	02 c0       	rjmp	.+4      	; 0x2188 <__fpcmp_parts_f+0xac>
    2184:	60 e0       	ldi	r22, 0x00	; 0
    2186:	70 e0       	ldi	r23, 0x00	; 0
    2188:	cb 01       	movw	r24, r22
    218a:	1f 91       	pop	r17
    218c:	08 95       	ret

0000218e <__prologue_saves__>:
    218e:	2f 92       	push	r2
    2190:	3f 92       	push	r3
    2192:	4f 92       	push	r4
    2194:	5f 92       	push	r5
    2196:	6f 92       	push	r6
    2198:	7f 92       	push	r7
    219a:	8f 92       	push	r8
    219c:	9f 92       	push	r9
    219e:	af 92       	push	r10
    21a0:	bf 92       	push	r11
    21a2:	cf 92       	push	r12
    21a4:	df 92       	push	r13
    21a6:	ef 92       	push	r14
    21a8:	ff 92       	push	r15
    21aa:	0f 93       	push	r16
    21ac:	1f 93       	push	r17
    21ae:	cf 93       	push	r28
    21b0:	df 93       	push	r29
    21b2:	cd b7       	in	r28, 0x3d	; 61
    21b4:	de b7       	in	r29, 0x3e	; 62
    21b6:	ca 1b       	sub	r28, r26
    21b8:	db 0b       	sbc	r29, r27
    21ba:	0f b6       	in	r0, 0x3f	; 63
    21bc:	f8 94       	cli
    21be:	de bf       	out	0x3e, r29	; 62
    21c0:	0f be       	out	0x3f, r0	; 63
    21c2:	cd bf       	out	0x3d, r28	; 61
    21c4:	19 94       	eijmp

000021c6 <__epilogue_restores__>:
    21c6:	2a 88       	ldd	r2, Y+18	; 0x12
    21c8:	39 88       	ldd	r3, Y+17	; 0x11
    21ca:	48 88       	ldd	r4, Y+16	; 0x10
    21cc:	5f 84       	ldd	r5, Y+15	; 0x0f
    21ce:	6e 84       	ldd	r6, Y+14	; 0x0e
    21d0:	7d 84       	ldd	r7, Y+13	; 0x0d
    21d2:	8c 84       	ldd	r8, Y+12	; 0x0c
    21d4:	9b 84       	ldd	r9, Y+11	; 0x0b
    21d6:	aa 84       	ldd	r10, Y+10	; 0x0a
    21d8:	b9 84       	ldd	r11, Y+9	; 0x09
    21da:	c8 84       	ldd	r12, Y+8	; 0x08
    21dc:	df 80       	ldd	r13, Y+7	; 0x07
    21de:	ee 80       	ldd	r14, Y+6	; 0x06
    21e0:	fd 80       	ldd	r15, Y+5	; 0x05
    21e2:	0c 81       	ldd	r16, Y+4	; 0x04
    21e4:	1b 81       	ldd	r17, Y+3	; 0x03
    21e6:	aa 81       	ldd	r26, Y+2	; 0x02
    21e8:	b9 81       	ldd	r27, Y+1	; 0x01
    21ea:	ce 0f       	add	r28, r30
    21ec:	d1 1d       	adc	r29, r1
    21ee:	0f b6       	in	r0, 0x3f	; 63
    21f0:	f8 94       	cli
    21f2:	de bf       	out	0x3e, r29	; 62
    21f4:	0f be       	out	0x3f, r0	; 63
    21f6:	cd bf       	out	0x3d, r28	; 61
    21f8:	ed 01       	movw	r28, r26
    21fa:	08 95       	ret

000021fc <_exit>:
    21fc:	f8 94       	cli

000021fe <__stop_program>:
    21fe:	ff cf       	rjmp	.-2      	; 0x21fe <__stop_program>
